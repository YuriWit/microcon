
proj4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b960  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007cd8  0800bb00  0800bb00  0001bb00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080137d8  080137d8  000304cc  2**0
                  CONTENTS
  4 .ARM          00000008  080137d8  080137d8  000237d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080137e0  080137e0  000304cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080137e0  080137e0  000237e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080137e4  080137e4  000237e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004cc  20000000  080137e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000304cc  2**0
                  CONTENTS
 10 .bss          00002d78  200004e0  200004e0  000304e0  2**5
                  ALLOC
 11 ._user_heap_stack 00001000  20003258  20003258  000304e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000184d2  00000000  00000000  000304fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004003  00000000  00000000  000489ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  0004c9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001198  00000000  00000000  0004dd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d6d  00000000  00000000  0004eec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ada9  00000000  00000000  00075c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6607  00000000  00000000  000909de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cb  00000000  00000000  00166fe5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005900  00000000  00000000  001670b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000009c  00000000  00000000  0016c9b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000014d  00000000  00000000  0016ca4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004e0 	.word	0x200004e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bad8 	.word	0x0800bad8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004e4 	.word	0x200004e4
 80001cc:	0800bad8 	.word	0x0800bad8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fc4b 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f833 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f943 	bl	800080c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000586:	f000 f8ad 	bl	80006e4 <MX_I2C1_Init>
  MX_I2S3_Init();
 800058a:	f000 f8d9 	bl	8000740 <MX_I2S3_Init>
  MX_SPI1_Init();
 800058e:	f000 f907 	bl	80007a0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000592:	f007 fa97 	bl	8007ac4 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000596:	f000 f891 	bl	80006bc <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 800059a:	f008 f89f 	bl	80086dc <MX_X_CUBE_AI_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0; i < 784; i++)
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	e017      	b.n	80005d4 <main+0x60>
	  {
		  if (AiInput[i] != 0)
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <main+0x6c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d00e      	beq.n	80005ce <main+0x5a>
		  {
			  MX_X_CUBE_AI_Process();
 80005b0:	f008 f8a2 	bl	80086f8 <MX_X_CUBE_AI_Process>
			  HAL_Delay(1000);
 80005b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b8:	f000 fc9e 	bl	8000ef8 <HAL_Delay>
			  CDC_Transmit_FS(AiOutput, 10);
 80005bc:	210a      	movs	r1, #10
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <main+0x70>)
 80005c0:	f007 fb74 	bl	8007cac <CDC_Transmit_FS>
			  HAL_Delay(1000);
 80005c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c8:	f000 fc96 	bl	8000ef8 <HAL_Delay>
			  break;
 80005cc:	e006      	b.n	80005dc <main+0x68>
	  for (int i = 0; i < 784; i++)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3301      	adds	r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80005da:	dbe3      	blt.n	80005a4 <main+0x30>
 80005dc:	e7df      	b.n	800059e <main+0x2a>
 80005de:	bf00      	nop
 80005e0:	200005f8 	.word	0x200005f8
 80005e4:	20000908 	.word	0x20000908

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00a f8fe 	bl	800a7f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800065c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000666:	2307      	movs	r3, #7
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	4618      	mov	r0, r3
 8000670:	f002 ffc6 	bl	8003600 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067a:	f000 f9c5 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2105      	movs	r1, #5
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fa27 	bl	8003af0 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a8:	f000 f9ae 	bl	8000a08 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	; 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_CRC_Init+0x20>)
 80006c2:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <MX_CRC_Init+0x24>)
 80006c4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_CRC_Init+0x20>)
 80006c8:	f000 fd4b 	bl	8001162 <HAL_CRC_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006d2:	f000 f999 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200004fc 	.word	0x200004fc
 80006e0:	40023000 	.word	0x40023000

080006e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C1_Init+0x50>)
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <MX_I2C1_Init+0x54>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_I2C1_Init+0x58>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_I2C1_Init+0x50>)
 8000702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_I2C1_Init+0x50>)
 8000722:	f000 ff0b 	bl	800153c <HAL_I2C_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800072c:	f000 f96c 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000504 	.word	0x20000504
 8000738:	40005400 	.word	0x40005400
 800073c:	000186a0 	.word	0x000186a0

08000740 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_I2S3_Init+0x54>)
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <MX_I2S3_Init+0x58>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_I2S3_Init+0x54>)
 800074c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000750:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_I2S3_Init+0x54>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_I2S3_Init+0x54>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_I2S3_Init+0x54>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_I2S3_Init+0x54>)
 8000768:	4a0c      	ldr	r2, [pc, #48]	; (800079c <MX_I2S3_Init+0x5c>)
 800076a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_I2S3_Init+0x54>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_I2S3_Init+0x54>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_I2S3_Init+0x54>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_I2S3_Init+0x54>)
 8000780:	f001 f820 	bl	80017c4 <HAL_I2S_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800078a:	f000 f93d 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000558 	.word	0x20000558
 8000798:	40003c00 	.word	0x40003c00
 800079c:	00017700 	.word	0x00017700

080007a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_SPI1_Init+0x64>)
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <MX_SPI1_Init+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_SPI1_Init+0x64>)
 80007ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_SPI1_Init+0x64>)
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_SPI1_Init+0x64>)
 80007ec:	220a      	movs	r2, #10
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_SPI1_Init+0x64>)
 80007f2:	f003 fcc9 	bl	8004188 <HAL_SPI_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007fc:	f000 f904 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200005a0 	.word	0x200005a0
 8000808:	40013000 	.word	0x40013000

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	4b72      	ldr	r3, [pc, #456]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a71      	ldr	r2, [pc, #452]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 800082c:	f043 0310 	orr.w	r3, r3, #16
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b6f      	ldr	r3, [pc, #444]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0310 	and.w	r3, r3, #16
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	4b6b      	ldr	r3, [pc, #428]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a6a      	ldr	r2, [pc, #424]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b68      	ldr	r3, [pc, #416]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b64      	ldr	r3, [pc, #400]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a63      	ldr	r2, [pc, #396]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b61      	ldr	r3, [pc, #388]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a5c      	ldr	r2, [pc, #368]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b5a      	ldr	r3, [pc, #360]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b56      	ldr	r3, [pc, #344]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a55      	ldr	r2, [pc, #340]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b53      	ldr	r3, [pc, #332]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b4f      	ldr	r3, [pc, #316]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a4e      	ldr	r2, [pc, #312]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b4c      	ldr	r3, [pc, #304]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2108      	movs	r1, #8
 80008ce:	4849      	ldr	r0, [pc, #292]	; (80009f4 <MX_GPIO_Init+0x1e8>)
 80008d0:	f000 fe00 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2101      	movs	r1, #1
 80008d8:	4847      	ldr	r0, [pc, #284]	; (80009f8 <MX_GPIO_Init+0x1ec>)
 80008da:	f000 fdfb 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008de:	2200      	movs	r2, #0
 80008e0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008e4:	4845      	ldr	r0, [pc, #276]	; (80009fc <MX_GPIO_Init+0x1f0>)
 80008e6:	f000 fdf5 	bl	80014d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ea:	2308      	movs	r3, #8
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	483c      	ldr	r0, [pc, #240]	; (80009f4 <MX_GPIO_Init+0x1e8>)
 8000902:	f000 fc4b 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4836      	ldr	r0, [pc, #216]	; (80009f8 <MX_GPIO_Init+0x1ec>)
 800091e:	f000 fc3d 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000922:	2308      	movs	r3, #8
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000932:	2305      	movs	r3, #5
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	482e      	ldr	r0, [pc, #184]	; (80009f8 <MX_GPIO_Init+0x1ec>)
 800093e:	f000 fc2d 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000946:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	482a      	ldr	r0, [pc, #168]	; (8000a00 <MX_GPIO_Init+0x1f4>)
 8000958:	f000 fc20 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800095c:	2304      	movs	r3, #4
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4825      	ldr	r0, [pc, #148]	; (8000a04 <MX_GPIO_Init+0x1f8>)
 8000970:	f000 fc14 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000986:	2305      	movs	r3, #5
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	481c      	ldr	r0, [pc, #112]	; (8000a04 <MX_GPIO_Init+0x1f8>)
 8000992:	f000 fc03 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000996:	f24f 0310 	movw	r3, #61456	; 0xf010
 800099a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4813      	ldr	r0, [pc, #76]	; (80009fc <MX_GPIO_Init+0x1f0>)
 80009b0:	f000 fbf4 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b4:	2320      	movs	r3, #32
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_GPIO_Init+0x1f0>)
 80009c8:	f000 fbe8 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_GPIO_Init+0x1e8>)
 80009e2:	f000 fbdb 	bl	800119c <HAL_GPIO_Init>

}
 80009e6:	bf00      	nop
 80009e8:	3730      	adds	r7, #48	; 0x30
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40020800 	.word	0x40020800
 80009fc:	40020c00 	.word	0x40020c00
 8000a00:	40020000 	.word	0x40020000
 8000a04:	40020400 	.word	0x40020400

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a52:	2007      	movs	r0, #7
 8000a54:	f000 fb44 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800

08000a64 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <HAL_CRC_MspInit+0x3c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d10d      	bne.n	8000a92 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_CRC_MspInit+0x40>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <HAL_CRC_MspInit+0x40>)
 8000a80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <HAL_CRC_MspInit+0x40>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40023000 	.word	0x40023000
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a19      	ldr	r2, [pc, #100]	; (8000b2c <HAL_I2C_MspInit+0x84>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d12c      	bne.n	8000b24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_I2C_MspInit+0x88>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <HAL_I2C_MspInit+0x88>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_I2C_MspInit+0x88>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ae6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aec:	2312      	movs	r3, #18
 8000aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af8:	2304      	movs	r3, #4
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	480c      	ldr	r0, [pc, #48]	; (8000b34 <HAL_I2C_MspInit+0x8c>)
 8000b04:	f000 fb4a 	bl	800119c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_I2C_MspInit+0x88>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_I2C_MspInit+0x88>)
 8000b12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b16:	6413      	str	r3, [r2, #64]	; 0x40
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_I2C_MspInit+0x88>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020400 	.word	0x40020400

08000b38 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	; 0x38
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a31      	ldr	r2, [pc, #196]	; (8000c28 <HAL_I2S_MspInit+0xf0>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d15a      	bne.n	8000c1e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b6c:	23c0      	movs	r3, #192	; 0xc0
 8000b6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 f9c5 	bl	8003f08 <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b84:	f7ff ff40 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <HAL_I2S_MspInit+0xf4>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	4a26      	ldr	r2, [pc, #152]	; (8000c2c <HAL_I2S_MspInit+0xf4>)
 8000b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b96:	6413      	str	r3, [r2, #64]	; 0x40
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <HAL_I2S_MspInit+0xf4>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <HAL_I2S_MspInit+0xf4>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <HAL_I2S_MspInit+0xf4>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <HAL_I2S_MspInit+0xf4>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_I2S_MspInit+0xf4>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <HAL_I2S_MspInit+0xf4>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_I2S_MspInit+0xf4>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bec:	2306      	movs	r3, #6
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480e      	ldr	r0, [pc, #56]	; (8000c30 <HAL_I2S_MspInit+0xf8>)
 8000bf8:	f000 fad0 	bl	800119c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bfc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c0e:	2306      	movs	r3, #6
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <HAL_I2S_MspInit+0xfc>)
 8000c1a:	f000 fabf 	bl	800119c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3738      	adds	r7, #56	; 0x38
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40003c00 	.word	0x40003c00
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000
 8000c34:	40020800 	.word	0x40020800

08000c38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <HAL_SPI_MspInit+0x84>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d12b      	bne.n	8000cb2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_SPI_MspInit+0x88>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <HAL_SPI_MspInit+0x88>)
 8000c64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c68:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_SPI_MspInit+0x88>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_SPI_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <HAL_SPI_MspInit+0x88>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_SPI_MspInit+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c92:	23e0      	movs	r3, #224	; 0xe0
 8000c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca2:	2305      	movs	r3, #5
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <HAL_SPI_MspInit+0x8c>)
 8000cae:	f000 fa75 	bl	800119c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	; 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40013000 	.word	0x40013000
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020000 	.word	0x40020000

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d14:	f000 f8d0 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <OTG_FS_IRQHandler+0x10>)
 8000d22:	f001 fb3f 	bl	80023a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20001dfc 	.word	0x20001dfc

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f009 fd12 	bl	800a788 <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2001c000 	.word	0x2001c000
 8000d90:	00000800 	.word	0x00000800
 8000d94:	20000914 	.word	0x20000914
 8000d98:	20003258 	.word	0x20003258

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc6:	490e      	ldr	r1, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ddc:	4c0b      	ldr	r4, [pc, #44]	; (8000e0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dea:	f7ff ffd7 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f009 fcd1 	bl	800a794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fbbf 	bl	8000574 <main>
  bx  lr    
 8000df6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	200004cc 	.word	0x200004cc
  ldr r2, =_sidata
 8000e04:	080137e8 	.word	0x080137e8
  ldr r2, =_sbss
 8000e08:	200004e0 	.word	0x200004e0
  ldr r4, =_ebss
 8000e0c:	20003258 	.word	0x20003258

08000e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_Init+0x40>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_Init+0x40>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x40>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f94f 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f808 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fde4 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x54>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x58>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f967 	bl	800114a <HAL_SYSTICK_Config>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00e      	b.n	8000ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d80a      	bhi.n	8000ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f000 f92f 	bl	80010f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_InitTick+0x5c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000918 	.word	0x20000918

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000918 	.word	0x20000918

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff ffee 	bl	8000ee0 <HAL_GetTick>
 8000f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f10:	d005      	beq.n	8000f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_Delay+0x44>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1e:	bf00      	nop
 8000f20:	f7ff ffde 	bl	8000ee0 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d8f7      	bhi.n	8000f20 <HAL_Delay+0x28>
  {
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008

08000f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db0b      	blt.n	8000fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	f003 021f 	and.w	r2, r3, #31
 8000fbc:	4907      	ldr	r1, [pc, #28]	; (8000fdc <__NVIC_EnableIRQ+0x38>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	; (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff8e 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff29 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff3e 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff8e 	bl	8001034 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff31 	bl	8000fa4 <__NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffa2 	bl	800109c <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e00e      	b.n	8001192 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	795b      	ldrb	r3, [r3, #5]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d105      	bne.n	800118a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fc6d 	bl	8000a64 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	e16b      	b.n	8001490 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	f040 815a 	bne.w	800148a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d005      	beq.n	80011ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d130      	bne.n	8001250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 0201 	and.w	r2, r3, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b03      	cmp	r3, #3
 800125a:	d017      	beq.n	800128c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d123      	bne.n	80012e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	08da      	lsrs	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3208      	adds	r2, #8
 80012a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	69b9      	ldr	r1, [r7, #24]
 80012dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0203 	and.w	r2, r3, #3
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80b4 	beq.w	800148a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b60      	ldr	r3, [pc, #384]	; (80014a8 <HAL_GPIO_Init+0x30c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a5f      	ldr	r2, [pc, #380]	; (80014a8 <HAL_GPIO_Init+0x30c>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b5d      	ldr	r3, [pc, #372]	; (80014a8 <HAL_GPIO_Init+0x30c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133e:	4a5b      	ldr	r2, [pc, #364]	; (80014ac <HAL_GPIO_Init+0x310>)
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a52      	ldr	r2, [pc, #328]	; (80014b0 <HAL_GPIO_Init+0x314>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d02b      	beq.n	80013c2 <HAL_GPIO_Init+0x226>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a51      	ldr	r2, [pc, #324]	; (80014b4 <HAL_GPIO_Init+0x318>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d025      	beq.n	80013be <HAL_GPIO_Init+0x222>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a50      	ldr	r2, [pc, #320]	; (80014b8 <HAL_GPIO_Init+0x31c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d01f      	beq.n	80013ba <HAL_GPIO_Init+0x21e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4f      	ldr	r2, [pc, #316]	; (80014bc <HAL_GPIO_Init+0x320>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <HAL_GPIO_Init+0x21a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4e      	ldr	r2, [pc, #312]	; (80014c0 <HAL_GPIO_Init+0x324>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x216>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4d      	ldr	r2, [pc, #308]	; (80014c4 <HAL_GPIO_Init+0x328>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x212>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4c      	ldr	r2, [pc, #304]	; (80014c8 <HAL_GPIO_Init+0x32c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x20e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4b      	ldr	r2, [pc, #300]	; (80014cc <HAL_GPIO_Init+0x330>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x20a>
 80013a2:	2307      	movs	r3, #7
 80013a4:	e00e      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013a6:	2308      	movs	r3, #8
 80013a8:	e00c      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013aa:	2306      	movs	r3, #6
 80013ac:	e00a      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013ae:	2305      	movs	r3, #5
 80013b0:	e008      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013b2:	2304      	movs	r3, #4
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013b6:	2303      	movs	r3, #3
 80013b8:	e004      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013c2:	2300      	movs	r3, #0
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	f002 0203 	and.w	r2, r2, #3
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	4093      	lsls	r3, r2
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d4:	4935      	ldr	r1, [pc, #212]	; (80014ac <HAL_GPIO_Init+0x310>)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <HAL_GPIO_Init+0x334>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001406:	4a32      	ldr	r2, [pc, #200]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <HAL_GPIO_Init+0x334>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001430:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145a:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <HAL_GPIO_Init+0x334>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3301      	adds	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	f67f ae90 	bls.w	80011b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40013800 	.word	0x40013800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40021400 	.word	0x40021400
 80014c8:	40021800 	.word	0x40021800
 80014cc:	40021c00 	.word	0x40021c00
 80014d0:	40013c00 	.word	0x40013c00

080014d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
 80014e0:	4613      	mov	r3, r2
 80014e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f0:	e003      	b.n	80014fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	041a      	lsls	r2, r3, #16
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	619a      	str	r2, [r3, #24]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	460b      	mov	r3, r1
 8001510:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001518:	887a      	ldrh	r2, [r7, #2]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	041a      	lsls	r2, r3, #16
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43d9      	mvns	r1, r3
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	400b      	ands	r3, r1
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e12b      	b.n	80017a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d106      	bne.n	8001568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff faa0 	bl	8000aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2224      	movs	r2, #36	; 0x24
 800156c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0201 	bic.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800158e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800159e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015a0:	f002 fc9e 	bl	8003ee0 <HAL_RCC_GetPCLK1Freq>
 80015a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	4a81      	ldr	r2, [pc, #516]	; (80017b0 <HAL_I2C_Init+0x274>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d807      	bhi.n	80015c0 <HAL_I2C_Init+0x84>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4a80      	ldr	r2, [pc, #512]	; (80017b4 <HAL_I2C_Init+0x278>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	bf94      	ite	ls
 80015b8:	2301      	movls	r3, #1
 80015ba:	2300      	movhi	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	e006      	b.n	80015ce <HAL_I2C_Init+0x92>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4a7d      	ldr	r2, [pc, #500]	; (80017b8 <HAL_I2C_Init+0x27c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	bf94      	ite	ls
 80015c8:	2301      	movls	r3, #1
 80015ca:	2300      	movhi	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0e7      	b.n	80017a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4a78      	ldr	r2, [pc, #480]	; (80017bc <HAL_I2C_Init+0x280>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	0c9b      	lsrs	r3, r3, #18
 80015e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a6a      	ldr	r2, [pc, #424]	; (80017b0 <HAL_I2C_Init+0x274>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d802      	bhi.n	8001610 <HAL_I2C_Init+0xd4>
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3301      	adds	r3, #1
 800160e:	e009      	b.n	8001624 <HAL_I2C_Init+0xe8>
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	4a69      	ldr	r2, [pc, #420]	; (80017c0 <HAL_I2C_Init+0x284>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	099b      	lsrs	r3, r3, #6
 8001622:	3301      	adds	r3, #1
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	430b      	orrs	r3, r1
 800162a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	495c      	ldr	r1, [pc, #368]	; (80017b0 <HAL_I2C_Init+0x274>)
 8001640:	428b      	cmp	r3, r1
 8001642:	d819      	bhi.n	8001678 <HAL_I2C_Init+0x13c>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1e59      	subs	r1, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001652:	1c59      	adds	r1, r3, #1
 8001654:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001658:	400b      	ands	r3, r1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00a      	beq.n	8001674 <HAL_I2C_Init+0x138>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1e59      	subs	r1, r3, #1
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fbb1 f3f3 	udiv	r3, r1, r3
 800166c:	3301      	adds	r3, #1
 800166e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001672:	e051      	b.n	8001718 <HAL_I2C_Init+0x1dc>
 8001674:	2304      	movs	r3, #4
 8001676:	e04f      	b.n	8001718 <HAL_I2C_Init+0x1dc>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d111      	bne.n	80016a4 <HAL_I2C_Init+0x168>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1e58      	subs	r0, r3, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6859      	ldr	r1, [r3, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	440b      	add	r3, r1
 800168e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001692:	3301      	adds	r3, #1
 8001694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	e012      	b.n	80016ca <HAL_I2C_Init+0x18e>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	1e58      	subs	r0, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	0099      	lsls	r1, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ba:	3301      	adds	r3, #1
 80016bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf0c      	ite	eq
 80016c4:	2301      	moveq	r3, #1
 80016c6:	2300      	movne	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_I2C_Init+0x196>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e022      	b.n	8001718 <HAL_I2C_Init+0x1dc>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10e      	bne.n	80016f8 <HAL_I2C_Init+0x1bc>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1e58      	subs	r0, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6859      	ldr	r1, [r3, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	440b      	add	r3, r1
 80016e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ec:	3301      	adds	r3, #1
 80016ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f6:	e00f      	b.n	8001718 <HAL_I2C_Init+0x1dc>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1e58      	subs	r0, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6859      	ldr	r1, [r3, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	0099      	lsls	r1, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	fbb0 f3f3 	udiv	r3, r0, r3
 800170e:	3301      	adds	r3, #1
 8001710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	6809      	ldr	r1, [r1, #0]
 800171c:	4313      	orrs	r3, r2
 800171e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6911      	ldr	r1, [r2, #16]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68d2      	ldr	r2, [r2, #12]
 8001752:	4311      	orrs	r1, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	430b      	orrs	r3, r1
 800175a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2220      	movs	r2, #32
 8001792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	000186a0 	.word	0x000186a0
 80017b4:	001e847f 	.word	0x001e847f
 80017b8:	003d08ff 	.word	0x003d08ff
 80017bc:	431bde83 	.word	0x431bde83
 80017c0:	10624dd3 	.word	0x10624dd3

080017c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e128      	b.n	8001a28 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a90      	ldr	r2, [pc, #576]	; (8001a30 <HAL_I2S_Init+0x26c>)
 80017ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff f9a1 	bl	8000b38 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2202      	movs	r2, #2
 80017fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800180c:	f023 030f 	bic.w	r3, r3, #15
 8001810:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2202      	movs	r2, #2
 8001818:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d060      	beq.n	80018e4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800182a:	2310      	movs	r3, #16
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	e001      	b.n	8001834 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001830:	2320      	movs	r3, #32
 8001832:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b20      	cmp	r3, #32
 800183a:	d802      	bhi.n	8001842 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001842:	2001      	movs	r0, #1
 8001844:	f002 fc42 	bl	80040cc <HAL_RCCEx_GetPeriphCLKFreq>
 8001848:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001852:	d125      	bne.n	80018a0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d010      	beq.n	800187e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	fbb2 f2f3 	udiv	r2, r2, r3
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	461a      	mov	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	fbb2 f3f3 	udiv	r3, r2, r3
 8001878:	3305      	adds	r3, #5
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	e01f      	b.n	80018be <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	fbb2 f2f3 	udiv	r2, r2, r3
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	461a      	mov	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	3305      	adds	r3, #5
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	e00e      	b.n	80018be <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	461a      	mov	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	3305      	adds	r3, #5
 80018bc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4a5c      	ldr	r2, [pc, #368]	; (8001a34 <HAL_I2S_Init+0x270>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	08db      	lsrs	r3, r3, #3
 80018c8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	085b      	lsrs	r3, r3, #1
 80018da:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	e003      	b.n	80018ec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80018e4:	2302      	movs	r3, #2
 80018e6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d902      	bls.n	80018f8 <HAL_I2S_Init+0x134>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	2bff      	cmp	r3, #255	; 0xff
 80018f6:	d907      	bls.n	8001908 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fc:	f043 0210 	orr.w	r2, r3, #16
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e08f      	b.n	8001a28 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	ea42 0103 	orr.w	r1, r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	430a      	orrs	r2, r1
 800191a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001926:	f023 030f 	bic.w	r3, r3, #15
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6851      	ldr	r1, [r2, #4]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6892      	ldr	r2, [r2, #8]
 8001932:	4311      	orrs	r1, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	68d2      	ldr	r2, [r2, #12]
 8001938:	4311      	orrs	r1, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6992      	ldr	r2, [r2, #24]
 800193e:	430a      	orrs	r2, r1
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800194a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d161      	bne.n	8001a18 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a38      	ldr	r2, [pc, #224]	; (8001a38 <HAL_I2S_Init+0x274>)
 8001958:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a37      	ldr	r2, [pc, #220]	; (8001a3c <HAL_I2S_Init+0x278>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_I2S_Init+0x1a4>
 8001964:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <HAL_I2S_Init+0x27c>)
 8001966:	e001      	b.n	800196c <HAL_I2S_Init+0x1a8>
 8001968:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	4932      	ldr	r1, [pc, #200]	; (8001a3c <HAL_I2S_Init+0x278>)
 8001974:	428a      	cmp	r2, r1
 8001976:	d101      	bne.n	800197c <HAL_I2S_Init+0x1b8>
 8001978:	4a31      	ldr	r2, [pc, #196]	; (8001a40 <HAL_I2S_Init+0x27c>)
 800197a:	e001      	b.n	8001980 <HAL_I2S_Init+0x1bc>
 800197c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001980:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001984:	f023 030f 	bic.w	r3, r3, #15
 8001988:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a2b      	ldr	r2, [pc, #172]	; (8001a3c <HAL_I2S_Init+0x278>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_I2S_Init+0x1d4>
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_I2S_Init+0x27c>)
 8001996:	e001      	b.n	800199c <HAL_I2S_Init+0x1d8>
 8001998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800199c:	2202      	movs	r2, #2
 800199e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <HAL_I2S_Init+0x278>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_I2S_Init+0x1ea>
 80019aa:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_I2S_Init+0x27c>)
 80019ac:	e001      	b.n	80019b2 <HAL_I2S_Init+0x1ee>
 80019ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019be:	d003      	beq.n	80019c8 <HAL_I2S_Init+0x204>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d103      	bne.n	80019d0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80019c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	e001      	b.n	80019d4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019de:	4313      	orrs	r3, r2
 80019e0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019e8:	4313      	orrs	r3, r2
 80019ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019f2:	4313      	orrs	r3, r2
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	897b      	ldrh	r3, [r7, #10]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a00:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <HAL_I2S_Init+0x278>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_I2S_Init+0x24c>
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <HAL_I2S_Init+0x27c>)
 8001a0e:	e001      	b.n	8001a14 <HAL_I2S_Init+0x250>
 8001a10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a14:	897a      	ldrh	r2, [r7, #10]
 8001a16:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	08001b3b 	.word	0x08001b3b
 8001a34:	cccccccd 	.word	0xcccccccd
 8001a38:	08001c51 	.word	0x08001c51
 8001a3c:	40003800 	.word	0x40003800
 8001a40:	40003400 	.word	0x40003400

08001a44 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	881a      	ldrh	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	1c9a      	adds	r2, r3, #2
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10e      	bne.n	8001ad4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ac4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffb8 	bl	8001a44 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	b292      	uxth	r2, r2
 8001af0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	1c9a      	adds	r2, r3, #2
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10e      	bne.n	8001b32 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b22:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff93 	bl	8001a58 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d13a      	bne.n	8001bcc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d109      	bne.n	8001b74 <I2S_IRQHandler+0x3a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6a:	2b40      	cmp	r3, #64	; 0x40
 8001b6c:	d102      	bne.n	8001b74 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ffb4 	bl	8001adc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7a:	2b40      	cmp	r3, #64	; 0x40
 8001b7c:	d126      	bne.n	8001bcc <I2S_IRQHandler+0x92>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b20      	cmp	r3, #32
 8001b8a:	d11f      	bne.n	8001bcc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f043 0202 	orr.w	r2, r3, #2
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff50 	bl	8001a6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d136      	bne.n	8001c46 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d109      	bne.n	8001bf6 <I2S_IRQHandler+0xbc>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bec:	2b80      	cmp	r3, #128	; 0x80
 8001bee:	d102      	bne.n	8001bf6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff45 	bl	8001a80 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d122      	bne.n	8001c46 <I2S_IRQHandler+0x10c>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d11b      	bne.n	8001c46 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c1c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c38:	f043 0204 	orr.w	r2, r3, #4
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ff13 	bl	8001a6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a92      	ldr	r2, [pc, #584]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001c6a:	4b92      	ldr	r3, [pc, #584]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c6c:	e001      	b.n	8001c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001c6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a8b      	ldr	r2, [pc, #556]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d101      	bne.n	8001c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001c88:	4b8a      	ldr	r3, [pc, #552]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c8a:	e001      	b.n	8001c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001c8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c9c:	d004      	beq.n	8001ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 8099 	bne.w	8001dda <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d107      	bne.n	8001cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f925 	bl	8001f0c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d107      	bne.n	8001cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f9c8 	bl	800206c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce2:	2b40      	cmp	r3, #64	; 0x40
 8001ce4:	d13a      	bne.n	8001d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d035      	beq.n	8001d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a6e      	ldr	r2, [pc, #440]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001cfa:	4b6e      	ldr	r3, [pc, #440]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001cfc:	e001      	b.n	8001d02 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001cfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4969      	ldr	r1, [pc, #420]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d0a:	428b      	cmp	r3, r1
 8001d0c:	d101      	bne.n	8001d12 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001d0e:	4b69      	ldr	r3, [pc, #420]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d10:	e001      	b.n	8001d16 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001d12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d1a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f043 0202 	orr.w	r2, r3, #2
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff fe88 	bl	8001a6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	f040 80c3 	bne.w	8001eee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80bd 	beq.w	8001eee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d82:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a49      	ldr	r2, [pc, #292]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001d8e:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d90:	e001      	b.n	8001d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001d92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4944      	ldr	r1, [pc, #272]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d9e:	428b      	cmp	r3, r1
 8001da0:	d101      	bne.n	8001da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001da2:	4b44      	ldr	r3, [pc, #272]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001da4:	e001      	b.n	8001daa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001daa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f043 0204 	orr.w	r2, r3, #4
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fe4a 	bl	8001a6c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001dd8:	e089      	b.n	8001eee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d107      	bne.n	8001df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8be 	bl	8001f70 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d107      	bne.n	8001e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f8fd 	bl	8002008 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e14:	2b40      	cmp	r3, #64	; 0x40
 8001e16:	d12f      	bne.n	8001e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d02a      	beq.n	8001e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e30:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d101      	bne.n	8001e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e3e:	e001      	b.n	8001e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001e40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4919      	ldr	r1, [pc, #100]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e4c:	428b      	cmp	r3, r1
 8001e4e:	d101      	bne.n	8001e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e52:	e001      	b.n	8001e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001e54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e5c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f043 0202 	orr.w	r2, r3, #2
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff fdfa 	bl	8001a6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d136      	bne.n	8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d031      	beq.n	8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e98:	e001      	b.n	8001e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001e9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4902      	ldr	r1, [pc, #8]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ea6:	428b      	cmp	r3, r1
 8001ea8:	d106      	bne.n	8001eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001eaa:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001eac:	e006      	b.n	8001ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001eae:	bf00      	nop
 8001eb0:	40003800 	.word	0x40003800
 8001eb4:	40003400 	.word	0x40003400
 8001eb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ebc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ec0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ed0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f043 0204 	orr.w	r2, r3, #4
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fdc0 	bl	8001a6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001eec:	e000      	b.n	8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001eee:	bf00      	nop
}
 8001ef0:	bf00      	nop
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	1c99      	adds	r1, r3, #2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6251      	str	r1, [r2, #36]	; 0x24
 8001f1e:	881a      	ldrh	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d113      	bne.n	8001f66 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f4c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d106      	bne.n	8001f66 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ffc9 	bl	8001ef8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	1c99      	adds	r1, r3, #2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6251      	str	r1, [r2, #36]	; 0x24
 8001f82:	8819      	ldrh	r1, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <I2SEx_TxISR_I2SExt+0x90>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <I2SEx_TxISR_I2SExt+0x22>
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <I2SEx_TxISR_I2SExt+0x94>)
 8001f90:	e001      	b.n	8001f96 <I2SEx_TxISR_I2SExt+0x26>
 8001f92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f96:	460a      	mov	r2, r1
 8001f98:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d121      	bne.n	8001ff6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <I2SEx_TxISR_I2SExt+0x90>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <I2SEx_TxISR_I2SExt+0x50>
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <I2SEx_TxISR_I2SExt+0x94>)
 8001fbe:	e001      	b.n	8001fc4 <I2SEx_TxISR_I2SExt+0x54>
 8001fc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	490d      	ldr	r1, [pc, #52]	; (8002000 <I2SEx_TxISR_I2SExt+0x90>)
 8001fcc:	428b      	cmp	r3, r1
 8001fce:	d101      	bne.n	8001fd4 <I2SEx_TxISR_I2SExt+0x64>
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <I2SEx_TxISR_I2SExt+0x94>)
 8001fd2:	e001      	b.n	8001fd8 <I2SEx_TxISR_I2SExt+0x68>
 8001fd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fdc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d106      	bne.n	8001ff6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ff81 	bl	8001ef8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40003800 	.word	0x40003800
 8002004:	40003400 	.word	0x40003400

08002008 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68d8      	ldr	r0, [r3, #12]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	1c99      	adds	r1, r3, #2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002020:	b282      	uxth	r2, r0
 8002022:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002028:	b29b      	uxth	r3, r3
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d113      	bne.n	8002064 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800204a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d106      	bne.n	8002064 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ff4a 	bl	8001ef8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a20      	ldr	r2, [pc, #128]	; (80020fc <I2SEx_RxISR_I2SExt+0x90>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <I2SEx_RxISR_I2SExt+0x16>
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <I2SEx_RxISR_I2SExt+0x94>)
 8002080:	e001      	b.n	8002086 <I2SEx_RxISR_I2SExt+0x1a>
 8002082:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002086:	68d8      	ldr	r0, [r3, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	1c99      	adds	r1, r3, #2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002092:	b282      	uxth	r2, r0
 8002094:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d121      	bne.n	80020f2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <I2SEx_RxISR_I2SExt+0x90>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d101      	bne.n	80020bc <I2SEx_RxISR_I2SExt+0x50>
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <I2SEx_RxISR_I2SExt+0x94>)
 80020ba:	e001      	b.n	80020c0 <I2SEx_RxISR_I2SExt+0x54>
 80020bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	490d      	ldr	r1, [pc, #52]	; (80020fc <I2SEx_RxISR_I2SExt+0x90>)
 80020c8:	428b      	cmp	r3, r1
 80020ca:	d101      	bne.n	80020d0 <I2SEx_RxISR_I2SExt+0x64>
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <I2SEx_RxISR_I2SExt+0x94>)
 80020ce:	e001      	b.n	80020d4 <I2SEx_RxISR_I2SExt+0x68>
 80020d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020d8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d106      	bne.n	80020f2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff03 	bl	8001ef8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40003800 	.word	0x40003800
 8002100:	40003400 	.word	0x40003400

08002104 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002106:	b08f      	sub	sp, #60	; 0x3c
 8002108:	af0a      	add	r7, sp, #40	; 0x28
 800210a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e10f      	b.n	8002336 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d106      	bne.n	8002136 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f005 ff03 	bl	8007f3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2203      	movs	r2, #3
 800213a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d102      	bne.n	8002150 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f002 f9b4 	bl	80044c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	687e      	ldr	r6, [r7, #4]
 8002162:	466d      	mov	r5, sp
 8002164:	f106 0410 	add.w	r4, r6, #16
 8002168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800216c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002170:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002174:	e885 0003 	stmia.w	r5, {r0, r1}
 8002178:	1d33      	adds	r3, r6, #4
 800217a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800217c:	6838      	ldr	r0, [r7, #0]
 800217e:	f002 f88c 	bl	800429a <USB_CoreInit>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0d0      	b.n	8002336 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f002 f9a2 	bl	80044e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	e04a      	b.n	800223c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	333d      	adds	r3, #61	; 0x3d
 80021b6:	2201      	movs	r2, #1
 80021b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	333c      	adds	r3, #60	; 0x3c
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	b298      	uxth	r0, r3
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	3344      	adds	r3, #68	; 0x44
 80021e2:	4602      	mov	r2, r0
 80021e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	3340      	adds	r3, #64	; 0x40
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	3348      	adds	r3, #72	; 0x48
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	334c      	adds	r3, #76	; 0x4c
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	3354      	adds	r3, #84	; 0x54
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	3301      	adds	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	429a      	cmp	r2, r3
 8002244:	d3af      	bcc.n	80021a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	e044      	b.n	80022d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	3301      	adds	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d3b5      	bcc.n	800224c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	687e      	ldr	r6, [r7, #4]
 80022e8:	466d      	mov	r5, sp
 80022ea:	f106 0410 	add.w	r4, r6, #16
 80022ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80022fe:	1d33      	adds	r3, r6, #4
 8002300:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002302:	6838      	ldr	r0, [r7, #0]
 8002304:	f002 f93a 	bl	800457c <USB_DevInit>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e00d      	b.n	8002336 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f003 fa89 	bl	8005846 <USB_DevDisconnect>

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800233e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_PCD_Start+0x1c>
 8002356:	2302      	movs	r3, #2
 8002358:	e020      	b.n	800239c <HAL_PCD_Start+0x5e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	2b01      	cmp	r3, #1
 8002368:	d109      	bne.n	800237e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800236e:	2b01      	cmp	r3, #1
 8002370:	d005      	beq.n	800237e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002376:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f002 f88c 	bl	80044a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f003 fa39 	bl	8005804 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b08d      	sub	sp, #52	; 0x34
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f003 faf7 	bl	80059ae <USB_GetMode>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 848a 	bne.w	8002cdc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f003 fa5b 	bl	8005888 <USB_ReadInterrupts>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 8480 	beq.w	8002cda <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 fa48 	bl	8005888 <USB_ReadInterrupts>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d107      	bne.n	8002412 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f002 0202 	and.w	r2, r2, #2
 8002410:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f003 fa36 	bl	8005888 <USB_ReadInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b10      	cmp	r3, #16
 8002424:	d161      	bne.n	80024ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699a      	ldr	r2, [r3, #24]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0210 	bic.w	r2, r2, #16
 8002434:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	f003 020f 	and.w	r2, r3, #15
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	3304      	adds	r3, #4
 8002454:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	0c5b      	lsrs	r3, r3, #17
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	2b02      	cmp	r3, #2
 8002460:	d124      	bne.n	80024ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d035      	beq.n	80024da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800247c:	b29b      	uxth	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	6a38      	ldr	r0, [r7, #32]
 8002482:	f003 f86d 	bl	8005560 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002492:	441a      	add	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	6a1a      	ldr	r2, [r3, #32]
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	091b      	lsrs	r3, r3, #4
 80024a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024a4:	441a      	add	r2, r3
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	621a      	str	r2, [r3, #32]
 80024aa:	e016      	b.n	80024da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	0c5b      	lsrs	r3, r3, #17
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	2b06      	cmp	r3, #6
 80024b6:	d110      	bne.n	80024da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024be:	2208      	movs	r2, #8
 80024c0:	4619      	mov	r1, r3
 80024c2:	6a38      	ldr	r0, [r7, #32]
 80024c4:	f003 f84c 	bl	8005560 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	6a1a      	ldr	r2, [r3, #32]
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024d4:	441a      	add	r2, r3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0210 	orr.w	r2, r2, #16
 80024e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 f9ca 	bl	8005888 <USB_ReadInterrupts>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024fe:	f040 80a7 	bne.w	8002650 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f003 f9cf 	bl	80058ae <USB_ReadDevAllOutEpInterrupt>
 8002510:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002512:	e099      	b.n	8002648 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 808e 	beq.w	800263c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f003 f9f3 	bl	8005916 <USB_ReadDevOutEPInterrupt>
 8002530:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00c      	beq.n	8002556 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002548:	461a      	mov	r2, r3
 800254a:	2301      	movs	r3, #1
 800254c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800254e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fec3 	bl	80032dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00c      	beq.n	800257a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256c:	461a      	mov	r2, r3
 800256e:	2308      	movs	r3, #8
 8002570:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 ff99 	bl	80034ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	4413      	add	r3, r2
 800258c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002590:	461a      	mov	r2, r3
 8002592:	2310      	movs	r3, #16
 8002594:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d030      	beq.n	8002602 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a8:	2b80      	cmp	r3, #128	; 0x80
 80025aa:	d109      	bne.n	80025c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	69fa      	ldr	r2, [r7, #28]
 80025b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80025c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	3304      	adds	r3, #4
 80025d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	78db      	ldrb	r3, [r3, #3]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d108      	bne.n	80025f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2200      	movs	r2, #0
 80025e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	4619      	mov	r1, r3
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f005 fdba 	bl	8008164 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025fc:	461a      	mov	r2, r3
 80025fe:	2302      	movs	r3, #2
 8002600:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002618:	461a      	mov	r2, r3
 800261a:	2320      	movs	r3, #32
 800261c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d009      	beq.n	800263c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002634:	461a      	mov	r2, r3
 8002636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800263a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	3301      	adds	r3, #1
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	2b00      	cmp	r3, #0
 800264c:	f47f af62 	bne.w	8002514 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f003 f917 	bl	8005888 <USB_ReadInterrupts>
 800265a:	4603      	mov	r3, r0
 800265c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002660:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002664:	f040 80db 	bne.w	800281e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f003 f938 	bl	80058e2 <USB_ReadDevAllInEpInterrupt>
 8002672:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002678:	e0cd      	b.n	8002816 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80c2 	beq.w	800280a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f003 f95e 	bl	8005952 <USB_ReadDevInEPInterrupt>
 8002696:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d057      	beq.n	8002752 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	2201      	movs	r2, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69f9      	ldr	r1, [r7, #28]
 80026be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026c2:	4013      	ands	r3, r2
 80026c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026d2:	461a      	mov	r2, r3
 80026d4:	2301      	movs	r3, #1
 80026d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d132      	bne.n	8002746 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	334c      	adds	r3, #76	; 0x4c
 80026f0:	6819      	ldr	r1, [r3, #0]
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4403      	add	r3, r0
 8002700:	3348      	adds	r3, #72	; 0x48
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4419      	add	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4403      	add	r3, r0
 8002714:	334c      	adds	r3, #76	; 0x4c
 8002716:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	2b00      	cmp	r3, #0
 800271c:	d113      	bne.n	8002746 <HAL_PCD_IRQHandler+0x3a2>
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	3354      	adds	r3, #84	; 0x54
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d108      	bne.n	8002746 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800273e:	461a      	mov	r2, r3
 8002740:	2101      	movs	r1, #1
 8002742:	f003 f965 	bl	8005a10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	b2db      	uxtb	r3, r3
 800274a:	4619      	mov	r1, r3
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f005 fc84 	bl	800805a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	4413      	add	r3, r2
 8002764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002768:	461a      	mov	r2, r3
 800276a:	2308      	movs	r3, #8
 800276c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002784:	461a      	mov	r2, r3
 8002786:	2310      	movs	r3, #16
 8002788:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	4413      	add	r3, r2
 800279c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a0:	461a      	mov	r2, r3
 80027a2:	2340      	movs	r3, #64	; 0x40
 80027a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d023      	beq.n	80027f8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80027b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b2:	6a38      	ldr	r0, [r7, #32]
 80027b4:	f002 f846 	bl	8004844 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80027b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	3338      	adds	r3, #56	; 0x38
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	3304      	adds	r3, #4
 80027ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	78db      	ldrb	r3, [r3, #3]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d108      	bne.n	80027e6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2200      	movs	r2, #0
 80027d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	4619      	mov	r1, r3
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f005 fcd1 	bl	8008188 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f2:	461a      	mov	r2, r3
 80027f4:	2302      	movs	r3, #2
 80027f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fcdb 	bl	80031c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	3301      	adds	r3, #1
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	2b00      	cmp	r3, #0
 800281a:	f47f af2e 	bne.w	800267a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f003 f830 	bl	8005888 <USB_ReadInterrupts>
 8002828:	4603      	mov	r3, r0
 800282a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800282e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002832:	d122      	bne.n	800287a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800284e:	2b01      	cmp	r3, #1
 8002850:	d108      	bne.n	8002864 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800285a:	2100      	movs	r1, #0
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fec3 	bl	80035e8 <HAL_PCDEx_LPM_Callback>
 8002862:	e002      	b.n	800286a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f005 fc6f 	bl	8008148 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f003 f802 	bl	8005888 <USB_ReadInterrupts>
 8002884:	4603      	mov	r3, r0
 8002886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800288e:	d112      	bne.n	80028b6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d102      	bne.n	80028a6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f005 fc2b 	bl	80080fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028b4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f002 ffe4 	bl	8005888 <USB_ReadInterrupts>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ca:	f040 80b7 	bne.w	8002a3c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2110      	movs	r1, #16
 80028e8:	4618      	mov	r0, r3
 80028ea:	f001 ffab 	bl	8004844 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f2:	e046      	b.n	8002982 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002900:	461a      	mov	r2, r3
 8002902:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002906:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	4413      	add	r3, r2
 8002910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002918:	0151      	lsls	r1, r2, #5
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	440a      	add	r2, r1
 800291e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002922:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002926:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	4413      	add	r3, r2
 8002930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002934:	461a      	mov	r2, r3
 8002936:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800293a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800293c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4413      	add	r3, r2
 8002944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800294c:	0151      	lsls	r1, r2, #5
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	440a      	add	r2, r1
 8002952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002956:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800295a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	4413      	add	r3, r2
 8002964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800296c:	0151      	lsls	r1, r2, #5
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	440a      	add	r2, r1
 8002972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002976:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800297a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	3301      	adds	r3, #1
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002988:	429a      	cmp	r2, r3
 800298a:	d3b3      	bcc.n	80028f4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800299a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800299e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d016      	beq.n	80029d6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029b8:	f043 030b 	orr.w	r3, r3, #11
 80029bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ce:	f043 030b 	orr.w	r3, r3, #11
 80029d2:	6453      	str	r3, [r2, #68]	; 0x44
 80029d4:	e015      	b.n	8002a02 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029e8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80029ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029fc:	f043 030b 	orr.w	r3, r3, #11
 8002a00:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a14:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a26:	461a      	mov	r2, r3
 8002a28:	f002 fff2 	bl	8005a10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 ff21 	bl	8005888 <USB_ReadInterrupts>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a50:	d124      	bne.n	8002a9c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f002 ffb7 	bl	80059ca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 ff6c 	bl	800493e <USB_GetDevSpeed>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681c      	ldr	r4, [r3, #0]
 8002a72:	f001 fa29 	bl	8003ec8 <HAL_RCC_GetHCLKFreq>
 8002a76:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4620      	mov	r0, r4
 8002a82:	f001 fc6b 	bl	800435c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f005 fb0f 	bl	80080aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f002 fef1 	bl	8005888 <USB_ReadInterrupts>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d10a      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f005 faec 	bl	800808e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f002 0208 	and.w	r2, r2, #8
 8002ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f002 fedc 	bl	8005888 <USB_ReadInterrupts>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	2b80      	cmp	r3, #128	; 0x80
 8002ad8:	d122      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	e014      	b.n	8002b16 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d105      	bne.n	8002b10 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fb27 	bl	800315e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	3301      	adds	r3, #1
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d3e5      	bcc.n	8002aec <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 feaf 	bl	8005888 <USB_ReadInterrupts>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b34:	d13b      	bne.n	8002bae <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b36:	2301      	movs	r3, #1
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3a:	e02b      	b.n	8002b94 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	3340      	adds	r3, #64	; 0x40
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d115      	bne.n	8002b8e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	da12      	bge.n	8002b8e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	333f      	adds	r3, #63	; 0x3f
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	4619      	mov	r1, r3
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 fae8 	bl	800315e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	3301      	adds	r3, #1
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d3ce      	bcc.n	8002b3c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f002 fe68 	bl	8005888 <USB_ReadInterrupts>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bc2:	d155      	bne.n	8002c70 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc8:	e045      	b.n	8002c56 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d12e      	bne.n	8002c50 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bf2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	da2b      	bge.n	8002c50 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002c04:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d121      	bne.n	8002c50 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c4c:	6053      	str	r3, [r2, #4]
            break;
 8002c4e:	e007      	b.n	8002c60 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	3301      	adds	r3, #1
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d3b4      	bcc.n	8002bca <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f002 fe07 	bl	8005888 <USB_ReadInterrupts>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d10a      	bne.n	8002c9c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f005 fa90 	bl	80081ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f002 fdf1 	bl	8005888 <USB_ReadInterrupts>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d115      	bne.n	8002cdc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f005 fa80 	bl	80081c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	e000      	b.n	8002cdc <HAL_PCD_IRQHandler+0x938>
      return;
 8002cda:	bf00      	nop
    }
  }
}
 8002cdc:	3734      	adds	r7, #52	; 0x34
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd90      	pop	{r4, r7, pc}

08002ce2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	460b      	mov	r3, r1
 8002cec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_PCD_SetAddress+0x1a>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e013      	b.n	8002d24 <HAL_PCD_SetAddress+0x42>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f002 fd4f 	bl	80057b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	70fb      	strb	r3, [r7, #3]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	803b      	strh	r3, [r7, #0]
 8002d42:	4613      	mov	r3, r2
 8002d44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	da0f      	bge.n	8002d72 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	f003 020f 	and.w	r2, r3, #15
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	3338      	adds	r3, #56	; 0x38
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	3304      	adds	r3, #4
 8002d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	705a      	strb	r2, [r3, #1]
 8002d70:	e00f      	b.n	8002d92 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	f003 020f 	and.w	r2, r3, #15
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	4413      	add	r3, r2
 8002d88:	3304      	adds	r3, #4
 8002d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d9e:	883a      	ldrh	r2, [r7, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	78ba      	ldrb	r2, [r7, #2]
 8002da8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	785b      	ldrb	r3, [r3, #1]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d004      	beq.n	8002dbc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002dbc:	78bb      	ldrb	r3, [r7, #2]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d102      	bne.n	8002dc8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_PCD_EP_Open+0xaa>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e00e      	b.n	8002df4 <HAL_PCD_EP_Open+0xc8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68f9      	ldr	r1, [r7, #12]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f001 fdcf 	bl	8004988 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002df2:	7afb      	ldrb	r3, [r7, #11]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	da0f      	bge.n	8002e30 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	f003 020f 	and.w	r2, r3, #15
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	3338      	adds	r3, #56	; 0x38
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	4413      	add	r3, r2
 8002e24:	3304      	adds	r3, #4
 8002e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	705a      	strb	r2, [r3, #1]
 8002e2e:	e00f      	b.n	8002e50 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	3304      	adds	r3, #4
 8002e48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_PCD_EP_Close+0x6e>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e00e      	b.n	8002e88 <HAL_PCD_EP_Close+0x8c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68f9      	ldr	r1, [r7, #12]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f001 fe0d 	bl	8004a98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea0:	7afb      	ldrb	r3, [r7, #11]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed2:	7afb      	ldrb	r3, [r7, #11]
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d102      	bne.n	8002eec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eec:	7afb      	ldrb	r3, [r7, #11]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	6979      	ldr	r1, [r7, #20]
 8002f04:	f002 f8ec 	bl	80050e0 <USB_EP0StartXfer>
 8002f08:	e008      	b.n	8002f1c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	6979      	ldr	r1, [r7, #20]
 8002f18:	f001 fe9a 	bl	8004c50 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f003 020f 	and.w	r2, r3, #15
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002f48:	681b      	ldr	r3, [r3, #0]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	460b      	mov	r3, r1
 8002f64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f66:	7afb      	ldrb	r3, [r7, #11]
 8002f68:	f003 020f 	and.w	r2, r3, #15
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	3338      	adds	r3, #56	; 0x38
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2201      	movs	r2, #1
 8002f94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f96:	7afb      	ldrb	r3, [r7, #11]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d102      	bne.n	8002fb0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fb0:	7afb      	ldrb	r3, [r7, #11]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	6979      	ldr	r1, [r7, #20]
 8002fc8:	f002 f88a 	bl	80050e0 <USB_EP0StartXfer>
 8002fcc:	e008      	b.n	8002fe0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6979      	ldr	r1, [r7, #20]
 8002fdc:	f001 fe38 	bl	8004c50 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	f003 020f 	and.w	r2, r3, #15
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	429a      	cmp	r2, r3
 8003002:	d901      	bls.n	8003008 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e050      	b.n	80030aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800300c:	2b00      	cmp	r3, #0
 800300e:	da0f      	bge.n	8003030 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	f003 020f 	and.w	r2, r3, #15
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	3338      	adds	r3, #56	; 0x38
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	3304      	adds	r3, #4
 8003026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	705a      	strb	r2, [r3, #1]
 800302e:	e00d      	b.n	800304c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	3304      	adds	r3, #4
 8003044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	b2da      	uxtb	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_PCD_EP_SetStall+0x82>
 8003068:	2302      	movs	r3, #2
 800306a:	e01e      	b.n	80030aa <HAL_PCD_EP_SetStall+0xc0>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68f9      	ldr	r1, [r7, #12]
 800307a:	4618      	mov	r0, r3
 800307c:	f002 fac8 	bl	8005610 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	b2d9      	uxtb	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800309a:	461a      	mov	r2, r3
 800309c:	f002 fcb8 	bl	8005a10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	460b      	mov	r3, r1
 80030bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	f003 020f 	and.w	r2, r3, #15
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d901      	bls.n	80030d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e042      	b.n	8003156 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	da0f      	bge.n	80030f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	f003 020f 	and.w	r2, r3, #15
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	3338      	adds	r3, #56	; 0x38
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	3304      	adds	r3, #4
 80030ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	705a      	strb	r2, [r3, #1]
 80030f6:	e00f      	b.n	8003118 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	f003 020f 	and.w	r2, r3, #15
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	3304      	adds	r3, #4
 8003110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	b2da      	uxtb	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_PCD_EP_ClrStall+0x86>
 8003134:	2302      	movs	r3, #2
 8003136:	e00e      	b.n	8003156 <HAL_PCD_EP_ClrStall+0xa4>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68f9      	ldr	r1, [r7, #12]
 8003146:	4618      	mov	r0, r3
 8003148:	f002 fad0 	bl	80056ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800316a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800316e:	2b00      	cmp	r3, #0
 8003170:	da0c      	bge.n	800318c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	f003 020f 	and.w	r2, r3, #15
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	3338      	adds	r3, #56	; 0x38
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	3304      	adds	r3, #4
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e00c      	b.n	80031a6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	f003 020f 	and.w	r2, r3, #15
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	3304      	adds	r3, #4
 80031a4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68f9      	ldr	r1, [r7, #12]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f002 f8ef 	bl	8005390 <USB_EPStopXfer>
 80031b2:	4603      	mov	r3, r0
 80031b4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80031b6:	7afb      	ldrb	r3, [r7, #11]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	; 0x28
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	3338      	adds	r3, #56	; 0x38
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	4413      	add	r3, r2
 80031e4:	3304      	adds	r3, #4
 80031e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a1a      	ldr	r2, [r3, #32]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d901      	bls.n	80031f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e06c      	b.n	80032d2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	429a      	cmp	r2, r3
 800320c:	d902      	bls.n	8003214 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	3303      	adds	r3, #3
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800321c:	e02b      	b.n	8003276 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	429a      	cmp	r2, r3
 8003232:	d902      	bls.n	800323a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3303      	adds	r3, #3
 800323e:	089b      	lsrs	r3, r3, #2
 8003240:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6919      	ldr	r1, [r3, #16]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003252:	b2db      	uxtb	r3, r3
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	4603      	mov	r3, r0
 8003258:	6978      	ldr	r0, [r7, #20]
 800325a:	f002 f943 	bl	80054e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	441a      	add	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a1a      	ldr	r2, [r3, #32]
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	441a      	add	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	b29b      	uxth	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	429a      	cmp	r2, r3
 800328a:	d809      	bhi.n	80032a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a1a      	ldr	r2, [r3, #32]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003294:	429a      	cmp	r2, r3
 8003296:	d203      	bcs.n	80032a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1be      	bne.n	800321e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	699a      	ldr	r2, [r3, #24]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d811      	bhi.n	80032d0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	2201      	movs	r2, #1
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	6939      	ldr	r1, [r7, #16]
 80032c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032cc:	4013      	ands	r3, r2
 80032ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	333c      	adds	r3, #60	; 0x3c
 80032f4:	3304      	adds	r3, #4
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	4413      	add	r3, r2
 8003302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d17b      	bne.n	800340a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d015      	beq.n	8003348 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	4a61      	ldr	r2, [pc, #388]	; (80034a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	f240 80b9 	bls.w	8003498 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80b3 	beq.w	8003498 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	4413      	add	r3, r2
 800333a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333e:	461a      	mov	r2, r3
 8003340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003344:	6093      	str	r3, [r2, #8]
 8003346:	e0a7      	b.n	8003498 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4413      	add	r3, r2
 800335a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335e:	461a      	mov	r2, r3
 8003360:	2320      	movs	r3, #32
 8003362:	6093      	str	r3, [r2, #8]
 8003364:	e098      	b.n	8003498 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	f040 8093 	bne.w	8003498 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	4a4b      	ldr	r2, [pc, #300]	; (80034a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d90f      	bls.n	800339a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003390:	461a      	mov	r2, r3
 8003392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003396:	6093      	str	r3, [r2, #8]
 8003398:	e07e      	b.n	8003498 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	4413      	add	r3, r2
 80033ac:	3304      	adds	r3, #4
 80033ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	0159      	lsls	r1, r3, #5
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	440b      	add	r3, r1
 80033bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c6:	1ad2      	subs	r2, r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d114      	bne.n	80033fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033e4:	461a      	mov	r2, r3
 80033e6:	2101      	movs	r1, #1
 80033e8:	f002 fb12 	bl	8005a10 <USB_EP0_OutStart>
 80033ec:	e006      	b.n	80033fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	441a      	add	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	4619      	mov	r1, r3
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f004 fe0e 	bl	8008024 <HAL_PCD_DataOutStageCallback>
 8003408:	e046      	b.n	8003498 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	4a26      	ldr	r2, [pc, #152]	; (80034a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d124      	bne.n	800345c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003428:	461a      	mov	r2, r3
 800342a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342e:	6093      	str	r3, [r2, #8]
 8003430:	e032      	b.n	8003498 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	4413      	add	r3, r2
 8003444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003448:	461a      	mov	r2, r3
 800344a:	2320      	movs	r3, #32
 800344c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f004 fde5 	bl	8008024 <HAL_PCD_DataOutStageCallback>
 800345a:	e01d      	b.n	8003498 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d114      	bne.n	800348c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d108      	bne.n	800348c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003484:	461a      	mov	r2, r3
 8003486:	2100      	movs	r1, #0
 8003488:	f002 fac2 	bl	8005a10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	4619      	mov	r1, r3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f004 fdc6 	bl	8008024 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	4f54300a 	.word	0x4f54300a
 80034a8:	4f54310a 	.word	0x4f54310a

080034ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	333c      	adds	r3, #60	; 0x3c
 80034c4:	3304      	adds	r3, #4
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a15      	ldr	r2, [pc, #84]	; (8003534 <PCD_EP_OutSetupPacket_int+0x88>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d90e      	bls.n	8003500 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d009      	beq.n	8003500 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f8:	461a      	mov	r2, r3
 80034fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f004 fd7d 	bl	8008000 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <PCD_EP_OutSetupPacket_int+0x88>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d90c      	bls.n	8003528 <PCD_EP_OutSetupPacket_int+0x7c>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d108      	bne.n	8003528 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003520:	461a      	mov	r2, r3
 8003522:	2101      	movs	r1, #1
 8003524:	f002 fa74 	bl	8005a10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	4f54300a 	.word	0x4f54300a

08003538 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	70fb      	strb	r3, [r7, #3]
 8003544:	4613      	mov	r3, r2
 8003546:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d107      	bne.n	8003566 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003556:	883b      	ldrh	r3, [r7, #0]
 8003558:	0419      	lsls	r1, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	430a      	orrs	r2, r1
 8003562:	629a      	str	r2, [r3, #40]	; 0x28
 8003564:	e028      	b.n	80035b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	4413      	add	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003574:	2300      	movs	r3, #0
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	e00d      	b.n	8003596 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	3340      	adds	r3, #64	; 0x40
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	0c1b      	lsrs	r3, r3, #16
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	4413      	add	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	3301      	adds	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	3b01      	subs	r3, #1
 800359c:	429a      	cmp	r2, r3
 800359e:	d3ec      	bcc.n	800357a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035a0:	883b      	ldrh	r3, [r7, #0]
 80035a2:	0418      	lsls	r0, r3, #16
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6819      	ldr	r1, [r3, #0]
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	4302      	orrs	r2, r0
 80035b0:	3340      	adds	r3, #64	; 0x40
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	460b      	mov	r3, r1
 80035d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e267      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d075      	beq.n	800370a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800361e:	4b88      	ldr	r3, [pc, #544]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	2b04      	cmp	r3, #4
 8003628:	d00c      	beq.n	8003644 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800362a:	4b85      	ldr	r3, [pc, #532]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003632:	2b08      	cmp	r3, #8
 8003634:	d112      	bne.n	800365c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003636:	4b82      	ldr	r3, [pc, #520]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003642:	d10b      	bne.n	800365c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003644:	4b7e      	ldr	r3, [pc, #504]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d05b      	beq.n	8003708 <HAL_RCC_OscConfig+0x108>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d157      	bne.n	8003708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e242      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003664:	d106      	bne.n	8003674 <HAL_RCC_OscConfig+0x74>
 8003666:	4b76      	ldr	r3, [pc, #472]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a75      	ldr	r2, [pc, #468]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 800366c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	e01d      	b.n	80036b0 <HAL_RCC_OscConfig+0xb0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x98>
 800367e:	4b70      	ldr	r3, [pc, #448]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a6f      	ldr	r2, [pc, #444]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b6d      	ldr	r3, [pc, #436]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a6c      	ldr	r2, [pc, #432]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e00b      	b.n	80036b0 <HAL_RCC_OscConfig+0xb0>
 8003698:	4b69      	ldr	r3, [pc, #420]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a68      	ldr	r2, [pc, #416]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 800369e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4b66      	ldr	r3, [pc, #408]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a65      	ldr	r2, [pc, #404]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 80036aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d013      	beq.n	80036e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fd fc12 	bl	8000ee0 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c0:	f7fd fc0e 	bl	8000ee0 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	; 0x64
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e207      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	4b5b      	ldr	r3, [pc, #364]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0xc0>
 80036de:	e014      	b.n	800370a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fd fbfe 	bl	8000ee0 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e8:	f7fd fbfa 	bl	8000ee0 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b64      	cmp	r3, #100	; 0x64
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e1f3      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fa:	4b51      	ldr	r3, [pc, #324]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0xe8>
 8003706:	e000      	b.n	800370a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d063      	beq.n	80037de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003716:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800372a:	2b08      	cmp	r3, #8
 800372c:	d11c      	bne.n	8003768 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800372e:	4b44      	ldr	r3, [pc, #272]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d116      	bne.n	8003768 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <HAL_RCC_OscConfig+0x152>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d001      	beq.n	8003752 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e1c7      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003752:	4b3b      	ldr	r3, [pc, #236]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4937      	ldr	r1, [pc, #220]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003766:	e03a      	b.n	80037de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d020      	beq.n	80037b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003770:	4b34      	ldr	r3, [pc, #208]	; (8003844 <HAL_RCC_OscConfig+0x244>)
 8003772:	2201      	movs	r2, #1
 8003774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003776:	f7fd fbb3 	bl	8000ee0 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800377e:	f7fd fbaf 	bl	8000ee0 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e1a8      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003790:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379c:	4b28      	ldr	r3, [pc, #160]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4925      	ldr	r1, [pc, #148]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	600b      	str	r3, [r1, #0]
 80037b0:	e015      	b.n	80037de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b2:	4b24      	ldr	r3, [pc, #144]	; (8003844 <HAL_RCC_OscConfig+0x244>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fd fb92 	bl	8000ee0 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c0:	f7fd fb8e 	bl	8000ee0 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e187      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d2:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d036      	beq.n	8003858 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d016      	beq.n	8003820 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <HAL_RCC_OscConfig+0x248>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f8:	f7fd fb72 	bl	8000ee0 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003800:	f7fd fb6e 	bl	8000ee0 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e167      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003812:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x200>
 800381e:	e01b      	b.n	8003858 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003820:	4b09      	ldr	r3, [pc, #36]	; (8003848 <HAL_RCC_OscConfig+0x248>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003826:	f7fd fb5b 	bl	8000ee0 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382c:	e00e      	b.n	800384c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800382e:	f7fd fb57 	bl	8000ee0 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d907      	bls.n	800384c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e150      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
 8003840:	40023800 	.word	0x40023800
 8003844:	42470000 	.word	0x42470000
 8003848:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800384c:	4b88      	ldr	r3, [pc, #544]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800384e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ea      	bne.n	800382e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8097 	beq.w	8003994 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003866:	2300      	movs	r3, #0
 8003868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386a:	4b81      	ldr	r3, [pc, #516]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10f      	bne.n	8003896 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	4b7d      	ldr	r3, [pc, #500]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	4a7c      	ldr	r2, [pc, #496]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003884:	6413      	str	r3, [r2, #64]	; 0x40
 8003886:	4b7a      	ldr	r3, [pc, #488]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003892:	2301      	movs	r3, #1
 8003894:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003896:	4b77      	ldr	r3, [pc, #476]	; (8003a74 <HAL_RCC_OscConfig+0x474>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d118      	bne.n	80038d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a2:	4b74      	ldr	r3, [pc, #464]	; (8003a74 <HAL_RCC_OscConfig+0x474>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a73      	ldr	r2, [pc, #460]	; (8003a74 <HAL_RCC_OscConfig+0x474>)
 80038a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ae:	f7fd fb17 	bl	8000ee0 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b6:	f7fd fb13 	bl	8000ee0 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e10c      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c8:	4b6a      	ldr	r3, [pc, #424]	; (8003a74 <HAL_RCC_OscConfig+0x474>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d106      	bne.n	80038ea <HAL_RCC_OscConfig+0x2ea>
 80038dc:	4b64      	ldr	r3, [pc, #400]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	4a63      	ldr	r2, [pc, #396]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	6713      	str	r3, [r2, #112]	; 0x70
 80038e8:	e01c      	b.n	8003924 <HAL_RCC_OscConfig+0x324>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b05      	cmp	r3, #5
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0x30c>
 80038f2:	4b5f      	ldr	r3, [pc, #380]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a5e      	ldr	r2, [pc, #376]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 80038f8:	f043 0304 	orr.w	r3, r3, #4
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
 80038fe:	4b5c      	ldr	r3, [pc, #368]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	4a5b      	ldr	r2, [pc, #364]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	6713      	str	r3, [r2, #112]	; 0x70
 800390a:	e00b      	b.n	8003924 <HAL_RCC_OscConfig+0x324>
 800390c:	4b58      	ldr	r3, [pc, #352]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800390e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003910:	4a57      	ldr	r2, [pc, #348]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003912:	f023 0301 	bic.w	r3, r3, #1
 8003916:	6713      	str	r3, [r2, #112]	; 0x70
 8003918:	4b55      	ldr	r3, [pc, #340]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	4a54      	ldr	r2, [pc, #336]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800391e:	f023 0304 	bic.w	r3, r3, #4
 8003922:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d015      	beq.n	8003958 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392c:	f7fd fad8 	bl	8000ee0 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003932:	e00a      	b.n	800394a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003934:	f7fd fad4 	bl	8000ee0 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003942:	4293      	cmp	r3, r2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e0cb      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394a:	4b49      	ldr	r3, [pc, #292]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0ee      	beq.n	8003934 <HAL_RCC_OscConfig+0x334>
 8003956:	e014      	b.n	8003982 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003958:	f7fd fac2 	bl	8000ee0 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395e:	e00a      	b.n	8003976 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003960:	f7fd fabe 	bl	8000ee0 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e0b5      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003976:	4b3e      	ldr	r3, [pc, #248]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1ee      	bne.n	8003960 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003982:	7dfb      	ldrb	r3, [r7, #23]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d105      	bne.n	8003994 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003988:	4b39      	ldr	r3, [pc, #228]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	4a38      	ldr	r2, [pc, #224]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800398e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003992:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80a1 	beq.w	8003ae0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800399e:	4b34      	ldr	r3, [pc, #208]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d05c      	beq.n	8003a64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d141      	bne.n	8003a36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b2:	4b31      	ldr	r3, [pc, #196]	; (8003a78 <HAL_RCC_OscConfig+0x478>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fd fa92 	bl	8000ee0 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fd fa8e 	bl	8000ee0 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e087      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d2:	4b27      	ldr	r3, [pc, #156]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69da      	ldr	r2, [r3, #28]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	019b      	lsls	r3, r3, #6
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	085b      	lsrs	r3, r3, #1
 80039f6:	3b01      	subs	r3, #1
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	061b      	lsls	r3, r3, #24
 8003a02:	491b      	ldr	r1, [pc, #108]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a08:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <HAL_RCC_OscConfig+0x478>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0e:	f7fd fa67 	bl	8000ee0 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a16:	f7fd fa63 	bl	8000ee0 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e05c      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a28:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x416>
 8003a34:	e054      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a36:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <HAL_RCC_OscConfig+0x478>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fd fa50 	bl	8000ee0 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a44:	f7fd fa4c 	bl	8000ee0 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e045      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0x444>
 8003a62:	e03d      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d107      	bne.n	8003a7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e038      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40007000 	.word	0x40007000
 8003a78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <HAL_RCC_OscConfig+0x4ec>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d028      	beq.n	8003adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d121      	bne.n	8003adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d11a      	bne.n	8003adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003aac:	4013      	ands	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ab2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d111      	bne.n	8003adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	085b      	lsrs	r3, r3, #1
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d107      	bne.n	8003adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800

08003af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0cc      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b04:	4b68      	ldr	r3, [pc, #416]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d90c      	bls.n	8003b2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b12:	4b65      	ldr	r3, [pc, #404]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	4b63      	ldr	r3, [pc, #396]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0b8      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d020      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b44:	4b59      	ldr	r3, [pc, #356]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4a58      	ldr	r2, [pc, #352]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b5c:	4b53      	ldr	r3, [pc, #332]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	4a52      	ldr	r2, [pc, #328]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b68:	4b50      	ldr	r3, [pc, #320]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	494d      	ldr	r1, [pc, #308]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d044      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d107      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	4b47      	ldr	r3, [pc, #284]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d119      	bne.n	8003bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e07f      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d003      	beq.n	8003bae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d107      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bae:	4b3f      	ldr	r3, [pc, #252]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e06f      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbe:	4b3b      	ldr	r3, [pc, #236]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e067      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bce:	4b37      	ldr	r3, [pc, #220]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f023 0203 	bic.w	r2, r3, #3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4934      	ldr	r1, [pc, #208]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be0:	f7fd f97e 	bl	8000ee0 <HAL_GetTick>
 8003be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be6:	e00a      	b.n	8003bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be8:	f7fd f97a 	bl	8000ee0 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e04f      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfe:	4b2b      	ldr	r3, [pc, #172]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 020c 	and.w	r2, r3, #12
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d1eb      	bne.n	8003be8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c10:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d20c      	bcs.n	8003c38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1e:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e032      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c44:	4b19      	ldr	r3, [pc, #100]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4916      	ldr	r1, [pc, #88]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	490e      	ldr	r1, [pc, #56]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c76:	f000 f821 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	490a      	ldr	r1, [pc, #40]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c88:	5ccb      	ldrb	r3, [r1, r3]
 8003c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8e:	4a09      	ldr	r2, [pc, #36]	; (8003cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c92:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd f8de 	bl	8000e58 <HAL_InitTick>

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40023c00 	.word	0x40023c00
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	0800bc40 	.word	0x0800bc40
 8003cb4:	20000000 	.word	0x20000000
 8003cb8:	20000004 	.word	0x20000004

08003cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc0:	b094      	sub	sp, #80	; 0x50
 8003cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc8:	2300      	movs	r3, #0
 8003cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ccc:	2300      	movs	r3, #0
 8003cce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cd4:	4b79      	ldr	r3, [pc, #484]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d00d      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x40>
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	f200 80e1 	bhi.w	8003ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d003      	beq.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cee:	e0db      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cf0:	4b73      	ldr	r3, [pc, #460]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cf2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cf4:	e0db      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cf6:	4b73      	ldr	r3, [pc, #460]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cfa:	e0d8      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cfc:	4b6f      	ldr	r3, [pc, #444]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d06:	4b6d      	ldr	r3, [pc, #436]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d063      	beq.n	8003dda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d12:	4b6a      	ldr	r3, [pc, #424]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	099b      	lsrs	r3, r3, #6
 8003d18:	2200      	movs	r2, #0
 8003d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d24:	633b      	str	r3, [r7, #48]	; 0x30
 8003d26:	2300      	movs	r3, #0
 8003d28:	637b      	str	r3, [r7, #52]	; 0x34
 8003d2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d2e:	4622      	mov	r2, r4
 8003d30:	462b      	mov	r3, r5
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f04f 0100 	mov.w	r1, #0
 8003d3a:	0159      	lsls	r1, r3, #5
 8003d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d40:	0150      	lsls	r0, r2, #5
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4621      	mov	r1, r4
 8003d48:	1a51      	subs	r1, r2, r1
 8003d4a:	6139      	str	r1, [r7, #16]
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d60:	4659      	mov	r1, fp
 8003d62:	018b      	lsls	r3, r1, #6
 8003d64:	4651      	mov	r1, sl
 8003d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d6a:	4651      	mov	r1, sl
 8003d6c:	018a      	lsls	r2, r1, #6
 8003d6e:	4651      	mov	r1, sl
 8003d70:	ebb2 0801 	subs.w	r8, r2, r1
 8003d74:	4659      	mov	r1, fp
 8003d76:	eb63 0901 	sbc.w	r9, r3, r1
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d8e:	4690      	mov	r8, r2
 8003d90:	4699      	mov	r9, r3
 8003d92:	4623      	mov	r3, r4
 8003d94:	eb18 0303 	adds.w	r3, r8, r3
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	462b      	mov	r3, r5
 8003d9c:	eb49 0303 	adc.w	r3, r9, r3
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dae:	4629      	mov	r1, r5
 8003db0:	024b      	lsls	r3, r1, #9
 8003db2:	4621      	mov	r1, r4
 8003db4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003db8:	4621      	mov	r1, r4
 8003dba:	024a      	lsls	r2, r1, #9
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dcc:	f7fc fa50 	bl	8000270 <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd8:	e058      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dda:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	099b      	lsrs	r3, r3, #6
 8003de0:	2200      	movs	r2, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	4611      	mov	r1, r2
 8003de6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dea:	623b      	str	r3, [r7, #32]
 8003dec:	2300      	movs	r3, #0
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
 8003df0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003df4:	4642      	mov	r2, r8
 8003df6:	464b      	mov	r3, r9
 8003df8:	f04f 0000 	mov.w	r0, #0
 8003dfc:	f04f 0100 	mov.w	r1, #0
 8003e00:	0159      	lsls	r1, r3, #5
 8003e02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e06:	0150      	lsls	r0, r2, #5
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e12:	4649      	mov	r1, r9
 8003e14:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e2c:	ebb2 040a 	subs.w	r4, r2, sl
 8003e30:	eb63 050b 	sbc.w	r5, r3, fp
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	00eb      	lsls	r3, r5, #3
 8003e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e42:	00e2      	lsls	r2, r4, #3
 8003e44:	4614      	mov	r4, r2
 8003e46:	461d      	mov	r5, r3
 8003e48:	4643      	mov	r3, r8
 8003e4a:	18e3      	adds	r3, r4, r3
 8003e4c:	603b      	str	r3, [r7, #0]
 8003e4e:	464b      	mov	r3, r9
 8003e50:	eb45 0303 	adc.w	r3, r5, r3
 8003e54:	607b      	str	r3, [r7, #4]
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	f04f 0300 	mov.w	r3, #0
 8003e5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e62:	4629      	mov	r1, r5
 8003e64:	028b      	lsls	r3, r1, #10
 8003e66:	4621      	mov	r1, r4
 8003e68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	028a      	lsls	r2, r1, #10
 8003e70:	4610      	mov	r0, r2
 8003e72:	4619      	mov	r1, r3
 8003e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e76:	2200      	movs	r2, #0
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	61fa      	str	r2, [r7, #28]
 8003e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e80:	f7fc f9f6 	bl	8000270 <__aeabi_uldivmod>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4613      	mov	r3, r2
 8003e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	3301      	adds	r3, #1
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ea6:	e002      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3750      	adds	r7, #80	; 0x50
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	00f42400 	.word	0x00f42400
 8003ec4:	007a1200 	.word	0x007a1200

08003ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ecc:	4b03      	ldr	r3, [pc, #12]	; (8003edc <HAL_RCC_GetHCLKFreq+0x14>)
 8003ece:	681b      	ldr	r3, [r3, #0]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	20000000 	.word	0x20000000

08003ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ee4:	f7ff fff0 	bl	8003ec8 <HAL_RCC_GetHCLKFreq>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	0a9b      	lsrs	r3, r3, #10
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	4903      	ldr	r1, [pc, #12]	; (8003f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef6:	5ccb      	ldrb	r3, [r1, r3]
 8003ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40023800 	.word	0x40023800
 8003f04:	0800bc50 	.word	0x0800bc50

08003f08 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d035      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f30:	4b62      	ldr	r3, [pc, #392]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f36:	f7fc ffd3 	bl	8000ee0 <HAL_GetTick>
 8003f3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f3e:	f7fc ffcf 	bl	8000ee0 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e0b0      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f50:	4b5b      	ldr	r3, [pc, #364]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f0      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	019a      	lsls	r2, r3, #6
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	071b      	lsls	r3, r3, #28
 8003f68:	4955      	ldr	r1, [pc, #340]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f70:	4b52      	ldr	r3, [pc, #328]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f76:	f7fc ffb3 	bl	8000ee0 <HAL_GetTick>
 8003f7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f7e:	f7fc ffaf 	bl	8000ee0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e090      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f90:	4b4b      	ldr	r3, [pc, #300]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8083 	beq.w	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	4b44      	ldr	r3, [pc, #272]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	4a43      	ldr	r2, [pc, #268]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fba:	4b41      	ldr	r3, [pc, #260]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003fc6:	4b3f      	ldr	r3, [pc, #252]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a3e      	ldr	r2, [pc, #248]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003fd2:	f7fc ff85 	bl	8000ee0 <HAL_GetTick>
 8003fd6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003fda:	f7fc ff81 	bl	8000ee0 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e062      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fec:	4b35      	ldr	r3, [pc, #212]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ff8:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004000:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d02f      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	429a      	cmp	r2, r3
 8004014:	d028      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004016:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004020:	4b29      	ldr	r3, [pc, #164]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004022:	2201      	movs	r2, #1
 8004024:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004026:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800402c:	4a24      	ldr	r2, [pc, #144]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004032:	4b23      	ldr	r3, [pc, #140]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b01      	cmp	r3, #1
 800403c:	d114      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800403e:	f7fc ff4f 	bl	8000ee0 <HAL_GetTick>
 8004042:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004044:	e00a      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fc ff4b 	bl	8000ee0 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	; 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e02a      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405c:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ee      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004074:	d10d      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408a:	490d      	ldr	r1, [pc, #52]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800408c:	4313      	orrs	r3, r2
 800408e:	608b      	str	r3, [r1, #8]
 8004090:	e005      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004092:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004098:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800409c:	6093      	str	r3, [r2, #8]
 800409e:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040aa:	4905      	ldr	r1, [pc, #20]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	42470068 	.word	0x42470068
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40007000 	.word	0x40007000
 80040c8:	42470e40 	.word	0x42470e40

080040cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d13e      	bne.n	8004168 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80040ea:	4b23      	ldr	r3, [pc, #140]	; (8004178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d12f      	bne.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004100:	4b1e      	ldr	r3, [pc, #120]	; (800417c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004102:	617b      	str	r3, [r7, #20]
          break;
 8004104:	e02f      	b.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004106:	4b1c      	ldr	r3, [pc, #112]	; (8004178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004112:	d108      	bne.n	8004126 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004114:	4b18      	ldr	r3, [pc, #96]	; (8004178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800411c:	4a18      	ldr	r2, [pc, #96]	; (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800411e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	e007      	b.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004126:	4b14      	ldr	r3, [pc, #80]	; (8004178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800412e:	4a15      	ldr	r2, [pc, #84]	; (8004184 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004130:	fbb2 f3f3 	udiv	r3, r2, r3
 8004134:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800413c:	099b      	lsrs	r3, r3, #6
 800413e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	fb02 f303 	mul.w	r3, r2, r3
 8004148:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800414c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004150:	0f1b      	lsrs	r3, r3, #28
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	fbb2 f3f3 	udiv	r3, r2, r3
 800415c:	617b      	str	r3, [r7, #20]
          break;
 800415e:	e002      	b.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
          break;
 8004164:	bf00      	nop
        }
      }
      break;
 8004166:	bf00      	nop
    }
  }
  return frequency;
 8004168:	697b      	ldr	r3, [r7, #20]
}
 800416a:	4618      	mov	r0, r3
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40023800 	.word	0x40023800
 800417c:	00bb8000 	.word	0x00bb8000
 8004180:	007a1200 	.word	0x007a1200
 8004184:	00f42400 	.word	0x00f42400

08004188 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e07b      	b.n	8004292 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d108      	bne.n	80041b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041aa:	d009      	beq.n	80041c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	61da      	str	r2, [r3, #28]
 80041b2:	e005      	b.n	80041c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fc fd2c 	bl	8000c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004244:	ea42 0103 	orr.w	r1, r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	f003 0104 	and.w	r1, r3, #4
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	f003 0210 	and.w	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004280:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800429a:	b084      	sub	sp, #16
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	f107 001c 	add.w	r0, r7, #28
 80042a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d122      	bne.n	80042f8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80042c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d105      	bne.n	80042ec <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f001 fbed 	bl	8005acc <USB_CoreReset>
 80042f2:	4603      	mov	r3, r0
 80042f4:	73fb      	strb	r3, [r7, #15]
 80042f6:	e01a      	b.n	800432e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f001 fbe1 	bl	8005acc <USB_CoreReset>
 800430a:	4603      	mov	r3, r0
 800430c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800430e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	639a      	str	r2, [r3, #56]	; 0x38
 8004320:	e005      	b.n	800432e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	2b01      	cmp	r3, #1
 8004332:	d10b      	bne.n	800434c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f043 0206 	orr.w	r2, r3, #6
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f043 0220 	orr.w	r2, r3, #32
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800434c:	7bfb      	ldrb	r3, [r7, #15]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004358:	b004      	add	sp, #16
 800435a:	4770      	bx	lr

0800435c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	4613      	mov	r3, r2
 8004368:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d165      	bne.n	800443c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4a41      	ldr	r2, [pc, #260]	; (8004478 <USB_SetTurnaroundTime+0x11c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d906      	bls.n	8004386 <USB_SetTurnaroundTime+0x2a>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4a40      	ldr	r2, [pc, #256]	; (800447c <USB_SetTurnaroundTime+0x120>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d202      	bcs.n	8004386 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004380:	230f      	movs	r3, #15
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	e062      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4a3c      	ldr	r2, [pc, #240]	; (800447c <USB_SetTurnaroundTime+0x120>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d306      	bcc.n	800439c <USB_SetTurnaroundTime+0x40>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4a3b      	ldr	r2, [pc, #236]	; (8004480 <USB_SetTurnaroundTime+0x124>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d202      	bcs.n	800439c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004396:	230e      	movs	r3, #14
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	e057      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4a38      	ldr	r2, [pc, #224]	; (8004480 <USB_SetTurnaroundTime+0x124>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d306      	bcc.n	80043b2 <USB_SetTurnaroundTime+0x56>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4a37      	ldr	r2, [pc, #220]	; (8004484 <USB_SetTurnaroundTime+0x128>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d202      	bcs.n	80043b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80043ac:	230d      	movs	r3, #13
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e04c      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4a33      	ldr	r2, [pc, #204]	; (8004484 <USB_SetTurnaroundTime+0x128>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d306      	bcc.n	80043c8 <USB_SetTurnaroundTime+0x6c>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4a32      	ldr	r2, [pc, #200]	; (8004488 <USB_SetTurnaroundTime+0x12c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d802      	bhi.n	80043c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80043c2:	230c      	movs	r3, #12
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e041      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4a2f      	ldr	r2, [pc, #188]	; (8004488 <USB_SetTurnaroundTime+0x12c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d906      	bls.n	80043de <USB_SetTurnaroundTime+0x82>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4a2e      	ldr	r2, [pc, #184]	; (800448c <USB_SetTurnaroundTime+0x130>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d802      	bhi.n	80043de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80043d8:	230b      	movs	r3, #11
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e036      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4a2a      	ldr	r2, [pc, #168]	; (800448c <USB_SetTurnaroundTime+0x130>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d906      	bls.n	80043f4 <USB_SetTurnaroundTime+0x98>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4a29      	ldr	r2, [pc, #164]	; (8004490 <USB_SetTurnaroundTime+0x134>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d802      	bhi.n	80043f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80043ee:	230a      	movs	r3, #10
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	e02b      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4a26      	ldr	r2, [pc, #152]	; (8004490 <USB_SetTurnaroundTime+0x134>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d906      	bls.n	800440a <USB_SetTurnaroundTime+0xae>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4a25      	ldr	r2, [pc, #148]	; (8004494 <USB_SetTurnaroundTime+0x138>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d202      	bcs.n	800440a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004404:	2309      	movs	r3, #9
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	e020      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	4a21      	ldr	r2, [pc, #132]	; (8004494 <USB_SetTurnaroundTime+0x138>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d306      	bcc.n	8004420 <USB_SetTurnaroundTime+0xc4>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	4a20      	ldr	r2, [pc, #128]	; (8004498 <USB_SetTurnaroundTime+0x13c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d802      	bhi.n	8004420 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800441a:	2308      	movs	r3, #8
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	e015      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <USB_SetTurnaroundTime+0x13c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d906      	bls.n	8004436 <USB_SetTurnaroundTime+0xda>
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4a1c      	ldr	r2, [pc, #112]	; (800449c <USB_SetTurnaroundTime+0x140>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d202      	bcs.n	8004436 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004430:	2307      	movs	r3, #7
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	e00a      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004436:	2306      	movs	r3, #6
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e007      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d102      	bne.n	8004448 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004442:	2309      	movs	r3, #9
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e001      	b.n	800444c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004448:	2309      	movs	r3, #9
 800444a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	029b      	lsls	r3, r3, #10
 8004460:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004464:	431a      	orrs	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	00d8acbf 	.word	0x00d8acbf
 800447c:	00e4e1c0 	.word	0x00e4e1c0
 8004480:	00f42400 	.word	0x00f42400
 8004484:	01067380 	.word	0x01067380
 8004488:	011a499f 	.word	0x011a499f
 800448c:	01312cff 	.word	0x01312cff
 8004490:	014ca43f 	.word	0x014ca43f
 8004494:	016e3600 	.word	0x016e3600
 8004498:	01a6ab1f 	.word	0x01a6ab1f
 800449c:	01e84800 	.word	0x01e84800

080044a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f043 0201 	orr.w	r2, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f023 0201 	bic.w	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d115      	bne.n	8004532 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004512:	2001      	movs	r0, #1
 8004514:	f7fc fcf0 	bl	8000ef8 <HAL_Delay>
      ms++;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3301      	adds	r3, #1
 800451c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f001 fa45 	bl	80059ae <USB_GetMode>
 8004524:	4603      	mov	r3, r0
 8004526:	2b01      	cmp	r3, #1
 8004528:	d01e      	beq.n	8004568 <USB_SetCurrentMode+0x84>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b31      	cmp	r3, #49	; 0x31
 800452e:	d9f0      	bls.n	8004512 <USB_SetCurrentMode+0x2e>
 8004530:	e01a      	b.n	8004568 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d115      	bne.n	8004564 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004544:	2001      	movs	r0, #1
 8004546:	f7fc fcd7 	bl	8000ef8 <HAL_Delay>
      ms++;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3301      	adds	r3, #1
 800454e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f001 fa2c 	bl	80059ae <USB_GetMode>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <USB_SetCurrentMode+0x84>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b31      	cmp	r3, #49	; 0x31
 8004560:	d9f0      	bls.n	8004544 <USB_SetCurrentMode+0x60>
 8004562:	e001      	b.n	8004568 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e005      	b.n	8004574 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b32      	cmp	r3, #50	; 0x32
 800456c:	d101      	bne.n	8004572 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800457c:	b084      	sub	sp, #16
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800458a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	e009      	b.n	80045b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	3340      	adds	r3, #64	; 0x40
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	2200      	movs	r2, #0
 80045a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	3301      	adds	r3, #1
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	2b0e      	cmp	r3, #14
 80045b4:	d9f2      	bls.n	800459c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d11c      	bne.n	80045f6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045ca:	f043 0302 	orr.w	r3, r3, #2
 80045ce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38
 80045f4:	e00b      	b.n	800460e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004614:	461a      	mov	r2, r3
 8004616:	2300      	movs	r3, #0
 8004618:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004620:	4619      	mov	r1, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004628:	461a      	mov	r2, r3
 800462a:	680b      	ldr	r3, [r1, #0]
 800462c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800462e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004630:	2b01      	cmp	r3, #1
 8004632:	d10c      	bne.n	800464e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d104      	bne.n	8004644 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800463a:	2100      	movs	r1, #0
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f965 	bl	800490c <USB_SetDevSpeed>
 8004642:	e008      	b.n	8004656 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004644:	2101      	movs	r1, #1
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f960 	bl	800490c <USB_SetDevSpeed>
 800464c:	e003      	b.n	8004656 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800464e:	2103      	movs	r1, #3
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f95b 	bl	800490c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004656:	2110      	movs	r1, #16
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f8f3 	bl	8004844 <USB_FlushTxFifo>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f91f 	bl	80048ac <USB_FlushRxFifo>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467e:	461a      	mov	r2, r3
 8004680:	2300      	movs	r3, #0
 8004682:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468a:	461a      	mov	r2, r3
 800468c:	2300      	movs	r3, #0
 800468e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004696:	461a      	mov	r2, r3
 8004698:	2300      	movs	r3, #0
 800469a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800469c:	2300      	movs	r3, #0
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	e043      	b.n	800472a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046b8:	d118      	bne.n	80046ec <USB_DevInit+0x170>
    {
      if (i == 0U)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046cc:	461a      	mov	r2, r3
 80046ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	e013      	b.n	80046fe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e2:	461a      	mov	r2, r3
 80046e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	e008      	b.n	80046fe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f8:	461a      	mov	r2, r3
 80046fa:	2300      	movs	r3, #0
 80046fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470a:	461a      	mov	r2, r3
 800470c:	2300      	movs	r3, #0
 800470e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471c:	461a      	mov	r2, r3
 800471e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004722:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	3301      	adds	r3, #1
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	429a      	cmp	r2, r3
 8004730:	d3b7      	bcc.n	80046a2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004732:	2300      	movs	r3, #0
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	e043      	b.n	80047c0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800474a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800474e:	d118      	bne.n	8004782 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004762:	461a      	mov	r2, r3
 8004764:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e013      	b.n	8004794 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004778:	461a      	mov	r2, r3
 800477a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	e008      	b.n	8004794 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478e:	461a      	mov	r2, r3
 8004790:	2300      	movs	r3, #0
 8004792:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a0:	461a      	mov	r2, r3
 80047a2:	2300      	movs	r3, #0
 80047a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b2:	461a      	mov	r2, r3
 80047b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	3301      	adds	r3, #1
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d3b7      	bcc.n	8004738 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d105      	bne.n	80047fc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	f043 0210 	orr.w	r2, r3, #16
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <USB_DevInit+0x2c4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f043 0208 	orr.w	r2, r3, #8
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800481a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481c:	2b01      	cmp	r3, #1
 800481e:	d107      	bne.n	8004830 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004830:	7dfb      	ldrb	r3, [r7, #23]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800483c:	b004      	add	sp, #16
 800483e:	4770      	bx	lr
 8004840:	803c3800 	.word	0x803c3800

08004844 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3301      	adds	r3, #1
 8004856:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4a13      	ldr	r2, [pc, #76]	; (80048a8 <USB_FlushTxFifo+0x64>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d901      	bls.n	8004864 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e01b      	b.n	800489c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	daf2      	bge.n	8004852 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	019b      	lsls	r3, r3, #6
 8004874:	f043 0220 	orr.w	r2, r3, #32
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3301      	adds	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4a08      	ldr	r2, [pc, #32]	; (80048a8 <USB_FlushTxFifo+0x64>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e006      	b.n	800489c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b20      	cmp	r3, #32
 8004898:	d0f0      	beq.n	800487c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	00030d40 	.word	0x00030d40

080048ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4a11      	ldr	r2, [pc, #68]	; (8004908 <USB_FlushRxFifo+0x5c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e018      	b.n	80048fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	daf2      	bge.n	80048b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2210      	movs	r2, #16
 80048da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3301      	adds	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4a08      	ldr	r2, [pc, #32]	; (8004908 <USB_FlushRxFifo+0x5c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e006      	b.n	80048fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b10      	cmp	r3, #16
 80048f8:	d0f0      	beq.n	80048dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	00030d40 	.word	0x00030d40

0800490c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	68f9      	ldr	r1, [r7, #12]
 8004928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800493e:	b480      	push	{r7}
 8004940:	b087      	sub	sp, #28
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0306 	and.w	r3, r3, #6
 8004956:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d102      	bne.n	8004964 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800495e:	2300      	movs	r3, #0
 8004960:	75fb      	strb	r3, [r7, #23]
 8004962:	e00a      	b.n	800497a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d002      	beq.n	8004970 <USB_GetDevSpeed+0x32>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b06      	cmp	r3, #6
 800496e:	d102      	bne.n	8004976 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004970:	2302      	movs	r3, #2
 8004972:	75fb      	strb	r3, [r7, #23]
 8004974:	e001      	b.n	800497a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004976:	230f      	movs	r3, #15
 8004978:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800497a:	7dfb      	ldrb	r3, [r7, #23]
}
 800497c:	4618      	mov	r0, r3
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	785b      	ldrb	r3, [r3, #1]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d13a      	bne.n	8004a1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049aa:	69da      	ldr	r2, [r3, #28]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	2101      	movs	r1, #1
 80049b6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	68f9      	ldr	r1, [r7, #12]
 80049be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049c2:	4313      	orrs	r3, r2
 80049c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d155      	bne.n	8004a88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	791b      	ldrb	r3, [r3, #4]
 80049f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	059b      	lsls	r3, r3, #22
 80049fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a00:	4313      	orrs	r3, r2
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	e036      	b.n	8004a88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a20:	69da      	ldr	r2, [r3, #28]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a30:	041b      	lsls	r3, r3, #16
 8004a32:	68f9      	ldr	r1, [r7, #12]
 8004a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d11a      	bne.n	8004a88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	791b      	ldrb	r3, [r3, #4]
 8004a6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a6e:	430b      	orrs	r3, r1
 8004a70:	4313      	orrs	r3, r2
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	0151      	lsls	r1, r2, #5
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	440a      	add	r2, r1
 8004a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d161      	bne.n	8004b78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aca:	d11f      	bne.n	8004b0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	0151      	lsls	r1, r2, #5
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	440a      	add	r2, r1
 8004ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004aea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	0151      	lsls	r1, r2, #5
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	440a      	add	r2, r1
 8004b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	43db      	mvns	r3, r3
 8004b26:	68f9      	ldr	r1, [r7, #12]
 8004b28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	2101      	movs	r1, #1
 8004b42:	fa01 f303 	lsl.w	r3, r1, r3
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	68f9      	ldr	r1, [r7, #12]
 8004b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b50:	4013      	ands	r3, r2
 8004b52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	0159      	lsls	r1, r3, #5
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	440b      	add	r3, r1
 8004b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4b35      	ldr	r3, [pc, #212]	; (8004c48 <USB_DeactivateEndpoint+0x1b0>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]
 8004b76:	e060      	b.n	8004c3a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b8e:	d11f      	bne.n	8004bd0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	0151      	lsls	r1, r2, #5
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	440a      	add	r2, r1
 8004ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004baa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	0151      	lsls	r1, r2, #5
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	2101      	movs	r1, #1
 8004be2:	fa01 f303 	lsl.w	r3, r1, r3
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	43db      	mvns	r3, r3
 8004bea:	68f9      	ldr	r1, [r7, #12]
 8004bec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	2101      	movs	r1, #1
 8004c06:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0a:	041b      	lsls	r3, r3, #16
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	68f9      	ldr	r1, [r7, #12]
 8004c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c14:	4013      	ands	r3, r2
 8004c16:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	0159      	lsls	r1, r3, #5
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	440b      	add	r3, r1
 8004c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c32:	4619      	mov	r1, r3
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <USB_DeactivateEndpoint+0x1b4>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	ec337800 	.word	0xec337800
 8004c4c:	eff37800 	.word	0xeff37800

08004c50 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	; 0x28
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	785b      	ldrb	r3, [r3, #1]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	f040 815c 	bne.w	8004f2a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d132      	bne.n	8004ce0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	0151      	lsls	r1, r2, #5
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	440a      	add	r2, r1
 8004cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd8:	0cdb      	lsrs	r3, r3, #19
 8004cda:	04db      	lsls	r3, r3, #19
 8004cdc:	6113      	str	r3, [r2, #16]
 8004cde:	e074      	b.n	8004dca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cfa:	0cdb      	lsrs	r3, r3, #19
 8004cfc:	04db      	lsls	r3, r3, #19
 8004cfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	0151      	lsls	r1, r2, #5
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	440a      	add	r2, r1
 8004d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d30:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	6999      	ldr	r1, [r3, #24]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	440b      	add	r3, r1
 8004d3c:	1e59      	subs	r1, r3, #1
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d46:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d48:	4b9d      	ldr	r3, [pc, #628]	; (8004fc0 <USB_EPStartXfer+0x370>)
 8004d4a:	400b      	ands	r3, r1
 8004d4c:	69b9      	ldr	r1, [r7, #24]
 8004d4e:	0148      	lsls	r0, r1, #5
 8004d50:	69f9      	ldr	r1, [r7, #28]
 8004d52:	4401      	add	r1, r0
 8004d54:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d72:	69b9      	ldr	r1, [r7, #24]
 8004d74:	0148      	lsls	r0, r1, #5
 8004d76:	69f9      	ldr	r1, [r7, #28]
 8004d78:	4401      	add	r1, r0
 8004d7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	791b      	ldrb	r3, [r3, #4]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d11f      	bne.n	8004dca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	0151      	lsls	r1, r2, #5
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	440a      	add	r2, r1
 8004da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004da8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	69fa      	ldr	r2, [r7, #28]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dc8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d14b      	bne.n	8004e68 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d009      	beq.n	8004dec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de4:	461a      	mov	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	791b      	ldrb	r3, [r3, #4]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d128      	bne.n	8004e46 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d110      	bne.n	8004e26 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	0151      	lsls	r1, r2, #5
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	440a      	add	r2, r1
 8004e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	e00f      	b.n	8004e46 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	0151      	lsls	r1, r2, #5
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	440a      	add	r2, r1
 8004e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e44:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	0151      	lsls	r1, r2, #5
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	440a      	add	r2, r1
 8004e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	e133      	b.n	80050d0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e86:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	791b      	ldrb	r3, [r3, #4]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d015      	beq.n	8004ebc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 811b 	beq.w	80050d0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	2101      	movs	r1, #1
 8004eac:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb0:	69f9      	ldr	r1, [r7, #28]
 8004eb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	634b      	str	r3, [r1, #52]	; 0x34
 8004eba:	e109      	b.n	80050d0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d110      	bne.n	8004eee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	0151      	lsls	r1, r2, #5
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	440a      	add	r2, r1
 8004ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	e00f      	b.n	8004f0e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	0151      	lsls	r1, r2, #5
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	440a      	add	r2, r1
 8004f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	6919      	ldr	r1, [r3, #16]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	b298      	uxth	r0, r3
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	4603      	mov	r3, r0
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fade 	bl	80054e4 <USB_WritePacket>
 8004f28:	e0d2      	b.n	80050d0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f44:	0cdb      	lsrs	r3, r3, #19
 8004f46:	04db      	lsls	r3, r3, #19
 8004f48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	0151      	lsls	r1, r2, #5
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	440a      	add	r2, r1
 8004f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f6c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d126      	bne.n	8004fc4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f8c:	69b9      	ldr	r1, [r7, #24]
 8004f8e:	0148      	lsls	r0, r1, #5
 8004f90:	69f9      	ldr	r1, [r7, #28]
 8004f92:	4401      	add	r1, r0
 8004f94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	0151      	lsls	r1, r2, #5
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	440a      	add	r2, r1
 8004fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fba:	6113      	str	r3, [r2, #16]
 8004fbc:	e03a      	b.n	8005034 <USB_EPStartXfer+0x3e4>
 8004fbe:	bf00      	nop
 8004fc0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	699a      	ldr	r2, [r3, #24]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	1e5a      	subs	r2, r3, #1
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	8afa      	ldrh	r2, [r7, #22]
 8004fe0:	fb03 f202 	mul.w	r2, r3, r2
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	8afb      	ldrh	r3, [r7, #22]
 8004ff8:	04d9      	lsls	r1, r3, #19
 8004ffa:	4b38      	ldr	r3, [pc, #224]	; (80050dc <USB_EPStartXfer+0x48c>)
 8004ffc:	400b      	ands	r3, r1
 8004ffe:	69b9      	ldr	r1, [r7, #24]
 8005000:	0148      	lsls	r0, r1, #5
 8005002:	69f9      	ldr	r1, [r7, #28]
 8005004:	4401      	add	r1, r0
 8005006:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800500a:	4313      	orrs	r3, r2
 800500c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005024:	69b9      	ldr	r1, [r7, #24]
 8005026:	0148      	lsls	r0, r1, #5
 8005028:	69f9      	ldr	r1, [r7, #28]
 800502a:	4401      	add	r1, r0
 800502c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005030:	4313      	orrs	r3, r2
 8005032:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d10d      	bne.n	8005056 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	6919      	ldr	r1, [r3, #16]
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005052:	460a      	mov	r2, r1
 8005054:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	791b      	ldrb	r3, [r3, #4]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d128      	bne.n	80050b0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506a:	2b00      	cmp	r3, #0
 800506c:	d110      	bne.n	8005090 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005088:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e00f      	b.n	80050b0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	1ff80000 	.word	0x1ff80000

080050e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	4613      	mov	r3, r2
 80050ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	785b      	ldrb	r3, [r3, #1]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	f040 80ce 	bne.w	800529e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d132      	bne.n	8005170 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005124:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005128:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800512c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	440a      	add	r2, r1
 8005144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005148:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800514c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	0151      	lsls	r1, r2, #5
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	440a      	add	r2, r1
 8005164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005168:	0cdb      	lsrs	r3, r3, #19
 800516a:	04db      	lsls	r3, r3, #19
 800516c:	6113      	str	r3, [r2, #16]
 800516e:	e04e      	b.n	800520e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518a:	0cdb      	lsrs	r3, r3, #19
 800518c:	04db      	lsls	r3, r3, #19
 800518e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	0151      	lsls	r1, r2, #5
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	440a      	add	r2, r1
 80051a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d903      	bls.n	80051c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	0151      	lsls	r1, r2, #5
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	440a      	add	r2, r1
 80051de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051fe:	6939      	ldr	r1, [r7, #16]
 8005200:	0148      	lsls	r0, r1, #5
 8005202:	6979      	ldr	r1, [r7, #20]
 8005204:	4401      	add	r1, r0
 8005206:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800520a:	4313      	orrs	r3, r2
 800520c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d11e      	bne.n	8005252 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d009      	beq.n	8005230 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005228:	461a      	mov	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	0151      	lsls	r1, r2, #5
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	440a      	add	r2, r1
 8005246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	e097      	b.n	8005382 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	0151      	lsls	r1, r2, #5
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	440a      	add	r2, r1
 8005268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800526c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005270:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 8083 	beq.w	8005382 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	2101      	movs	r1, #1
 800528e:	fa01 f303 	lsl.w	r3, r1, r3
 8005292:	6979      	ldr	r1, [r7, #20]
 8005294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005298:	4313      	orrs	r3, r2
 800529a:	634b      	str	r3, [r1, #52]	; 0x34
 800529c:	e071      	b.n	8005382 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	0151      	lsls	r1, r2, #5
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	440a      	add	r2, r1
 80052b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b8:	0cdb      	lsrs	r3, r3, #19
 80052ba:	04db      	lsls	r3, r3, #19
 80052bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005314:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005318:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005330:	6939      	ldr	r1, [r7, #16]
 8005332:	0148      	lsls	r0, r1, #5
 8005334:	6979      	ldr	r1, [r7, #20]
 8005336:	4401      	add	r1, r0
 8005338:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800533c:	4313      	orrs	r3, r2
 800533e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d10d      	bne.n	8005362 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6919      	ldr	r1, [r3, #16]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535e:	460a      	mov	r2, r1
 8005360:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	0151      	lsls	r1, r2, #5
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	440a      	add	r2, r1
 8005378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800537c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005380:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	785b      	ldrb	r3, [r3, #1]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d14a      	bne.n	8005444 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053c6:	f040 8086 	bne.w	80054d6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	7812      	ldrb	r2, [r2, #0]
 80053de:	0151      	lsls	r1, r2, #5
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	440a      	add	r2, r1
 80053e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	7812      	ldrb	r2, [r2, #0]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	440a      	add	r2, r1
 8005408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005410:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3301      	adds	r3, #1
 8005416:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f242 7210 	movw	r2, #10000	; 0x2710
 800541e:	4293      	cmp	r3, r2
 8005420:	d902      	bls.n	8005428 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	75fb      	strb	r3, [r7, #23]
          break;
 8005426:	e056      	b.n	80054d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800543c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005440:	d0e7      	beq.n	8005412 <USB_EPStopXfer+0x82>
 8005442:	e048      	b.n	80054d6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800545c:	d13b      	bne.n	80054d6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	7812      	ldrb	r2, [r2, #0]
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	440a      	add	r2, r1
 8005478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800547c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005480:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	7812      	ldrb	r2, [r2, #0]
 8005496:	0151      	lsls	r1, r2, #5
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	440a      	add	r2, r1
 800549c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3301      	adds	r3, #1
 80054aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d902      	bls.n	80054bc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	75fb      	strb	r3, [r7, #23]
          break;
 80054ba:	e00c      	b.n	80054d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054d4:	d0e7      	beq.n	80054a6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b089      	sub	sp, #36	; 0x24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	4611      	mov	r1, r2
 80054f0:	461a      	mov	r2, r3
 80054f2:	460b      	mov	r3, r1
 80054f4:	71fb      	strb	r3, [r7, #7]
 80054f6:	4613      	mov	r3, r2
 80054f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005502:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005506:	2b00      	cmp	r3, #0
 8005508:	d123      	bne.n	8005552 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800550a:	88bb      	ldrh	r3, [r7, #4]
 800550c:	3303      	adds	r3, #3
 800550e:	089b      	lsrs	r3, r3, #2
 8005510:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005512:	2300      	movs	r3, #0
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	e018      	b.n	800554a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	031a      	lsls	r2, r3, #12
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	4413      	add	r3, r2
 8005520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005524:	461a      	mov	r2, r3
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	3301      	adds	r3, #1
 8005530:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	3301      	adds	r3, #1
 8005536:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	3301      	adds	r3, #1
 800553c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	3301      	adds	r3, #1
 8005542:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	3301      	adds	r3, #1
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	429a      	cmp	r2, r3
 8005550:	d3e2      	bcc.n	8005518 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3724      	adds	r7, #36	; 0x24
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005560:	b480      	push	{r7}
 8005562:	b08b      	sub	sp, #44	; 0x2c
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005576:	88fb      	ldrh	r3, [r7, #6]
 8005578:	089b      	lsrs	r3, r3, #2
 800557a:	b29b      	uxth	r3, r3
 800557c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005586:	2300      	movs	r3, #0
 8005588:	623b      	str	r3, [r7, #32]
 800558a:	e014      	b.n	80055b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	601a      	str	r2, [r3, #0]
    pDest++;
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	3301      	adds	r3, #1
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	3301      	adds	r3, #1
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	3301      	adds	r3, #1
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	3301      	adds	r3, #1
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	3301      	adds	r3, #1
 80055b4:	623b      	str	r3, [r7, #32]
 80055b6:	6a3a      	ldr	r2, [r7, #32]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d3e6      	bcc.n	800558c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055be:	8bfb      	ldrh	r3, [r7, #30]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d01e      	beq.n	8005602 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ce:	461a      	mov	r2, r3
 80055d0:	f107 0310 	add.w	r3, r7, #16
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	fa22 f303 	lsr.w	r3, r2, r3
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	701a      	strb	r2, [r3, #0]
      i++;
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	3301      	adds	r3, #1
 80055ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	3301      	adds	r3, #1
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80055f6:	8bfb      	ldrh	r3, [r7, #30]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80055fc:	8bfb      	ldrh	r3, [r7, #30]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1ea      	bne.n	80055d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005604:	4618      	mov	r0, r3
 8005606:	372c      	adds	r7, #44	; 0x2c
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d12c      	bne.n	8005686 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	db12      	blt.n	8005664 <USB_EPSetStall+0x54>
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00f      	beq.n	8005664 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	0151      	lsls	r1, r2, #5
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	440a      	add	r2, r1
 800565a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005662:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	0151      	lsls	r1, r2, #5
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	440a      	add	r2, r1
 800567a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	e02b      	b.n	80056de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	db12      	blt.n	80056be <USB_EPSetStall+0xae>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00f      	beq.n	80056be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	0151      	lsls	r1, r2, #5
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	440a      	add	r2, r1
 80056b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	0151      	lsls	r1, r2, #5
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	440a      	add	r2, r1
 80056d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	785b      	ldrb	r3, [r3, #1]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d128      	bne.n	800575a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	440a      	add	r2, r1
 800571e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005722:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005726:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	791b      	ldrb	r3, [r3, #4]
 800572c:	2b03      	cmp	r3, #3
 800572e:	d003      	beq.n	8005738 <USB_EPClearStall+0x4c>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	791b      	ldrb	r3, [r3, #4]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d138      	bne.n	80057aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	0151      	lsls	r1, r2, #5
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	440a      	add	r2, r1
 800574e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	e027      	b.n	80057aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	0151      	lsls	r1, r2, #5
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	440a      	add	r2, r1
 8005770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005774:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005778:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	791b      	ldrb	r3, [r3, #4]
 800577e:	2b03      	cmp	r3, #3
 8005780:	d003      	beq.n	800578a <USB_EPClearStall+0x9e>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	791b      	ldrb	r3, [r3, #4]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d10f      	bne.n	80057aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80057da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80057ec:	68f9      	ldr	r1, [r7, #12]
 80057ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057f2:	4313      	orrs	r3, r2
 80057f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005832:	f023 0302 	bic.w	r3, r3, #2
 8005836:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005846:	b480      	push	{r7}
 8005848:	b085      	sub	sp, #20
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005860:	f023 0303 	bic.w	r3, r3, #3
 8005864:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005874:	f043 0302 	orr.w	r3, r3, #2
 8005878:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4013      	ands	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058a0:	68fb      	ldr	r3, [r7, #12]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b085      	sub	sp, #20
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	4013      	ands	r3, r2
 80058d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	0c1b      	lsrs	r3, r3, #16
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	4013      	ands	r3, r2
 8005904:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	b29b      	uxth	r3, r3
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005916:	b480      	push	{r7}
 8005918:	b085      	sub	sp, #20
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	460b      	mov	r3, r1
 8005920:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	4013      	ands	r3, r2
 8005942:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005944:	68bb      	ldr	r3, [r7, #8]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005952:	b480      	push	{r7}
 8005954:	b087      	sub	sp, #28
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	460b      	mov	r3, r1
 800595c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005974:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005976:	78fb      	ldrb	r3, [r7, #3]
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	fa22 f303 	lsr.w	r3, r2, r3
 8005982:	01db      	lsls	r3, r3, #7
 8005984:	b2db      	uxtb	r3, r3
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4013      	ands	r3, r2
 800599e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059a0:	68bb      	ldr	r3, [r7, #8]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0301 	and.w	r3, r3, #1
}
 80059be:	4618      	mov	r0, r3
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b085      	sub	sp, #20
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80059e8:	f023 0307 	bic.w	r3, r3, #7
 80059ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	333c      	adds	r3, #60	; 0x3c
 8005a26:	3304      	adds	r3, #4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4a26      	ldr	r2, [pc, #152]	; (8005ac8 <USB_EP0_OutStart+0xb8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d90a      	bls.n	8005a4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a44:	d101      	bne.n	8005a4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	e037      	b.n	8005aba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a50:	461a      	mov	r2, r3
 8005a52:	2300      	movs	r3, #0
 8005a54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a78:	f043 0318 	orr.w	r3, r3, #24
 8005a7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005a90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005a92:	7afb      	ldrb	r3, [r7, #11]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d10f      	bne.n	8005ab8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ab6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	4f54300a 	.word	0x4f54300a

08005acc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3301      	adds	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <USB_CoreReset+0x64>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e01b      	b.n	8005b22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	daf2      	bge.n	8005ad8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f043 0201 	orr.w	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3301      	adds	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4a09      	ldr	r2, [pc, #36]	; (8005b30 <USB_CoreReset+0x64>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d901      	bls.n	8005b14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e006      	b.n	8005b22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d0f0      	beq.n	8005b02 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	00030d40 	.word	0x00030d40

08005b34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005b44:	f002 fcd8 	bl	80084f8 <USBD_static_malloc>
 8005b48:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d109      	bne.n	8005b64 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	32b0      	adds	r2, #176	; 0xb0
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005b60:	2302      	movs	r3, #2
 8005b62:	e0d4      	b.n	8005d0e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005b64:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005b68:	2100      	movs	r1, #0
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f004 fe44 	bl	800a7f8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	32b0      	adds	r2, #176	; 0xb0
 8005b7a:	68f9      	ldr	r1, [r7, #12]
 8005b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	32b0      	adds	r2, #176	; 0xb0
 8005b8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	7c1b      	ldrb	r3, [r3, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d138      	bne.n	8005c0e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005b9c:	4b5e      	ldr	r3, [pc, #376]	; (8005d18 <USBD_CDC_Init+0x1e4>)
 8005b9e:	7819      	ldrb	r1, [r3, #0]
 8005ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f002 fb83 	bl	80082b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005bac:	4b5a      	ldr	r3, [pc, #360]	; (8005d18 <USBD_CDC_Init+0x1e4>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	f003 020f 	and.w	r2, r3, #15
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	3324      	adds	r3, #36	; 0x24
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005bc6:	4b55      	ldr	r3, [pc, #340]	; (8005d1c <USBD_CDC_Init+0x1e8>)
 8005bc8:	7819      	ldrb	r1, [r3, #0]
 8005bca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bce:	2202      	movs	r2, #2
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f002 fb6e 	bl	80082b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005bd6:	4b51      	ldr	r3, [pc, #324]	; (8005d1c <USBD_CDC_Init+0x1e8>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	f003 020f 	and.w	r2, r3, #15
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005bee:	2201      	movs	r2, #1
 8005bf0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005bf2:	4b4b      	ldr	r3, [pc, #300]	; (8005d20 <USBD_CDC_Init+0x1ec>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	f003 020f 	and.w	r2, r3, #15
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	3326      	adds	r3, #38	; 0x26
 8005c08:	2210      	movs	r2, #16
 8005c0a:	801a      	strh	r2, [r3, #0]
 8005c0c:	e035      	b.n	8005c7a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005c0e:	4b42      	ldr	r3, [pc, #264]	; (8005d18 <USBD_CDC_Init+0x1e4>)
 8005c10:	7819      	ldrb	r1, [r3, #0]
 8005c12:	2340      	movs	r3, #64	; 0x40
 8005c14:	2202      	movs	r2, #2
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f002 fb4b 	bl	80082b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005c1c:	4b3e      	ldr	r3, [pc, #248]	; (8005d18 <USBD_CDC_Init+0x1e4>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f003 020f 	and.w	r2, r3, #15
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	3324      	adds	r3, #36	; 0x24
 8005c32:	2201      	movs	r2, #1
 8005c34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005c36:	4b39      	ldr	r3, [pc, #228]	; (8005d1c <USBD_CDC_Init+0x1e8>)
 8005c38:	7819      	ldrb	r1, [r3, #0]
 8005c3a:	2340      	movs	r3, #64	; 0x40
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f002 fb37 	bl	80082b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005c44:	4b35      	ldr	r3, [pc, #212]	; (8005d1c <USBD_CDC_Init+0x1e8>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	f003 020f 	and.w	r2, r3, #15
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	440b      	add	r3, r1
 8005c58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005c60:	4b2f      	ldr	r3, [pc, #188]	; (8005d20 <USBD_CDC_Init+0x1ec>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	f003 020f 	and.w	r2, r3, #15
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	3326      	adds	r3, #38	; 0x26
 8005c76:	2210      	movs	r2, #16
 8005c78:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c7a:	4b29      	ldr	r3, [pc, #164]	; (8005d20 <USBD_CDC_Init+0x1ec>)
 8005c7c:	7819      	ldrb	r1, [r3, #0]
 8005c7e:	2308      	movs	r3, #8
 8005c80:	2203      	movs	r2, #3
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f002 fb15 	bl	80082b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005c88:	4b25      	ldr	r3, [pc, #148]	; (8005d20 <USBD_CDC_Init+0x1ec>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	f003 020f 	and.w	r2, r3, #15
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	3324      	adds	r3, #36	; 0x24
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	33b0      	adds	r3, #176	; 0xb0
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e018      	b.n	8005d0e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	7c1b      	ldrb	r3, [r3, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ce4:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <USBD_CDC_Init+0x1e8>)
 8005ce6:	7819      	ldrb	r1, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f002 fbcc 	bl	8008490 <USBD_LL_PrepareReceive>
 8005cf8:	e008      	b.n	8005d0c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005cfa:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <USBD_CDC_Init+0x1e8>)
 8005cfc:	7819      	ldrb	r1, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d04:	2340      	movs	r3, #64	; 0x40
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f002 fbc2 	bl	8008490 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20000093 	.word	0x20000093
 8005d1c:	20000094 	.word	0x20000094
 8005d20:	20000095 	.word	0x20000095

08005d24 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005d30:	4b3a      	ldr	r3, [pc, #232]	; (8005e1c <USBD_CDC_DeInit+0xf8>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f002 fae1 	bl	80082fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005d3c:	4b37      	ldr	r3, [pc, #220]	; (8005e1c <USBD_CDC_DeInit+0xf8>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	f003 020f 	and.w	r2, r3, #15
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	4613      	mov	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	440b      	add	r3, r1
 8005d50:	3324      	adds	r3, #36	; 0x24
 8005d52:	2200      	movs	r2, #0
 8005d54:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005d56:	4b32      	ldr	r3, [pc, #200]	; (8005e20 <USBD_CDC_DeInit+0xfc>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f002 face 	bl	80082fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005d62:	4b2f      	ldr	r3, [pc, #188]	; (8005e20 <USBD_CDC_DeInit+0xfc>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	f003 020f 	and.w	r2, r3, #15
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005d7e:	4b29      	ldr	r3, [pc, #164]	; (8005e24 <USBD_CDC_DeInit+0x100>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	4619      	mov	r1, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f002 faba 	bl	80082fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005d8a:	4b26      	ldr	r3, [pc, #152]	; (8005e24 <USBD_CDC_DeInit+0x100>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	f003 020f 	and.w	r2, r3, #15
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	3324      	adds	r3, #36	; 0x24
 8005da0:	2200      	movs	r2, #0
 8005da2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005da4:	4b1f      	ldr	r3, [pc, #124]	; (8005e24 <USBD_CDC_DeInit+0x100>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	f003 020f 	and.w	r2, r3, #15
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	3326      	adds	r3, #38	; 0x26
 8005dba:	2200      	movs	r2, #0
 8005dbc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	32b0      	adds	r2, #176	; 0xb0
 8005dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01f      	beq.n	8005e10 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	33b0      	adds	r3, #176	; 0xb0
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	32b0      	adds	r2, #176	; 0xb0
 8005dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f002 fb8e 	bl	8008514 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	32b0      	adds	r2, #176	; 0xb0
 8005e02:	2100      	movs	r1, #0
 8005e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000093 	.word	0x20000093
 8005e20:	20000094 	.word	0x20000094
 8005e24:	20000095 	.word	0x20000095

08005e28 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	32b0      	adds	r2, #176	; 0xb0
 8005e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e40:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e0bf      	b.n	8005fd8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d050      	beq.n	8005f06 <USBD_CDC_Setup+0xde>
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	f040 80af 	bne.w	8005fc8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	88db      	ldrh	r3, [r3, #6]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d03a      	beq.n	8005ee8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	b25b      	sxtb	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	da1b      	bge.n	8005eb4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	33b0      	adds	r3, #176	; 0xb0
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005e92:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	88d2      	ldrh	r2, [r2, #6]
 8005e98:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	88db      	ldrh	r3, [r3, #6]
 8005e9e:	2b07      	cmp	r3, #7
 8005ea0:	bf28      	it	cs
 8005ea2:	2307      	movcs	r3, #7
 8005ea4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	89fa      	ldrh	r2, [r7, #14]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f001 fd89 	bl	80079c4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005eb2:	e090      	b.n	8005fd6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	785a      	ldrb	r2, [r3, #1]
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	88db      	ldrh	r3, [r3, #6]
 8005ec2:	2b3f      	cmp	r3, #63	; 0x3f
 8005ec4:	d803      	bhi.n	8005ece <USBD_CDC_Setup+0xa6>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	88db      	ldrh	r3, [r3, #6]
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	e000      	b.n	8005ed0 <USBD_CDC_Setup+0xa8>
 8005ece:	2240      	movs	r2, #64	; 0x40
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005ed6:	6939      	ldr	r1, [r7, #16]
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005ede:	461a      	mov	r2, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f001 fd9b 	bl	8007a1c <USBD_CtlPrepareRx>
      break;
 8005ee6:	e076      	b.n	8005fd6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	33b0      	adds	r3, #176	; 0xb0
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	7850      	ldrb	r0, [r2, #1]
 8005efe:	2200      	movs	r2, #0
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	4798      	blx	r3
      break;
 8005f04:	e067      	b.n	8005fd6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	785b      	ldrb	r3, [r3, #1]
 8005f0a:	2b0b      	cmp	r3, #11
 8005f0c:	d851      	bhi.n	8005fb2 <USBD_CDC_Setup+0x18a>
 8005f0e:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <USBD_CDC_Setup+0xec>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005f45 	.word	0x08005f45
 8005f18:	08005fc1 	.word	0x08005fc1
 8005f1c:	08005fb3 	.word	0x08005fb3
 8005f20:	08005fb3 	.word	0x08005fb3
 8005f24:	08005fb3 	.word	0x08005fb3
 8005f28:	08005fb3 	.word	0x08005fb3
 8005f2c:	08005fb3 	.word	0x08005fb3
 8005f30:	08005fb3 	.word	0x08005fb3
 8005f34:	08005fb3 	.word	0x08005fb3
 8005f38:	08005fb3 	.word	0x08005fb3
 8005f3c:	08005f6f 	.word	0x08005f6f
 8005f40:	08005f99 	.word	0x08005f99
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d107      	bne.n	8005f60 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f50:	f107 030a 	add.w	r3, r7, #10
 8005f54:	2202      	movs	r2, #2
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f001 fd33 	bl	80079c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f5e:	e032      	b.n	8005fc6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005f60:	6839      	ldr	r1, [r7, #0]
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 fcbd 	bl	80078e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	75fb      	strb	r3, [r7, #23]
          break;
 8005f6c:	e02b      	b.n	8005fc6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d107      	bne.n	8005f8a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005f7a:	f107 030d 	add.w	r3, r7, #13
 8005f7e:	2201      	movs	r2, #1
 8005f80:	4619      	mov	r1, r3
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 fd1e 	bl	80079c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f88:	e01d      	b.n	8005fc6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 fca8 	bl	80078e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f92:	2303      	movs	r3, #3
 8005f94:	75fb      	strb	r3, [r7, #23]
          break;
 8005f96:	e016      	b.n	8005fc6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d00f      	beq.n	8005fc4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f001 fc9b 	bl	80078e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fac:	2303      	movs	r3, #3
 8005fae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005fb0:	e008      	b.n	8005fc4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f001 fc94 	bl	80078e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	75fb      	strb	r3, [r7, #23]
          break;
 8005fbe:	e002      	b.n	8005fc6 <USBD_CDC_Setup+0x19e>
          break;
 8005fc0:	bf00      	nop
 8005fc2:	e008      	b.n	8005fd6 <USBD_CDC_Setup+0x1ae>
          break;
 8005fc4:	bf00      	nop
      }
      break;
 8005fc6:	e006      	b.n	8005fd6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005fc8:	6839      	ldr	r1, [r7, #0]
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f001 fc89 	bl	80078e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd4:	bf00      	nop
  }

  return (uint8_t)ret;
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005ff2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	32b0      	adds	r2, #176	; 0xb0
 8005ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006006:	2303      	movs	r3, #3
 8006008:	e065      	b.n	80060d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	32b0      	adds	r2, #176	; 0xb0
 8006014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006018:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	f003 020f 	and.w	r2, r3, #15
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	440b      	add	r3, r1
 800602c:	3318      	adds	r3, #24
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d02f      	beq.n	8006094 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	f003 020f 	and.w	r2, r3, #15
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	3318      	adds	r3, #24
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	f003 010f 	and.w	r1, r3, #15
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	460b      	mov	r3, r1
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	440b      	add	r3, r1
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4403      	add	r3, r0
 800605c:	3348      	adds	r3, #72	; 0x48
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	fbb2 f1f3 	udiv	r1, r2, r3
 8006064:	fb01 f303 	mul.w	r3, r1, r3
 8006068:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800606a:	2b00      	cmp	r3, #0
 800606c:	d112      	bne.n	8006094 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800606e:	78fb      	ldrb	r3, [r7, #3]
 8006070:	f003 020f 	and.w	r2, r3, #15
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	3318      	adds	r3, #24
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006086:	78f9      	ldrb	r1, [r7, #3]
 8006088:	2300      	movs	r3, #0
 800608a:	2200      	movs	r2, #0
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f002 f9de 	bl	800844e <USBD_LL_Transmit>
 8006092:	e01f      	b.n	80060d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2200      	movs	r2, #0
 8006098:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	33b0      	adds	r3, #176	; 0xb0
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d010      	beq.n	80060d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	33b0      	adds	r3, #176	; 0xb0
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80060d0:	78fa      	ldrb	r2, [r7, #3]
 80060d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b084      	sub	sp, #16
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	460b      	mov	r3, r1
 80060e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	32b0      	adds	r2, #176	; 0xb0
 80060f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	32b0      	adds	r2, #176	; 0xb0
 8006104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800610c:	2303      	movs	r3, #3
 800610e:	e01a      	b.n	8006146 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f002 f9dc 	bl	80084d2 <USBD_LL_GetRxDataSize>
 800611a:	4602      	mov	r2, r0
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	33b0      	adds	r3, #176	; 0xb0
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006140:	4611      	mov	r1, r2
 8006142:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	32b0      	adds	r2, #176	; 0xb0
 8006160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006164:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800616c:	2303      	movs	r3, #3
 800616e:	e025      	b.n	80061bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	33b0      	adds	r3, #176	; 0xb0
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01a      	beq.n	80061ba <USBD_CDC_EP0_RxReady+0x6c>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800618a:	2bff      	cmp	r3, #255	; 0xff
 800618c:	d015      	beq.n	80061ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	33b0      	adds	r3, #176	; 0xb0
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80061a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80061ae:	b292      	uxth	r2, r2
 80061b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	22ff      	movs	r2, #255	; 0xff
 80061b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80061cc:	2182      	movs	r1, #130	; 0x82
 80061ce:	4818      	ldr	r0, [pc, #96]	; (8006230 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80061d0:	f000 fd4f 	bl	8006c72 <USBD_GetEpDesc>
 80061d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80061d6:	2101      	movs	r1, #1
 80061d8:	4815      	ldr	r0, [pc, #84]	; (8006230 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80061da:	f000 fd4a 	bl	8006c72 <USBD_GetEpDesc>
 80061de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80061e0:	2181      	movs	r1, #129	; 0x81
 80061e2:	4813      	ldr	r0, [pc, #76]	; (8006230 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80061e4:	f000 fd45 	bl	8006c72 <USBD_GetEpDesc>
 80061e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2210      	movs	r2, #16
 80061f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d006      	beq.n	800620a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	2200      	movs	r2, #0
 8006200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006204:	711a      	strb	r2, [r3, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d006      	beq.n	800621e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006218:	711a      	strb	r2, [r3, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2243      	movs	r2, #67	; 0x43
 8006222:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006224:	4b02      	ldr	r3, [pc, #8]	; (8006230 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000050 	.word	0x20000050

08006234 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800623c:	2182      	movs	r1, #130	; 0x82
 800623e:	4818      	ldr	r0, [pc, #96]	; (80062a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006240:	f000 fd17 	bl	8006c72 <USBD_GetEpDesc>
 8006244:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006246:	2101      	movs	r1, #1
 8006248:	4815      	ldr	r0, [pc, #84]	; (80062a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800624a:	f000 fd12 	bl	8006c72 <USBD_GetEpDesc>
 800624e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006250:	2181      	movs	r1, #129	; 0x81
 8006252:	4813      	ldr	r0, [pc, #76]	; (80062a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006254:	f000 fd0d 	bl	8006c72 <USBD_GetEpDesc>
 8006258:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2210      	movs	r2, #16
 8006264:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d006      	beq.n	800627a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	2200      	movs	r2, #0
 8006270:	711a      	strb	r2, [r3, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f042 0202 	orr.w	r2, r2, #2
 8006278:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d006      	beq.n	800628e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	711a      	strb	r2, [r3, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f042 0202 	orr.w	r2, r2, #2
 800628c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2243      	movs	r2, #67	; 0x43
 8006292:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006294:	4b02      	ldr	r3, [pc, #8]	; (80062a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000050 	.word	0x20000050

080062a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80062ac:	2182      	movs	r1, #130	; 0x82
 80062ae:	4818      	ldr	r0, [pc, #96]	; (8006310 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80062b0:	f000 fcdf 	bl	8006c72 <USBD_GetEpDesc>
 80062b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80062b6:	2101      	movs	r1, #1
 80062b8:	4815      	ldr	r0, [pc, #84]	; (8006310 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80062ba:	f000 fcda 	bl	8006c72 <USBD_GetEpDesc>
 80062be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80062c0:	2181      	movs	r1, #129	; 0x81
 80062c2:	4813      	ldr	r0, [pc, #76]	; (8006310 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80062c4:	f000 fcd5 	bl	8006c72 <USBD_GetEpDesc>
 80062c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2210      	movs	r2, #16
 80062d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d006      	beq.n	80062ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2200      	movs	r2, #0
 80062e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062e4:	711a      	strb	r2, [r3, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d006      	beq.n	80062fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062f8:	711a      	strb	r2, [r3, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2243      	movs	r2, #67	; 0x43
 8006302:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006304:	4b02      	ldr	r3, [pc, #8]	; (8006310 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000050 	.word	0x20000050

08006314 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	220a      	movs	r2, #10
 8006320:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006322:	4b03      	ldr	r3, [pc, #12]	; (8006330 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	2000000c 	.word	0x2000000c

08006334 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006344:	2303      	movs	r3, #3
 8006346:	e009      	b.n	800635c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	33b0      	adds	r3, #176	; 0xb0
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	32b0      	adds	r2, #176	; 0xb0
 800637e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006382:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800638a:	2303      	movs	r3, #3
 800638c:	e008      	b.n	80063a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	32b0      	adds	r2, #176	; 0xb0
 80063c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e004      	b.n	80063da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
	...

080063e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	32b0      	adds	r2, #176	; 0xb0
 80063fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006400:	2301      	movs	r3, #1
 8006402:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	32b0      	adds	r2, #176	; 0xb0
 800640e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006416:	2303      	movs	r3, #3
 8006418:	e025      	b.n	8006466 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006420:	2b00      	cmp	r3, #0
 8006422:	d11f      	bne.n	8006464 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2201      	movs	r2, #1
 8006428:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800642c:	4b10      	ldr	r3, [pc, #64]	; (8006470 <USBD_CDC_TransmitPacket+0x88>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	f003 020f 	and.w	r2, r3, #15
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4403      	add	r3, r0
 8006446:	3318      	adds	r3, #24
 8006448:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800644a:	4b09      	ldr	r3, [pc, #36]	; (8006470 <USBD_CDC_TransmitPacket+0x88>)
 800644c:	7819      	ldrb	r1, [r3, #0]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 fff7 	bl	800844e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006464:	7bfb      	ldrb	r3, [r7, #15]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000093 	.word	0x20000093

08006474 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	32b0      	adds	r2, #176	; 0xb0
 8006486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	32b0      	adds	r2, #176	; 0xb0
 8006496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800649e:	2303      	movs	r3, #3
 80064a0:	e018      	b.n	80064d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	7c1b      	ldrb	r3, [r3, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10a      	bne.n	80064c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064aa:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <USBD_CDC_ReceivePacket+0x68>)
 80064ac:	7819      	ldrb	r1, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 ffe9 	bl	8008490 <USBD_LL_PrepareReceive>
 80064be:	e008      	b.n	80064d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064c0:	4b06      	ldr	r3, [pc, #24]	; (80064dc <USBD_CDC_ReceivePacket+0x68>)
 80064c2:	7819      	ldrb	r1, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064ca:	2340      	movs	r3, #64	; 0x40
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 ffdf 	bl	8008490 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20000094 	.word	0x20000094

080064e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	4613      	mov	r3, r2
 80064ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e01f      	b.n	8006538 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	79fa      	ldrb	r2, [r7, #7]
 800652a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f001 fe59 	bl	80081e4 <USBD_LL_Init>
 8006532:	4603      	mov	r3, r0
 8006534:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006536:	7dfb      	ldrb	r3, [r7, #23]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006554:	2303      	movs	r3, #3
 8006556:	e025      	b.n	80065a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	32ae      	adds	r2, #174	; 0xae
 800656a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00f      	beq.n	8006594 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	32ae      	adds	r2, #174	; 0xae
 800657e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	f107 020e 	add.w	r2, r7, #14
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
 800658c:	4602      	mov	r2, r0
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 fe61 	bl	800827c <USBD_LL_Start>
 80065ba:	4603      	mov	r3, r0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	460b      	mov	r3, r1
 80065e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d009      	beq.n	8006608 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	78fa      	ldrb	r2, [r7, #3]
 80065fe:	4611      	mov	r1, r2
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	460b      	mov	r3, r1
 800661c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	78fa      	ldrb	r2, [r7, #3]
 800662c:	4611      	mov	r1, r2
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	4798      	blx	r3
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006638:	2303      	movs	r3, #3
 800663a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f001 f908 	bl	800786e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800666c:	461a      	mov	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800667a:	f003 031f 	and.w	r3, r3, #31
 800667e:	2b02      	cmp	r3, #2
 8006680:	d01a      	beq.n	80066b8 <USBD_LL_SetupStage+0x72>
 8006682:	2b02      	cmp	r3, #2
 8006684:	d822      	bhi.n	80066cc <USBD_LL_SetupStage+0x86>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d002      	beq.n	8006690 <USBD_LL_SetupStage+0x4a>
 800668a:	2b01      	cmp	r3, #1
 800668c:	d00a      	beq.n	80066a4 <USBD_LL_SetupStage+0x5e>
 800668e:	e01d      	b.n	80066cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fb5f 	bl	8006d5c <USBD_StdDevReq>
 800669e:	4603      	mov	r3, r0
 80066a0:	73fb      	strb	r3, [r7, #15]
      break;
 80066a2:	e020      	b.n	80066e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fbc7 	bl	8006e40 <USBD_StdItfReq>
 80066b2:	4603      	mov	r3, r0
 80066b4:	73fb      	strb	r3, [r7, #15]
      break;
 80066b6:	e016      	b.n	80066e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fc29 	bl	8006f18 <USBD_StdEPReq>
 80066c6:	4603      	mov	r3, r0
 80066c8:	73fb      	strb	r3, [r7, #15]
      break;
 80066ca:	e00c      	b.n	80066e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80066d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f001 fe2e 	bl	800833c <USBD_LL_StallEP>
 80066e0:	4603      	mov	r3, r0
 80066e2:	73fb      	strb	r3, [r7, #15]
      break;
 80066e4:	bf00      	nop
  }

  return ret;
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	460b      	mov	r3, r1
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006702:	7afb      	ldrb	r3, [r7, #11]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d16e      	bne.n	80067e6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800670e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006716:	2b03      	cmp	r3, #3
 8006718:	f040 8098 	bne.w	800684c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	429a      	cmp	r2, r3
 8006726:	d913      	bls.n	8006750 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	1ad2      	subs	r2, r2, r3
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	4293      	cmp	r3, r2
 8006740:	bf28      	it	cs
 8006742:	4613      	movcs	r3, r2
 8006744:	461a      	mov	r2, r3
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f001 f984 	bl	8007a56 <USBD_CtlContinueRx>
 800674e:	e07d      	b.n	800684c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006756:	f003 031f 	and.w	r3, r3, #31
 800675a:	2b02      	cmp	r3, #2
 800675c:	d014      	beq.n	8006788 <USBD_LL_DataOutStage+0x98>
 800675e:	2b02      	cmp	r3, #2
 8006760:	d81d      	bhi.n	800679e <USBD_LL_DataOutStage+0xae>
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <USBD_LL_DataOutStage+0x7c>
 8006766:	2b01      	cmp	r3, #1
 8006768:	d003      	beq.n	8006772 <USBD_LL_DataOutStage+0x82>
 800676a:	e018      	b.n	800679e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	75bb      	strb	r3, [r7, #22]
            break;
 8006770:	e018      	b.n	80067a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006778:	b2db      	uxtb	r3, r3
 800677a:	4619      	mov	r1, r3
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fa5e 	bl	8006c3e <USBD_CoreFindIF>
 8006782:	4603      	mov	r3, r0
 8006784:	75bb      	strb	r3, [r7, #22]
            break;
 8006786:	e00d      	b.n	80067a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800678e:	b2db      	uxtb	r3, r3
 8006790:	4619      	mov	r1, r3
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 fa60 	bl	8006c58 <USBD_CoreFindEP>
 8006798:	4603      	mov	r3, r0
 800679a:	75bb      	strb	r3, [r7, #22]
            break;
 800679c:	e002      	b.n	80067a4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	75bb      	strb	r3, [r7, #22]
            break;
 80067a2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80067a4:	7dbb      	ldrb	r3, [r7, #22]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d119      	bne.n	80067de <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d113      	bne.n	80067de <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80067b6:	7dba      	ldrb	r2, [r7, #22]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	32ae      	adds	r2, #174	; 0xae
 80067bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00b      	beq.n	80067de <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80067c6:	7dba      	ldrb	r2, [r7, #22]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80067ce:	7dba      	ldrb	r2, [r7, #22]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	32ae      	adds	r2, #174	; 0xae
 80067d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f001 f94a 	bl	8007a78 <USBD_CtlSendStatus>
 80067e4:	e032      	b.n	800684c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80067e6:	7afb      	ldrb	r3, [r7, #11]
 80067e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	4619      	mov	r1, r3
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 fa31 	bl	8006c58 <USBD_CoreFindEP>
 80067f6:	4603      	mov	r3, r0
 80067f8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067fa:	7dbb      	ldrb	r3, [r7, #22]
 80067fc:	2bff      	cmp	r3, #255	; 0xff
 80067fe:	d025      	beq.n	800684c <USBD_LL_DataOutStage+0x15c>
 8006800:	7dbb      	ldrb	r3, [r7, #22]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d122      	bne.n	800684c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b03      	cmp	r3, #3
 8006810:	d117      	bne.n	8006842 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006812:	7dba      	ldrb	r2, [r7, #22]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	32ae      	adds	r2, #174	; 0xae
 8006818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00f      	beq.n	8006842 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006822:	7dba      	ldrb	r2, [r7, #22]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800682a:	7dba      	ldrb	r2, [r7, #22]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	32ae      	adds	r2, #174	; 0xae
 8006830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	7afa      	ldrb	r2, [r7, #11]
 8006838:	4611      	mov	r1, r2
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	4798      	blx	r3
 800683e:	4603      	mov	r3, r0
 8006840:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006842:	7dfb      	ldrb	r3, [r7, #23]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	e000      	b.n	800684e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b086      	sub	sp, #24
 800685a:	af00      	add	r7, sp, #0
 800685c:	60f8      	str	r0, [r7, #12]
 800685e:	460b      	mov	r3, r1
 8006860:	607a      	str	r2, [r7, #4]
 8006862:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006864:	7afb      	ldrb	r3, [r7, #11]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d16f      	bne.n	800694a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3314      	adds	r3, #20
 800686e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006876:	2b02      	cmp	r3, #2
 8006878:	d15a      	bne.n	8006930 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	429a      	cmp	r2, r3
 8006884:	d914      	bls.n	80068b0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	1ad2      	subs	r2, r2, r3
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	461a      	mov	r2, r3
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f001 f8ac 	bl	80079fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068a2:	2300      	movs	r3, #0
 80068a4:	2200      	movs	r2, #0
 80068a6:	2100      	movs	r1, #0
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f001 fdf1 	bl	8008490 <USBD_LL_PrepareReceive>
 80068ae:	e03f      	b.n	8006930 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d11c      	bne.n	80068f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d316      	bcc.n	80068f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d20f      	bcs.n	80068f6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068d6:	2200      	movs	r2, #0
 80068d8:	2100      	movs	r1, #0
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f001 f88d 	bl	80079fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068e8:	2300      	movs	r3, #0
 80068ea:	2200      	movs	r2, #0
 80068ec:	2100      	movs	r1, #0
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f001 fdce 	bl	8008490 <USBD_LL_PrepareReceive>
 80068f4:	e01c      	b.n	8006930 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d10f      	bne.n	8006922 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d009      	beq.n	8006922 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006922:	2180      	movs	r1, #128	; 0x80
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f001 fd09 	bl	800833c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f001 f8b7 	bl	8007a9e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d03a      	beq.n	80069b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f7ff fe42 	bl	80065c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006948:	e032      	b.n	80069b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800694a:	7afb      	ldrb	r3, [r7, #11]
 800694c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006950:	b2db      	uxtb	r3, r3
 8006952:	4619      	mov	r1, r3
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f97f 	bl	8006c58 <USBD_CoreFindEP>
 800695a:	4603      	mov	r3, r0
 800695c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800695e:	7dfb      	ldrb	r3, [r7, #23]
 8006960:	2bff      	cmp	r3, #255	; 0xff
 8006962:	d025      	beq.n	80069b0 <USBD_LL_DataInStage+0x15a>
 8006964:	7dfb      	ldrb	r3, [r7, #23]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d122      	bne.n	80069b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b03      	cmp	r3, #3
 8006974:	d11c      	bne.n	80069b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006976:	7dfa      	ldrb	r2, [r7, #23]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	32ae      	adds	r2, #174	; 0xae
 800697c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d014      	beq.n	80069b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006986:	7dfa      	ldrb	r2, [r7, #23]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800698e:	7dfa      	ldrb	r2, [r7, #23]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	32ae      	adds	r2, #174	; 0xae
 8006994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	7afa      	ldrb	r2, [r7, #11]
 800699c:	4611      	mov	r1, r2
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	4798      	blx	r3
 80069a2:	4603      	mov	r3, r0
 80069a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80069a6:	7dbb      	ldrb	r3, [r7, #22]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80069ac:	7dbb      	ldrb	r3, [r7, #22]
 80069ae:	e000      	b.n	80069b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d014      	beq.n	8006a20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00e      	beq.n	8006a20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6852      	ldr	r2, [r2, #4]
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	4611      	mov	r1, r2
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	4798      	blx	r3
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a20:	2340      	movs	r3, #64	; 0x40
 8006a22:	2200      	movs	r2, #0
 8006a24:	2100      	movs	r1, #0
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 fc43 	bl	80082b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2240      	movs	r2, #64	; 0x40
 8006a38:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a3c:	2340      	movs	r3, #64	; 0x40
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2180      	movs	r1, #128	; 0x80
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 fc35 	bl	80082b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2240      	movs	r2, #64	; 0x40
 8006a52:	621a      	str	r2, [r3, #32]

  return ret;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	460b      	mov	r3, r1
 8006a68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	78fa      	ldrb	r2, [r7, #3]
 8006a6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2204      	movs	r2, #4
 8006a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d106      	bne.n	8006acc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d110      	bne.n	8006b10 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00b      	beq.n	8006b10 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d005      	beq.n	8006b10 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	460b      	mov	r3, r1
 8006b24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	32ae      	adds	r2, #174	; 0xae
 8006b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e01c      	b.n	8006b76 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d115      	bne.n	8006b74 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	32ae      	adds	r2, #174	; 0xae
 8006b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00b      	beq.n	8006b74 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	32ae      	adds	r2, #174	; 0xae
 8006b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	78fa      	ldrb	r2, [r7, #3]
 8006b6e:	4611      	mov	r1, r2
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	32ae      	adds	r2, #174	; 0xae
 8006b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e01c      	b.n	8006bda <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d115      	bne.n	8006bd8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	32ae      	adds	r2, #174	; 0xae
 8006bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	32ae      	adds	r2, #174	; 0xae
 8006bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	78fa      	ldrb	r2, [r7, #3]
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00e      	beq.n	8006c34 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	6852      	ldr	r2, [r2, #4]
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	4611      	mov	r1, r2
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006c30:	2303      	movs	r3, #3
 8006c32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	460b      	mov	r3, r1
 8006c48:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006c4a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006c64:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b086      	sub	sp, #24
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	885b      	ldrh	r3, [r3, #2]
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d920      	bls.n	8006cdc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006ca2:	e013      	b.n	8006ccc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006ca4:	f107 030a 	add.w	r3, r7, #10
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6978      	ldr	r0, [r7, #20]
 8006cac:	f000 f81b 	bl	8006ce6 <USBD_GetNextDesc>
 8006cb0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	785b      	ldrb	r3, [r3, #1]
 8006cb6:	2b05      	cmp	r3, #5
 8006cb8:	d108      	bne.n	8006ccc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	789b      	ldrb	r3, [r3, #2]
 8006cc2:	78fa      	ldrb	r2, [r7, #3]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d008      	beq.n	8006cda <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	885b      	ldrh	r3, [r3, #2]
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	897b      	ldrh	r3, [r7, #10]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d8e5      	bhi.n	8006ca4 <USBD_GetEpDesc+0x32>
 8006cd8:	e000      	b.n	8006cdc <USBD_GetEpDesc+0x6a>
          break;
 8006cda:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006cdc:	693b      	ldr	r3, [r7, #16]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b085      	sub	sp, #20
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	881a      	ldrh	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	4413      	add	r3, r2
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4413      	add	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006d12:	68fb      	ldr	r3, [r7, #12]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	3301      	adds	r3, #1
 8006d36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006d3e:	8a3b      	ldrh	r3, [r7, #16]
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	b21a      	sxth	r2, r3
 8006d44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	b21b      	sxth	r3, r3
 8006d4c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006d4e:	89fb      	ldrh	r3, [r7, #14]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	371c      	adds	r7, #28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d005      	beq.n	8006d82 <USBD_StdDevReq+0x26>
 8006d76:	2b40      	cmp	r3, #64	; 0x40
 8006d78:	d857      	bhi.n	8006e2a <USBD_StdDevReq+0xce>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00f      	beq.n	8006d9e <USBD_StdDevReq+0x42>
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	d153      	bne.n	8006e2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	32ae      	adds	r2, #174	; 0xae
 8006d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	4798      	blx	r3
 8006d98:	4603      	mov	r3, r0
 8006d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d9c:	e04a      	b.n	8006e34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	785b      	ldrb	r3, [r3, #1]
 8006da2:	2b09      	cmp	r3, #9
 8006da4:	d83b      	bhi.n	8006e1e <USBD_StdDevReq+0xc2>
 8006da6:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <USBD_StdDevReq+0x50>)
 8006da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dac:	08006e01 	.word	0x08006e01
 8006db0:	08006e15 	.word	0x08006e15
 8006db4:	08006e1f 	.word	0x08006e1f
 8006db8:	08006e0b 	.word	0x08006e0b
 8006dbc:	08006e1f 	.word	0x08006e1f
 8006dc0:	08006ddf 	.word	0x08006ddf
 8006dc4:	08006dd5 	.word	0x08006dd5
 8006dc8:	08006e1f 	.word	0x08006e1f
 8006dcc:	08006df7 	.word	0x08006df7
 8006dd0:	08006de9 	.word	0x08006de9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fa3c 	bl	8007254 <USBD_GetDescriptor>
          break;
 8006ddc:	e024      	b.n	8006e28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fba1 	bl	8007528 <USBD_SetAddress>
          break;
 8006de6:	e01f      	b.n	8006e28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fbe0 	bl	80075b0 <USBD_SetConfig>
 8006df0:	4603      	mov	r3, r0
 8006df2:	73fb      	strb	r3, [r7, #15]
          break;
 8006df4:	e018      	b.n	8006e28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fc83 	bl	8007704 <USBD_GetConfig>
          break;
 8006dfe:	e013      	b.n	8006e28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fcb4 	bl	8007770 <USBD_GetStatus>
          break;
 8006e08:	e00e      	b.n	8006e28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fce3 	bl	80077d8 <USBD_SetFeature>
          break;
 8006e12:	e009      	b.n	8006e28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fd07 	bl	800782a <USBD_ClrFeature>
          break;
 8006e1c:	e004      	b.n	8006e28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fd5e 	bl	80078e2 <USBD_CtlError>
          break;
 8006e26:	bf00      	nop
      }
      break;
 8006e28:	e004      	b.n	8006e34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fd58 	bl	80078e2 <USBD_CtlError>
      break;
 8006e32:	bf00      	nop
  }

  return ret;
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop

08006e40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e56:	2b40      	cmp	r3, #64	; 0x40
 8006e58:	d005      	beq.n	8006e66 <USBD_StdItfReq+0x26>
 8006e5a:	2b40      	cmp	r3, #64	; 0x40
 8006e5c:	d852      	bhi.n	8006f04 <USBD_StdItfReq+0xc4>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <USBD_StdItfReq+0x26>
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d14e      	bne.n	8006f04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d840      	bhi.n	8006ef6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	889b      	ldrh	r3, [r3, #4]
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d836      	bhi.n	8006eec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	889b      	ldrh	r3, [r3, #4]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff fed9 	bl	8006c3e <USBD_CoreFindIF>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
 8006e92:	2bff      	cmp	r3, #255	; 0xff
 8006e94:	d01d      	beq.n	8006ed2 <USBD_StdItfReq+0x92>
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d11a      	bne.n	8006ed2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006e9c:	7bba      	ldrb	r2, [r7, #14]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	32ae      	adds	r2, #174	; 0xae
 8006ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00f      	beq.n	8006ecc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006eac:	7bba      	ldrb	r2, [r7, #14]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006eb4:	7bba      	ldrb	r2, [r7, #14]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	32ae      	adds	r2, #174	; 0xae
 8006eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	4798      	blx	r3
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006eca:	e004      	b.n	8006ed6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006ed0:	e001      	b.n	8006ed6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	88db      	ldrh	r3, [r3, #6]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d110      	bne.n	8006f00 <USBD_StdItfReq+0xc0>
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10d      	bne.n	8006f00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fdc7 	bl	8007a78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006eea:	e009      	b.n	8006f00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fcf7 	bl	80078e2 <USBD_CtlError>
          break;
 8006ef4:	e004      	b.n	8006f00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fcf2 	bl	80078e2 <USBD_CtlError>
          break;
 8006efe:	e000      	b.n	8006f02 <USBD_StdItfReq+0xc2>
          break;
 8006f00:	bf00      	nop
      }
      break;
 8006f02:	e004      	b.n	8006f0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fceb 	bl	80078e2 <USBD_CtlError>
      break;
 8006f0c:	bf00      	nop
  }

  return ret;
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	889b      	ldrh	r3, [r3, #4]
 8006f2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f34:	2b40      	cmp	r3, #64	; 0x40
 8006f36:	d007      	beq.n	8006f48 <USBD_StdEPReq+0x30>
 8006f38:	2b40      	cmp	r3, #64	; 0x40
 8006f3a:	f200 817f 	bhi.w	800723c <USBD_StdEPReq+0x324>
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d02a      	beq.n	8006f98 <USBD_StdEPReq+0x80>
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	f040 817a 	bne.w	800723c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f48:	7bbb      	ldrb	r3, [r7, #14]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff fe83 	bl	8006c58 <USBD_CoreFindEP>
 8006f52:	4603      	mov	r3, r0
 8006f54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f56:	7b7b      	ldrb	r3, [r7, #13]
 8006f58:	2bff      	cmp	r3, #255	; 0xff
 8006f5a:	f000 8174 	beq.w	8007246 <USBD_StdEPReq+0x32e>
 8006f5e:	7b7b      	ldrb	r3, [r7, #13]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f040 8170 	bne.w	8007246 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006f66:	7b7a      	ldrb	r2, [r7, #13]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006f6e:	7b7a      	ldrb	r2, [r7, #13]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	32ae      	adds	r2, #174	; 0xae
 8006f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 8163 	beq.w	8007246 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006f80:	7b7a      	ldrb	r2, [r7, #13]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	32ae      	adds	r2, #174	; 0xae
 8006f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f96:	e156      	b.n	8007246 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d008      	beq.n	8006fb2 <USBD_StdEPReq+0x9a>
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	f300 8145 	bgt.w	8007230 <USBD_StdEPReq+0x318>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 809b 	beq.w	80070e2 <USBD_StdEPReq+0x1ca>
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d03c      	beq.n	800702a <USBD_StdEPReq+0x112>
 8006fb0:	e13e      	b.n	8007230 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d002      	beq.n	8006fc4 <USBD_StdEPReq+0xac>
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d016      	beq.n	8006ff0 <USBD_StdEPReq+0xd8>
 8006fc2:	e02c      	b.n	800701e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00d      	beq.n	8006fe6 <USBD_StdEPReq+0xce>
 8006fca:	7bbb      	ldrb	r3, [r7, #14]
 8006fcc:	2b80      	cmp	r3, #128	; 0x80
 8006fce:	d00a      	beq.n	8006fe6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 f9b1 	bl	800833c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fda:	2180      	movs	r1, #128	; 0x80
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 f9ad 	bl	800833c <USBD_LL_StallEP>
 8006fe2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fe4:	e020      	b.n	8007028 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fc7a 	bl	80078e2 <USBD_CtlError>
              break;
 8006fee:	e01b      	b.n	8007028 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	885b      	ldrh	r3, [r3, #2]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10e      	bne.n	8007016 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <USBD_StdEPReq+0xfe>
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	2b80      	cmp	r3, #128	; 0x80
 8007002:	d008      	beq.n	8007016 <USBD_StdEPReq+0xfe>
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	88db      	ldrh	r3, [r3, #6]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d104      	bne.n	8007016 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 f993 	bl	800833c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fd2e 	bl	8007a78 <USBD_CtlSendStatus>

              break;
 800701c:	e004      	b.n	8007028 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fc5e 	bl	80078e2 <USBD_CtlError>
              break;
 8007026:	bf00      	nop
          }
          break;
 8007028:	e107      	b.n	800723a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b02      	cmp	r3, #2
 8007034:	d002      	beq.n	800703c <USBD_StdEPReq+0x124>
 8007036:	2b03      	cmp	r3, #3
 8007038:	d016      	beq.n	8007068 <USBD_StdEPReq+0x150>
 800703a:	e04b      	b.n	80070d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00d      	beq.n	800705e <USBD_StdEPReq+0x146>
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	2b80      	cmp	r3, #128	; 0x80
 8007046:	d00a      	beq.n	800705e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f001 f975 	bl	800833c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007052:	2180      	movs	r1, #128	; 0x80
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 f971 	bl	800833c <USBD_LL_StallEP>
 800705a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800705c:	e040      	b.n	80070e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fc3e 	bl	80078e2 <USBD_CtlError>
              break;
 8007066:	e03b      	b.n	80070e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	885b      	ldrh	r3, [r3, #2]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d136      	bne.n	80070de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007076:	2b00      	cmp	r3, #0
 8007078:	d004      	beq.n	8007084 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 f97b 	bl	800837a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fcf7 	bl	8007a78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800708a:	7bbb      	ldrb	r3, [r7, #14]
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff fde2 	bl	8006c58 <USBD_CoreFindEP>
 8007094:	4603      	mov	r3, r0
 8007096:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007098:	7b7b      	ldrb	r3, [r7, #13]
 800709a:	2bff      	cmp	r3, #255	; 0xff
 800709c:	d01f      	beq.n	80070de <USBD_StdEPReq+0x1c6>
 800709e:	7b7b      	ldrb	r3, [r7, #13]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d11c      	bne.n	80070de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80070a4:	7b7a      	ldrb	r2, [r7, #13]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80070ac:	7b7a      	ldrb	r2, [r7, #13]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	32ae      	adds	r2, #174	; 0xae
 80070b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d010      	beq.n	80070de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80070bc:	7b7a      	ldrb	r2, [r7, #13]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	32ae      	adds	r2, #174	; 0xae
 80070c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
 80070ce:	4603      	mov	r3, r0
 80070d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80070d2:	e004      	b.n	80070de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fc03 	bl	80078e2 <USBD_CtlError>
              break;
 80070dc:	e000      	b.n	80070e0 <USBD_StdEPReq+0x1c8>
              break;
 80070de:	bf00      	nop
          }
          break;
 80070e0:	e0ab      	b.n	800723a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d002      	beq.n	80070f4 <USBD_StdEPReq+0x1dc>
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d032      	beq.n	8007158 <USBD_StdEPReq+0x240>
 80070f2:	e097      	b.n	8007224 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d007      	beq.n	800710a <USBD_StdEPReq+0x1f2>
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	2b80      	cmp	r3, #128	; 0x80
 80070fe:	d004      	beq.n	800710a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fbed 	bl	80078e2 <USBD_CtlError>
                break;
 8007108:	e091      	b.n	800722e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800710a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800710e:	2b00      	cmp	r3, #0
 8007110:	da0b      	bge.n	800712a <USBD_StdEPReq+0x212>
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007118:	4613      	mov	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	3310      	adds	r3, #16
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	4413      	add	r3, r2
 8007126:	3304      	adds	r3, #4
 8007128:	e00b      	b.n	8007142 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007130:	4613      	mov	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	4413      	add	r3, r2
 8007140:	3304      	adds	r3, #4
 8007142:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2202      	movs	r2, #2
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fc37 	bl	80079c4 <USBD_CtlSendData>
              break;
 8007156:	e06a      	b.n	800722e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800715c:	2b00      	cmp	r3, #0
 800715e:	da11      	bge.n	8007184 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	f003 020f 	and.w	r2, r3, #15
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	440b      	add	r3, r1
 8007172:	3324      	adds	r3, #36	; 0x24
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d117      	bne.n	80071aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fbb0 	bl	80078e2 <USBD_CtlError>
                  break;
 8007182:	e054      	b.n	800722e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	f003 020f 	and.w	r2, r3, #15
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	4613      	mov	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	440b      	add	r3, r1
 8007196:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d104      	bne.n	80071aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fb9d 	bl	80078e2 <USBD_CtlError>
                  break;
 80071a8:	e041      	b.n	800722e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	da0b      	bge.n	80071ca <USBD_StdEPReq+0x2b2>
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
 80071b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071b8:	4613      	mov	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	3310      	adds	r3, #16
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	4413      	add	r3, r2
 80071c6:	3304      	adds	r3, #4
 80071c8:	e00b      	b.n	80071e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071ca:	7bbb      	ldrb	r3, [r7, #14]
 80071cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	4413      	add	r3, r2
 80071e0:	3304      	adds	r3, #4
 80071e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80071e4:	7bbb      	ldrb	r3, [r7, #14]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <USBD_StdEPReq+0x2d8>
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	2b80      	cmp	r3, #128	; 0x80
 80071ee:	d103      	bne.n	80071f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	e00e      	b.n	8007216 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 f8db 	bl	80083b8 <USBD_LL_IsStallEP>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2201      	movs	r2, #1
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	e002      	b.n	8007216 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2202      	movs	r2, #2
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fbd1 	bl	80079c4 <USBD_CtlSendData>
              break;
 8007222:	e004      	b.n	800722e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fb5b 	bl	80078e2 <USBD_CtlError>
              break;
 800722c:	bf00      	nop
          }
          break;
 800722e:	e004      	b.n	800723a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fb55 	bl	80078e2 <USBD_CtlError>
          break;
 8007238:	bf00      	nop
      }
      break;
 800723a:	e005      	b.n	8007248 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fb4f 	bl	80078e2 <USBD_CtlError>
      break;
 8007244:	e000      	b.n	8007248 <USBD_StdEPReq+0x330>
      break;
 8007246:	bf00      	nop
  }

  return ret;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	885b      	ldrh	r3, [r3, #2]
 800726e:	0a1b      	lsrs	r3, r3, #8
 8007270:	b29b      	uxth	r3, r3
 8007272:	3b01      	subs	r3, #1
 8007274:	2b06      	cmp	r3, #6
 8007276:	f200 8128 	bhi.w	80074ca <USBD_GetDescriptor+0x276>
 800727a:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <USBD_GetDescriptor+0x2c>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	0800729d 	.word	0x0800729d
 8007284:	080072b5 	.word	0x080072b5
 8007288:	080072f5 	.word	0x080072f5
 800728c:	080074cb 	.word	0x080074cb
 8007290:	080074cb 	.word	0x080074cb
 8007294:	0800746b 	.word	0x0800746b
 8007298:	08007497 	.word	0x08007497
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	7c12      	ldrb	r2, [r2, #16]
 80072a8:	f107 0108 	add.w	r1, r7, #8
 80072ac:	4610      	mov	r0, r2
 80072ae:	4798      	blx	r3
 80072b0:	60f8      	str	r0, [r7, #12]
      break;
 80072b2:	e112      	b.n	80074da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	7c1b      	ldrb	r3, [r3, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10d      	bne.n	80072d8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c4:	f107 0208 	add.w	r2, r7, #8
 80072c8:	4610      	mov	r0, r2
 80072ca:	4798      	blx	r3
 80072cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3301      	adds	r3, #1
 80072d2:	2202      	movs	r2, #2
 80072d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80072d6:	e100      	b.n	80074da <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	f107 0208 	add.w	r2, r7, #8
 80072e4:	4610      	mov	r0, r2
 80072e6:	4798      	blx	r3
 80072e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3301      	adds	r3, #1
 80072ee:	2202      	movs	r2, #2
 80072f0:	701a      	strb	r2, [r3, #0]
      break;
 80072f2:	e0f2      	b.n	80074da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	885b      	ldrh	r3, [r3, #2]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b05      	cmp	r3, #5
 80072fc:	f200 80ac 	bhi.w	8007458 <USBD_GetDescriptor+0x204>
 8007300:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <USBD_GetDescriptor+0xb4>)
 8007302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007306:	bf00      	nop
 8007308:	08007321 	.word	0x08007321
 800730c:	08007355 	.word	0x08007355
 8007310:	08007389 	.word	0x08007389
 8007314:	080073bd 	.word	0x080073bd
 8007318:	080073f1 	.word	0x080073f1
 800731c:	08007425 	.word	0x08007425
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	7c12      	ldrb	r2, [r2, #16]
 8007338:	f107 0108 	add.w	r1, r7, #8
 800733c:	4610      	mov	r0, r2
 800733e:	4798      	blx	r3
 8007340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007342:	e091      	b.n	8007468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 facb 	bl	80078e2 <USBD_CtlError>
            err++;
 800734c:	7afb      	ldrb	r3, [r7, #11]
 800734e:	3301      	adds	r3, #1
 8007350:	72fb      	strb	r3, [r7, #11]
          break;
 8007352:	e089      	b.n	8007468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00b      	beq.n	8007378 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	7c12      	ldrb	r2, [r2, #16]
 800736c:	f107 0108 	add.w	r1, r7, #8
 8007370:	4610      	mov	r0, r2
 8007372:	4798      	blx	r3
 8007374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007376:	e077      	b.n	8007468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fab1 	bl	80078e2 <USBD_CtlError>
            err++;
 8007380:	7afb      	ldrb	r3, [r7, #11]
 8007382:	3301      	adds	r3, #1
 8007384:	72fb      	strb	r3, [r7, #11]
          break;
 8007386:	e06f      	b.n	8007468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00b      	beq.n	80073ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	7c12      	ldrb	r2, [r2, #16]
 80073a0:	f107 0108 	add.w	r1, r7, #8
 80073a4:	4610      	mov	r0, r2
 80073a6:	4798      	blx	r3
 80073a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073aa:	e05d      	b.n	8007468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fa97 	bl	80078e2 <USBD_CtlError>
            err++;
 80073b4:	7afb      	ldrb	r3, [r7, #11]
 80073b6:	3301      	adds	r3, #1
 80073b8:	72fb      	strb	r3, [r7, #11]
          break;
 80073ba:	e055      	b.n	8007468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00b      	beq.n	80073e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	7c12      	ldrb	r2, [r2, #16]
 80073d4:	f107 0108 	add.w	r1, r7, #8
 80073d8:	4610      	mov	r0, r2
 80073da:	4798      	blx	r3
 80073dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073de:	e043      	b.n	8007468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa7d 	bl	80078e2 <USBD_CtlError>
            err++;
 80073e8:	7afb      	ldrb	r3, [r7, #11]
 80073ea:	3301      	adds	r3, #1
 80073ec:	72fb      	strb	r3, [r7, #11]
          break;
 80073ee:	e03b      	b.n	8007468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00b      	beq.n	8007414 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	7c12      	ldrb	r2, [r2, #16]
 8007408:	f107 0108 	add.w	r1, r7, #8
 800740c:	4610      	mov	r0, r2
 800740e:	4798      	blx	r3
 8007410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007412:	e029      	b.n	8007468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa63 	bl	80078e2 <USBD_CtlError>
            err++;
 800741c:	7afb      	ldrb	r3, [r7, #11]
 800741e:	3301      	adds	r3, #1
 8007420:	72fb      	strb	r3, [r7, #11]
          break;
 8007422:	e021      	b.n	8007468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00b      	beq.n	8007448 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	7c12      	ldrb	r2, [r2, #16]
 800743c:	f107 0108 	add.w	r1, r7, #8
 8007440:	4610      	mov	r0, r2
 8007442:	4798      	blx	r3
 8007444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007446:	e00f      	b.n	8007468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fa49 	bl	80078e2 <USBD_CtlError>
            err++;
 8007450:	7afb      	ldrb	r3, [r7, #11]
 8007452:	3301      	adds	r3, #1
 8007454:	72fb      	strb	r3, [r7, #11]
          break;
 8007456:	e007      	b.n	8007468 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa41 	bl	80078e2 <USBD_CtlError>
          err++;
 8007460:	7afb      	ldrb	r3, [r7, #11]
 8007462:	3301      	adds	r3, #1
 8007464:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007466:	bf00      	nop
      }
      break;
 8007468:	e037      	b.n	80074da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	7c1b      	ldrb	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d109      	bne.n	8007486 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800747a:	f107 0208 	add.w	r2, r7, #8
 800747e:	4610      	mov	r0, r2
 8007480:	4798      	blx	r3
 8007482:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007484:	e029      	b.n	80074da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fa2a 	bl	80078e2 <USBD_CtlError>
        err++;
 800748e:	7afb      	ldrb	r3, [r7, #11]
 8007490:	3301      	adds	r3, #1
 8007492:	72fb      	strb	r3, [r7, #11]
      break;
 8007494:	e021      	b.n	80074da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	7c1b      	ldrb	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10d      	bne.n	80074ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a6:	f107 0208 	add.w	r2, r7, #8
 80074aa:	4610      	mov	r0, r2
 80074ac:	4798      	blx	r3
 80074ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	3301      	adds	r3, #1
 80074b4:	2207      	movs	r2, #7
 80074b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074b8:	e00f      	b.n	80074da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fa10 	bl	80078e2 <USBD_CtlError>
        err++;
 80074c2:	7afb      	ldrb	r3, [r7, #11]
 80074c4:	3301      	adds	r3, #1
 80074c6:	72fb      	strb	r3, [r7, #11]
      break;
 80074c8:	e007      	b.n	80074da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fa08 	bl	80078e2 <USBD_CtlError>
      err++;
 80074d2:	7afb      	ldrb	r3, [r7, #11]
 80074d4:	3301      	adds	r3, #1
 80074d6:	72fb      	strb	r3, [r7, #11]
      break;
 80074d8:	bf00      	nop
  }

  if (err != 0U)
 80074da:	7afb      	ldrb	r3, [r7, #11]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d11e      	bne.n	800751e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	88db      	ldrh	r3, [r3, #6]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d016      	beq.n	8007516 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80074e8:	893b      	ldrh	r3, [r7, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00e      	beq.n	800750c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	88da      	ldrh	r2, [r3, #6]
 80074f2:	893b      	ldrh	r3, [r7, #8]
 80074f4:	4293      	cmp	r3, r2
 80074f6:	bf28      	it	cs
 80074f8:	4613      	movcs	r3, r2
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80074fe:	893b      	ldrh	r3, [r7, #8]
 8007500:	461a      	mov	r2, r3
 8007502:	68f9      	ldr	r1, [r7, #12]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fa5d 	bl	80079c4 <USBD_CtlSendData>
 800750a:	e009      	b.n	8007520 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f9e7 	bl	80078e2 <USBD_CtlError>
 8007514:	e004      	b.n	8007520 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 faae 	bl	8007a78 <USBD_CtlSendStatus>
 800751c:	e000      	b.n	8007520 <USBD_GetDescriptor+0x2cc>
    return;
 800751e:	bf00      	nop
  }
}
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop

08007528 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	889b      	ldrh	r3, [r3, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d131      	bne.n	800759e <USBD_SetAddress+0x76>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	88db      	ldrh	r3, [r3, #6]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d12d      	bne.n	800759e <USBD_SetAddress+0x76>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	885b      	ldrh	r3, [r3, #2]
 8007546:	2b7f      	cmp	r3, #127	; 0x7f
 8007548:	d829      	bhi.n	800759e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	885b      	ldrh	r3, [r3, #2]
 800754e:	b2db      	uxtb	r3, r3
 8007550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007554:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b03      	cmp	r3, #3
 8007560:	d104      	bne.n	800756c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f9bc 	bl	80078e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800756a:	e01d      	b.n	80075a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	7bfa      	ldrb	r2, [r7, #15]
 8007570:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 ff49 	bl	8008410 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fa7a 	bl	8007a78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d004      	beq.n	8007594 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2202      	movs	r2, #2
 800758e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007592:	e009      	b.n	80075a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800759c:	e004      	b.n	80075a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f99e 	bl	80078e2 <USBD_CtlError>
  }
}
 80075a6:	bf00      	nop
 80075a8:	bf00      	nop
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	885b      	ldrh	r3, [r3, #2]
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	4b4e      	ldr	r3, [pc, #312]	; (8007700 <USBD_SetConfig+0x150>)
 80075c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075c8:	4b4d      	ldr	r3, [pc, #308]	; (8007700 <USBD_SetConfig+0x150>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d905      	bls.n	80075dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f985 	bl	80078e2 <USBD_CtlError>
    return USBD_FAIL;
 80075d8:	2303      	movs	r3, #3
 80075da:	e08c      	b.n	80076f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d002      	beq.n	80075ee <USBD_SetConfig+0x3e>
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	d029      	beq.n	8007640 <USBD_SetConfig+0x90>
 80075ec:	e075      	b.n	80076da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80075ee:	4b44      	ldr	r3, [pc, #272]	; (8007700 <USBD_SetConfig+0x150>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d020      	beq.n	8007638 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80075f6:	4b42      	ldr	r3, [pc, #264]	; (8007700 <USBD_SetConfig+0x150>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007600:	4b3f      	ldr	r3, [pc, #252]	; (8007700 <USBD_SetConfig+0x150>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fe ffe7 	bl	80065da <USBD_SetClassConfig>
 800760c:	4603      	mov	r3, r0
 800760e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f962 	bl	80078e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2202      	movs	r2, #2
 8007622:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007626:	e065      	b.n	80076f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fa25 	bl	8007a78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2203      	movs	r2, #3
 8007632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007636:	e05d      	b.n	80076f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fa1d 	bl	8007a78 <USBD_CtlSendStatus>
      break;
 800763e:	e059      	b.n	80076f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007640:	4b2f      	ldr	r3, [pc, #188]	; (8007700 <USBD_SetConfig+0x150>)
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d112      	bne.n	800766e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007650:	4b2b      	ldr	r3, [pc, #172]	; (8007700 <USBD_SetConfig+0x150>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800765a:	4b29      	ldr	r3, [pc, #164]	; (8007700 <USBD_SetConfig+0x150>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7fe ffd6 	bl	8006612 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa06 	bl	8007a78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800766c:	e042      	b.n	80076f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800766e:	4b24      	ldr	r3, [pc, #144]	; (8007700 <USBD_SetConfig+0x150>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	429a      	cmp	r2, r3
 800767a:	d02a      	beq.n	80076d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7fe ffc4 	bl	8006612 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800768a:	4b1d      	ldr	r3, [pc, #116]	; (8007700 <USBD_SetConfig+0x150>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007694:	4b1a      	ldr	r3, [pc, #104]	; (8007700 <USBD_SetConfig+0x150>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7fe ff9d 	bl	80065da <USBD_SetClassConfig>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00f      	beq.n	80076ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f918 	bl	80078e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fe ffa9 	bl	8006612 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80076c8:	e014      	b.n	80076f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f9d4 	bl	8007a78 <USBD_CtlSendStatus>
      break;
 80076d0:	e010      	b.n	80076f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f9d0 	bl	8007a78 <USBD_CtlSendStatus>
      break;
 80076d8:	e00c      	b.n	80076f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f900 	bl	80078e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076e2:	4b07      	ldr	r3, [pc, #28]	; (8007700 <USBD_SetConfig+0x150>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7fe ff92 	bl	8006612 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80076ee:	2303      	movs	r3, #3
 80076f0:	73fb      	strb	r3, [r7, #15]
      break;
 80076f2:	bf00      	nop
  }

  return ret;
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	2000091c 	.word	0x2000091c

08007704 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	88db      	ldrh	r3, [r3, #6]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d004      	beq.n	8007720 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f8e2 	bl	80078e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800771e:	e023      	b.n	8007768 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	dc02      	bgt.n	8007732 <USBD_GetConfig+0x2e>
 800772c:	2b00      	cmp	r3, #0
 800772e:	dc03      	bgt.n	8007738 <USBD_GetConfig+0x34>
 8007730:	e015      	b.n	800775e <USBD_GetConfig+0x5a>
 8007732:	2b03      	cmp	r3, #3
 8007734:	d00b      	beq.n	800774e <USBD_GetConfig+0x4a>
 8007736:	e012      	b.n	800775e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3308      	adds	r3, #8
 8007742:	2201      	movs	r2, #1
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f93c 	bl	80079c4 <USBD_CtlSendData>
        break;
 800774c:	e00c      	b.n	8007768 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	3304      	adds	r3, #4
 8007752:	2201      	movs	r2, #1
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f934 	bl	80079c4 <USBD_CtlSendData>
        break;
 800775c:	e004      	b.n	8007768 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f8be 	bl	80078e2 <USBD_CtlError>
        break;
 8007766:	bf00      	nop
}
 8007768:	bf00      	nop
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007780:	b2db      	uxtb	r3, r3
 8007782:	3b01      	subs	r3, #1
 8007784:	2b02      	cmp	r3, #2
 8007786:	d81e      	bhi.n	80077c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	88db      	ldrh	r3, [r3, #6]
 800778c:	2b02      	cmp	r3, #2
 800778e:	d004      	beq.n	800779a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f8a5 	bl	80078e2 <USBD_CtlError>
        break;
 8007798:	e01a      	b.n	80077d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d005      	beq.n	80077b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f043 0202 	orr.w	r2, r3, #2
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	330c      	adds	r3, #12
 80077ba:	2202      	movs	r2, #2
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f900 	bl	80079c4 <USBD_CtlSendData>
      break;
 80077c4:	e004      	b.n	80077d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f88a 	bl	80078e2 <USBD_CtlError>
      break;
 80077ce:	bf00      	nop
  }
}
 80077d0:	bf00      	nop
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	885b      	ldrh	r3, [r3, #2]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d107      	bne.n	80077fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f940 	bl	8007a78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80077f8:	e013      	b.n	8007822 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	885b      	ldrh	r3, [r3, #2]
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d10b      	bne.n	800781a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	889b      	ldrh	r3, [r3, #4]
 8007806:	0a1b      	lsrs	r3, r3, #8
 8007808:	b29b      	uxth	r3, r3
 800780a:	b2da      	uxtb	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f930 	bl	8007a78 <USBD_CtlSendStatus>
}
 8007818:	e003      	b.n	8007822 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f860 	bl	80078e2 <USBD_CtlError>
}
 8007822:	bf00      	nop
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800783a:	b2db      	uxtb	r3, r3
 800783c:	3b01      	subs	r3, #1
 800783e:	2b02      	cmp	r3, #2
 8007840:	d80b      	bhi.n	800785a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	885b      	ldrh	r3, [r3, #2]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d10c      	bne.n	8007864 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f910 	bl	8007a78 <USBD_CtlSendStatus>
      }
      break;
 8007858:	e004      	b.n	8007864 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f840 	bl	80078e2 <USBD_CtlError>
      break;
 8007862:	e000      	b.n	8007866 <USBD_ClrFeature+0x3c>
      break;
 8007864:	bf00      	nop
  }
}
 8007866:	bf00      	nop
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	781a      	ldrb	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3301      	adds	r3, #1
 8007888:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	781a      	ldrb	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3301      	adds	r3, #1
 8007896:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f7ff fa41 	bl	8006d20 <SWAPBYTE>
 800789e:	4603      	mov	r3, r0
 80078a0:	461a      	mov	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3301      	adds	r3, #1
 80078aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3301      	adds	r3, #1
 80078b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f7ff fa34 	bl	8006d20 <SWAPBYTE>
 80078b8:	4603      	mov	r3, r0
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3301      	adds	r3, #1
 80078c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3301      	adds	r3, #1
 80078ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f7ff fa27 	bl	8006d20 <SWAPBYTE>
 80078d2:	4603      	mov	r3, r0
 80078d4:	461a      	mov	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	80da      	strh	r2, [r3, #6]
}
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b082      	sub	sp, #8
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80078ec:	2180      	movs	r1, #128	; 0x80
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fd24 	bl	800833c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80078f4:	2100      	movs	r1, #0
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fd20 	bl	800833c <USBD_LL_StallEP>
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d036      	beq.n	8007988 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800791e:	6938      	ldr	r0, [r7, #16]
 8007920:	f000 f836 	bl	8007990 <USBD_GetLen>
 8007924:	4603      	mov	r3, r0
 8007926:	3301      	adds	r3, #1
 8007928:	b29b      	uxth	r3, r3
 800792a:	005b      	lsls	r3, r3, #1
 800792c:	b29a      	uxth	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007932:	7dfb      	ldrb	r3, [r7, #23]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	4413      	add	r3, r2
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	7812      	ldrb	r2, [r2, #0]
 800793c:	701a      	strb	r2, [r3, #0]
  idx++;
 800793e:	7dfb      	ldrb	r3, [r7, #23]
 8007940:	3301      	adds	r3, #1
 8007942:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007944:	7dfb      	ldrb	r3, [r7, #23]
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	4413      	add	r3, r2
 800794a:	2203      	movs	r2, #3
 800794c:	701a      	strb	r2, [r3, #0]
  idx++;
 800794e:	7dfb      	ldrb	r3, [r7, #23]
 8007950:	3301      	adds	r3, #1
 8007952:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007954:	e013      	b.n	800797e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007956:	7dfb      	ldrb	r3, [r7, #23]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	4413      	add	r3, r2
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	7812      	ldrb	r2, [r2, #0]
 8007960:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	3301      	adds	r3, #1
 8007966:	613b      	str	r3, [r7, #16]
    idx++;
 8007968:	7dfb      	ldrb	r3, [r7, #23]
 800796a:	3301      	adds	r3, #1
 800796c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	4413      	add	r3, r2
 8007974:	2200      	movs	r2, #0
 8007976:	701a      	strb	r2, [r3, #0]
    idx++;
 8007978:	7dfb      	ldrb	r3, [r7, #23]
 800797a:	3301      	adds	r3, #1
 800797c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e7      	bne.n	8007956 <USBD_GetString+0x52>
 8007986:	e000      	b.n	800798a <USBD_GetString+0x86>
    return;
 8007988:	bf00      	nop
  }
}
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80079a0:	e005      	b.n	80079ae <USBD_GetLen+0x1e>
  {
    len++;
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	3301      	adds	r3, #1
 80079a6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1f5      	bne.n	80079a2 <USBD_GetLen+0x12>
  }

  return len;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	2100      	movs	r1, #0
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 fd2f 	bl	800844e <USBD_LL_Transmit>

  return USBD_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	60b9      	str	r1, [r7, #8]
 8007a04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 fd1e 	bl	800844e <USBD_LL_Transmit>

  return USBD_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2203      	movs	r2, #3
 8007a2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	2100      	movs	r1, #0
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f000 fd22 	bl	8008490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	60f8      	str	r0, [r7, #12]
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	2100      	movs	r1, #0
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 fd11 	bl	8008490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2204      	movs	r2, #4
 8007a84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a88:	2300      	movs	r3, #0
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fcdd 	bl	800844e <USBD_LL_Transmit>

  return USBD_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2205      	movs	r2, #5
 8007aaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007aae:	2300      	movs	r3, #0
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fceb 	bl	8008490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	4912      	ldr	r1, [pc, #72]	; (8007b14 <MX_USB_DEVICE_Init+0x50>)
 8007acc:	4812      	ldr	r0, [pc, #72]	; (8007b18 <MX_USB_DEVICE_Init+0x54>)
 8007ace:	f7fe fd07 	bl	80064e0 <USBD_Init>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ad8:	f7f8 ff96 	bl	8000a08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007adc:	490f      	ldr	r1, [pc, #60]	; (8007b1c <MX_USB_DEVICE_Init+0x58>)
 8007ade:	480e      	ldr	r0, [pc, #56]	; (8007b18 <MX_USB_DEVICE_Init+0x54>)
 8007ae0:	f7fe fd2e 	bl	8006540 <USBD_RegisterClass>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007aea:	f7f8 ff8d 	bl	8000a08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007aee:	490c      	ldr	r1, [pc, #48]	; (8007b20 <MX_USB_DEVICE_Init+0x5c>)
 8007af0:	4809      	ldr	r0, [pc, #36]	; (8007b18 <MX_USB_DEVICE_Init+0x54>)
 8007af2:	f7fe fc1f 	bl	8006334 <USBD_CDC_RegisterInterface>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007afc:	f7f8 ff84 	bl	8000a08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b00:	4805      	ldr	r0, [pc, #20]	; (8007b18 <MX_USB_DEVICE_Init+0x54>)
 8007b02:	f7fe fd53 	bl	80065ac <USBD_Start>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b0c:	f7f8 ff7c 	bl	8000a08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b10:	bf00      	nop
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	200000ac 	.word	0x200000ac
 8007b18:	20000920 	.word	0x20000920
 8007b1c:	20000018 	.word	0x20000018
 8007b20:	20000098 	.word	0x20000098

08007b24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4905      	ldr	r1, [pc, #20]	; (8007b40 <CDC_Init_FS+0x1c>)
 8007b2c:	4805      	ldr	r0, [pc, #20]	; (8007b44 <CDC_Init_FS+0x20>)
 8007b2e:	f7fe fc1b 	bl	8006368 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b32:	4905      	ldr	r1, [pc, #20]	; (8007b48 <CDC_Init_FS+0x24>)
 8007b34:	4803      	ldr	r0, [pc, #12]	; (8007b44 <CDC_Init_FS+0x20>)
 8007b36:	f7fe fc39 	bl	80063ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007b3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	200013fc 	.word	0x200013fc
 8007b44:	20000920 	.word	0x20000920
 8007b48:	20000bfc 	.word	0x20000bfc

08007b4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007b50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	4603      	mov	r3, r0
 8007b64:	6039      	str	r1, [r7, #0]
 8007b66:	71fb      	strb	r3, [r7, #7]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	2b23      	cmp	r3, #35	; 0x23
 8007b70:	d84a      	bhi.n	8007c08 <CDC_Control_FS+0xac>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <CDC_Control_FS+0x1c>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007c09 	.word	0x08007c09
 8007b7c:	08007c09 	.word	0x08007c09
 8007b80:	08007c09 	.word	0x08007c09
 8007b84:	08007c09 	.word	0x08007c09
 8007b88:	08007c09 	.word	0x08007c09
 8007b8c:	08007c09 	.word	0x08007c09
 8007b90:	08007c09 	.word	0x08007c09
 8007b94:	08007c09 	.word	0x08007c09
 8007b98:	08007c09 	.word	0x08007c09
 8007b9c:	08007c09 	.word	0x08007c09
 8007ba0:	08007c09 	.word	0x08007c09
 8007ba4:	08007c09 	.word	0x08007c09
 8007ba8:	08007c09 	.word	0x08007c09
 8007bac:	08007c09 	.word	0x08007c09
 8007bb0:	08007c09 	.word	0x08007c09
 8007bb4:	08007c09 	.word	0x08007c09
 8007bb8:	08007c09 	.word	0x08007c09
 8007bbc:	08007c09 	.word	0x08007c09
 8007bc0:	08007c09 	.word	0x08007c09
 8007bc4:	08007c09 	.word	0x08007c09
 8007bc8:	08007c09 	.word	0x08007c09
 8007bcc:	08007c09 	.word	0x08007c09
 8007bd0:	08007c09 	.word	0x08007c09
 8007bd4:	08007c09 	.word	0x08007c09
 8007bd8:	08007c09 	.word	0x08007c09
 8007bdc:	08007c09 	.word	0x08007c09
 8007be0:	08007c09 	.word	0x08007c09
 8007be4:	08007c09 	.word	0x08007c09
 8007be8:	08007c09 	.word	0x08007c09
 8007bec:	08007c09 	.word	0x08007c09
 8007bf0:	08007c09 	.word	0x08007c09
 8007bf4:	08007c09 	.word	0x08007c09
 8007bf8:	08007c09 	.word	0x08007c09
 8007bfc:	08007c09 	.word	0x08007c09
 8007c00:	08007c09 	.word	0x08007c09
 8007c04:	08007c09 	.word	0x08007c09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007c08:	bf00      	nop
  }

  return (USBD_OK);
 8007c0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8007c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007c26:	481d      	ldr	r0, [pc, #116]	; (8007c9c <CDC_Receive_FS+0x84>)
 8007c28:	f7f9 fc6d 	bl	8001506 <HAL_GPIO_TogglePin>
	for (int i=0; i<*Len; i++)
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	e022      	b.n	8007c78 <CDC_Receive_FS+0x60>
	{
		AiInput[InputPos] = Buf[i];
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	4413      	add	r3, r2
 8007c38:	4a19      	ldr	r2, [pc, #100]	; (8007ca0 <CDC_Receive_FS+0x88>)
 8007c3a:	8812      	ldrh	r2, [r2, #0]
 8007c3c:	7819      	ldrb	r1, [r3, #0]
 8007c3e:	4b19      	ldr	r3, [pc, #100]	; (8007ca4 <CDC_Receive_FS+0x8c>)
 8007c40:	5499      	strb	r1, [r3, r2]
		InputPos += 1;
 8007c42:	4b17      	ldr	r3, [pc, #92]	; (8007ca0 <CDC_Receive_FS+0x88>)
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	3301      	adds	r3, #1
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	4b15      	ldr	r3, [pc, #84]	; (8007ca0 <CDC_Receive_FS+0x88>)
 8007c4c:	801a      	strh	r2, [r3, #0]
		if (InputPos == 784)
 8007c4e:	4b14      	ldr	r3, [pc, #80]	; (8007ca0 <CDC_Receive_FS+0x88>)
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8007c56:	d103      	bne.n	8007c60 <CDC_Receive_FS+0x48>
		{
			InputPos = 0;
 8007c58:	4b11      	ldr	r3, [pc, #68]	; (8007ca0 <CDC_Receive_FS+0x88>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	801a      	strh	r2, [r3, #0]
			break;
 8007c5e:	e010      	b.n	8007c82 <CDC_Receive_FS+0x6a>
		} else if (InputPos > 784){
 8007c60:	4b0f      	ldr	r3, [pc, #60]	; (8007ca0 <CDC_Receive_FS+0x88>)
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8007c68:	d903      	bls.n	8007c72 <CDC_Receive_FS+0x5a>
			InputPos = 0;
 8007c6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ca0 <CDC_Receive_FS+0x88>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	801a      	strh	r2, [r3, #0]
			break;
 8007c70:	e007      	b.n	8007c82 <CDC_Receive_FS+0x6a>
	for (int i=0; i<*Len; i++)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	3301      	adds	r3, #1
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d8d7      	bhi.n	8007c32 <CDC_Receive_FS+0x1a>
		}
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	4808      	ldr	r0, [pc, #32]	; (8007ca8 <CDC_Receive_FS+0x90>)
 8007c86:	f7fe fb91 	bl	80063ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c8a:	4807      	ldr	r0, [pc, #28]	; (8007ca8 <CDC_Receive_FS+0x90>)
 8007c8c:	f7fe fbf2 	bl	8006474 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007c90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	40020c00 	.word	0x40020c00
 8007ca0:	20000912 	.word	0x20000912
 8007ca4:	200005f8 	.word	0x200005f8
 8007ca8:	20000920 	.word	0x20000920

08007cac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007cbc:	4b0d      	ldr	r3, [pc, #52]	; (8007cf4 <CDC_Transmit_FS+0x48>)
 8007cbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e00b      	b.n	8007cea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007cd2:	887b      	ldrh	r3, [r7, #2]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	4806      	ldr	r0, [pc, #24]	; (8007cf4 <CDC_Transmit_FS+0x48>)
 8007cda:	f7fe fb45 	bl	8006368 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007cde:	4805      	ldr	r0, [pc, #20]	; (8007cf4 <CDC_Transmit_FS+0x48>)
 8007ce0:	f7fe fb82 	bl	80063e8 <USBD_CDC_TransmitPacket>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000920 	.word	0x20000920

08007cf8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	4613      	mov	r3, r2
 8007d04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	371c      	adds	r7, #28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
	...

08007d1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	6039      	str	r1, [r7, #0]
 8007d26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2212      	movs	r2, #18
 8007d2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d2e:	4b03      	ldr	r3, [pc, #12]	; (8007d3c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	200000c8 	.word	0x200000c8

08007d40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	6039      	str	r1, [r7, #0]
 8007d4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2204      	movs	r2, #4
 8007d50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d52:	4b03      	ldr	r3, [pc, #12]	; (8007d60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	200000dc 	.word	0x200000dc

08007d64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	6039      	str	r1, [r7, #0]
 8007d6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d105      	bne.n	8007d82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	4907      	ldr	r1, [pc, #28]	; (8007d98 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d7a:	4808      	ldr	r0, [pc, #32]	; (8007d9c <USBD_FS_ProductStrDescriptor+0x38>)
 8007d7c:	f7ff fdc2 	bl	8007904 <USBD_GetString>
 8007d80:	e004      	b.n	8007d8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	4904      	ldr	r1, [pc, #16]	; (8007d98 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d86:	4805      	ldr	r0, [pc, #20]	; (8007d9c <USBD_FS_ProductStrDescriptor+0x38>)
 8007d88:	f7ff fdbc 	bl	8007904 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d8c:	4b02      	ldr	r3, [pc, #8]	; (8007d98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	20001bfc 	.word	0x20001bfc
 8007d9c:	0800bb00 	.word	0x0800bb00

08007da0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	4603      	mov	r3, r0
 8007da8:	6039      	str	r1, [r7, #0]
 8007daa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	4904      	ldr	r1, [pc, #16]	; (8007dc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007db0:	4804      	ldr	r0, [pc, #16]	; (8007dc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007db2:	f7ff fda7 	bl	8007904 <USBD_GetString>
  return USBD_StrDesc;
 8007db6:	4b02      	ldr	r3, [pc, #8]	; (8007dc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	20001bfc 	.word	0x20001bfc
 8007dc4:	0800bb18 	.word	0x0800bb18

08007dc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	6039      	str	r1, [r7, #0]
 8007dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	221a      	movs	r2, #26
 8007dd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007dda:	f000 f843 	bl	8007e64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007dde:	4b02      	ldr	r3, [pc, #8]	; (8007de8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	200000e0 	.word	0x200000e0

08007dec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	4603      	mov	r3, r0
 8007df4:	6039      	str	r1, [r7, #0]
 8007df6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007df8:	79fb      	ldrb	r3, [r7, #7]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d105      	bne.n	8007e0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	4907      	ldr	r1, [pc, #28]	; (8007e20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e02:	4808      	ldr	r0, [pc, #32]	; (8007e24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e04:	f7ff fd7e 	bl	8007904 <USBD_GetString>
 8007e08:	e004      	b.n	8007e14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	4904      	ldr	r1, [pc, #16]	; (8007e20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e0e:	4805      	ldr	r0, [pc, #20]	; (8007e24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e10:	f7ff fd78 	bl	8007904 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e14:	4b02      	ldr	r3, [pc, #8]	; (8007e20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20001bfc 	.word	0x20001bfc
 8007e24:	0800bb2c 	.word	0x0800bb2c

08007e28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	6039      	str	r1, [r7, #0]
 8007e32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d105      	bne.n	8007e46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	4907      	ldr	r1, [pc, #28]	; (8007e5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e3e:	4808      	ldr	r0, [pc, #32]	; (8007e60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e40:	f7ff fd60 	bl	8007904 <USBD_GetString>
 8007e44:	e004      	b.n	8007e50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	4904      	ldr	r1, [pc, #16]	; (8007e5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e4a:	4805      	ldr	r0, [pc, #20]	; (8007e60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e4c:	f7ff fd5a 	bl	8007904 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e50:	4b02      	ldr	r3, [pc, #8]	; (8007e5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20001bfc 	.word	0x20001bfc
 8007e60:	0800bb38 	.word	0x0800bb38

08007e64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <Get_SerialNum+0x44>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e70:	4b0e      	ldr	r3, [pc, #56]	; (8007eac <Get_SerialNum+0x48>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e76:	4b0e      	ldr	r3, [pc, #56]	; (8007eb0 <Get_SerialNum+0x4c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4413      	add	r3, r2
 8007e82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d009      	beq.n	8007e9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e8a:	2208      	movs	r2, #8
 8007e8c:	4909      	ldr	r1, [pc, #36]	; (8007eb4 <Get_SerialNum+0x50>)
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f000 f814 	bl	8007ebc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e94:	2204      	movs	r2, #4
 8007e96:	4908      	ldr	r1, [pc, #32]	; (8007eb8 <Get_SerialNum+0x54>)
 8007e98:	68b8      	ldr	r0, [r7, #8]
 8007e9a:	f000 f80f 	bl	8007ebc <IntToUnicode>
  }
}
 8007e9e:	bf00      	nop
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	1fff7a10 	.word	0x1fff7a10
 8007eac:	1fff7a14 	.word	0x1fff7a14
 8007eb0:	1fff7a18 	.word	0x1fff7a18
 8007eb4:	200000e2 	.word	0x200000e2
 8007eb8:	200000f2 	.word	0x200000f2

08007ebc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ece:	2300      	movs	r3, #0
 8007ed0:	75fb      	strb	r3, [r7, #23]
 8007ed2:	e027      	b.n	8007f24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	0f1b      	lsrs	r3, r3, #28
 8007ed8:	2b09      	cmp	r3, #9
 8007eda:	d80b      	bhi.n	8007ef4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	0f1b      	lsrs	r3, r3, #28
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	440b      	add	r3, r1
 8007eec:	3230      	adds	r2, #48	; 0x30
 8007eee:	b2d2      	uxtb	r2, r2
 8007ef0:	701a      	strb	r2, [r3, #0]
 8007ef2:	e00a      	b.n	8007f0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	0f1b      	lsrs	r3, r3, #28
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	4619      	mov	r1, r3
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	440b      	add	r3, r1
 8007f04:	3237      	adds	r2, #55	; 0x37
 8007f06:	b2d2      	uxtb	r2, r2
 8007f08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	011b      	lsls	r3, r3, #4
 8007f0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	3301      	adds	r3, #1
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	4413      	add	r3, r2
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
 8007f20:	3301      	adds	r3, #1
 8007f22:	75fb      	strb	r3, [r7, #23]
 8007f24:	7dfa      	ldrb	r2, [r7, #23]
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d3d3      	bcc.n	8007ed4 <IntToUnicode+0x18>
  }
}
 8007f2c:	bf00      	nop
 8007f2e:	bf00      	nop
 8007f30:	371c      	adds	r7, #28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b08a      	sub	sp, #40	; 0x28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f44:	f107 0314 	add.w	r3, r7, #20
 8007f48:	2200      	movs	r2, #0
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	605a      	str	r2, [r3, #4]
 8007f4e:	609a      	str	r2, [r3, #8]
 8007f50:	60da      	str	r2, [r3, #12]
 8007f52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f5c:	d147      	bne.n	8007fee <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f5e:	2300      	movs	r3, #0
 8007f60:	613b      	str	r3, [r7, #16]
 8007f62:	4b25      	ldr	r3, [pc, #148]	; (8007ff8 <HAL_PCD_MspInit+0xbc>)
 8007f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f66:	4a24      	ldr	r2, [pc, #144]	; (8007ff8 <HAL_PCD_MspInit+0xbc>)
 8007f68:	f043 0301 	orr.w	r3, r3, #1
 8007f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8007f6e:	4b22      	ldr	r3, [pc, #136]	; (8007ff8 <HAL_PCD_MspInit+0xbc>)
 8007f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	613b      	str	r3, [r7, #16]
 8007f78:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f80:	2300      	movs	r3, #0
 8007f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f84:	2300      	movs	r3, #0
 8007f86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007f88:	f107 0314 	add.w	r3, r7, #20
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	481b      	ldr	r0, [pc, #108]	; (8007ffc <HAL_PCD_MspInit+0xc0>)
 8007f90:	f7f9 f904 	bl	800119c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007f94:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007fa6:	230a      	movs	r3, #10
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007faa:	f107 0314 	add.w	r3, r7, #20
 8007fae:	4619      	mov	r1, r3
 8007fb0:	4812      	ldr	r0, [pc, #72]	; (8007ffc <HAL_PCD_MspInit+0xc0>)
 8007fb2:	f7f9 f8f3 	bl	800119c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007fb6:	4b10      	ldr	r3, [pc, #64]	; (8007ff8 <HAL_PCD_MspInit+0xbc>)
 8007fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fba:	4a0f      	ldr	r2, [pc, #60]	; (8007ff8 <HAL_PCD_MspInit+0xbc>)
 8007fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc0:	6353      	str	r3, [r2, #52]	; 0x34
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60fb      	str	r3, [r7, #12]
 8007fc6:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <HAL_PCD_MspInit+0xbc>)
 8007fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fca:	4a0b      	ldr	r2, [pc, #44]	; (8007ff8 <HAL_PCD_MspInit+0xbc>)
 8007fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8007fd2:	4b09      	ldr	r3, [pc, #36]	; (8007ff8 <HAL_PCD_MspInit+0xbc>)
 8007fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007fde:	2200      	movs	r2, #0
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	2043      	movs	r0, #67	; 0x43
 8007fe4:	f7f9 f887 	bl	80010f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007fe8:	2043      	movs	r0, #67	; 0x43
 8007fea:	f7f9 f8a0 	bl	800112e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007fee:	bf00      	nop
 8007ff0:	3728      	adds	r7, #40	; 0x28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	40023800 	.word	0x40023800
 8007ffc:	40020000 	.word	0x40020000

08008000 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f7fe fb15 	bl	8006646 <USBD_LL_SetupStage>
}
 800801c:	bf00      	nop
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008036:	78fa      	ldrb	r2, [r7, #3]
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	4613      	mov	r3, r2
 800803c:	00db      	lsls	r3, r3, #3
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	440b      	add	r3, r1
 8008044:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	4619      	mov	r1, r3
 800804e:	f7fe fb4f 	bl	80066f0 <USBD_LL_DataOutStage>
}
 8008052:	bf00      	nop
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b082      	sub	sp, #8
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800806c:	78fa      	ldrb	r2, [r7, #3]
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	4613      	mov	r3, r2
 8008072:	00db      	lsls	r3, r3, #3
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	440b      	add	r3, r1
 800807a:	334c      	adds	r3, #76	; 0x4c
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	78fb      	ldrb	r3, [r7, #3]
 8008080:	4619      	mov	r1, r3
 8008082:	f7fe fbe8 	bl	8006856 <USBD_LL_DataInStage>
}
 8008086:	bf00      	nop
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b082      	sub	sp, #8
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800809c:	4618      	mov	r0, r3
 800809e:	f7fe fd1c 	bl	8006ada <USBD_LL_SOF>
}
 80080a2:	bf00      	nop
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80080b2:	2301      	movs	r3, #1
 80080b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]
 80080c2:	e008      	b.n	80080d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d102      	bne.n	80080d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80080cc:	2301      	movs	r3, #1
 80080ce:	73fb      	strb	r3, [r7, #15]
 80080d0:	e001      	b.n	80080d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80080d2:	f7f8 fc99 	bl	8000a08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080dc:	7bfa      	ldrb	r2, [r7, #15]
 80080de:	4611      	mov	r1, r2
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fe fcbc 	bl	8006a5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fe fc64 	bl	80069ba <USBD_LL_Reset>
}
 80080f2:	bf00      	nop
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe fcb7 	bl	8006a7e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	6812      	ldr	r2, [r2, #0]
 800811e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008122:	f043 0301 	orr.w	r3, r3, #1
 8008126:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d005      	beq.n	800813c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008130:	4b04      	ldr	r3, [pc, #16]	; (8008144 <HAL_PCD_SuspendCallback+0x48>)
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	4a03      	ldr	r2, [pc, #12]	; (8008144 <HAL_PCD_SuspendCallback+0x48>)
 8008136:	f043 0306 	orr.w	r3, r3, #6
 800813a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	e000ed00 	.word	0xe000ed00

08008148 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008156:	4618      	mov	r0, r3
 8008158:	f7fe fca7 	bl	8006aaa <USBD_LL_Resume>
}
 800815c:	bf00      	nop
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	460b      	mov	r3, r1
 800816e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008176:	78fa      	ldrb	r2, [r7, #3]
 8008178:	4611      	mov	r1, r2
 800817a:	4618      	mov	r0, r3
 800817c:	f7fe fcff 	bl	8006b7e <USBD_LL_IsoOUTIncomplete>
}
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800819a:	78fa      	ldrb	r2, [r7, #3]
 800819c:	4611      	mov	r1, r2
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe fcbb 	bl	8006b1a <USBD_LL_IsoINIncomplete>
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe fd11 	bl	8006be2 <USBD_LL_DevConnected>
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fe fd0e 	bl	8006bf8 <USBD_LL_DevDisconnected>
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d13c      	bne.n	800826e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80081f4:	4a20      	ldr	r2, [pc, #128]	; (8008278 <USBD_LL_Init+0x94>)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a1e      	ldr	r2, [pc, #120]	; (8008278 <USBD_LL_Init+0x94>)
 8008200:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008204:	4b1c      	ldr	r3, [pc, #112]	; (8008278 <USBD_LL_Init+0x94>)
 8008206:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800820a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800820c:	4b1a      	ldr	r3, [pc, #104]	; (8008278 <USBD_LL_Init+0x94>)
 800820e:	2204      	movs	r2, #4
 8008210:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008212:	4b19      	ldr	r3, [pc, #100]	; (8008278 <USBD_LL_Init+0x94>)
 8008214:	2202      	movs	r2, #2
 8008216:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008218:	4b17      	ldr	r3, [pc, #92]	; (8008278 <USBD_LL_Init+0x94>)
 800821a:	2200      	movs	r2, #0
 800821c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800821e:	4b16      	ldr	r3, [pc, #88]	; (8008278 <USBD_LL_Init+0x94>)
 8008220:	2202      	movs	r2, #2
 8008222:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008224:	4b14      	ldr	r3, [pc, #80]	; (8008278 <USBD_LL_Init+0x94>)
 8008226:	2200      	movs	r2, #0
 8008228:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800822a:	4b13      	ldr	r3, [pc, #76]	; (8008278 <USBD_LL_Init+0x94>)
 800822c:	2200      	movs	r2, #0
 800822e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008230:	4b11      	ldr	r3, [pc, #68]	; (8008278 <USBD_LL_Init+0x94>)
 8008232:	2200      	movs	r2, #0
 8008234:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008236:	4b10      	ldr	r3, [pc, #64]	; (8008278 <USBD_LL_Init+0x94>)
 8008238:	2201      	movs	r2, #1
 800823a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800823c:	4b0e      	ldr	r3, [pc, #56]	; (8008278 <USBD_LL_Init+0x94>)
 800823e:	2200      	movs	r2, #0
 8008240:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008242:	480d      	ldr	r0, [pc, #52]	; (8008278 <USBD_LL_Init+0x94>)
 8008244:	f7f9 ff5e 	bl	8002104 <HAL_PCD_Init>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800824e:	f7f8 fbdb 	bl	8000a08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008252:	2180      	movs	r1, #128	; 0x80
 8008254:	4808      	ldr	r0, [pc, #32]	; (8008278 <USBD_LL_Init+0x94>)
 8008256:	f7fb f9b6 	bl	80035c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800825a:	2240      	movs	r2, #64	; 0x40
 800825c:	2100      	movs	r1, #0
 800825e:	4806      	ldr	r0, [pc, #24]	; (8008278 <USBD_LL_Init+0x94>)
 8008260:	f7fb f96a 	bl	8003538 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008264:	2280      	movs	r2, #128	; 0x80
 8008266:	2101      	movs	r1, #1
 8008268:	4803      	ldr	r0, [pc, #12]	; (8008278 <USBD_LL_Init+0x94>)
 800826a:	f7fb f965 	bl	8003538 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	20001dfc 	.word	0x20001dfc

0800827c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008292:	4618      	mov	r0, r3
 8008294:	f7fa f853 	bl	800233e <HAL_PCD_Start>
 8008298:	4603      	mov	r3, r0
 800829a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800829c:	7bfb      	ldrb	r3, [r7, #15]
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 f942 	bl	8008528 <USBD_Get_USB_Status>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	4608      	mov	r0, r1
 80082bc:	4611      	mov	r1, r2
 80082be:	461a      	mov	r2, r3
 80082c0:	4603      	mov	r3, r0
 80082c2:	70fb      	strb	r3, [r7, #3]
 80082c4:	460b      	mov	r3, r1
 80082c6:	70bb      	strb	r3, [r7, #2]
 80082c8:	4613      	mov	r3, r2
 80082ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082da:	78bb      	ldrb	r3, [r7, #2]
 80082dc:	883a      	ldrh	r2, [r7, #0]
 80082de:	78f9      	ldrb	r1, [r7, #3]
 80082e0:	f7fa fd24 	bl	8002d2c <HAL_PCD_EP_Open>
 80082e4:	4603      	mov	r3, r0
 80082e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 f91c 	bl	8008528 <USBD_Get_USB_Status>
 80082f0:	4603      	mov	r3, r0
 80082f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	460b      	mov	r3, r1
 8008308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008318:	78fa      	ldrb	r2, [r7, #3]
 800831a:	4611      	mov	r1, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f7fa fd6d 	bl	8002dfc <HAL_PCD_EP_Close>
 8008322:	4603      	mov	r3, r0
 8008324:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	4618      	mov	r0, r3
 800832a:	f000 f8fd 	bl	8008528 <USBD_Get_USB_Status>
 800832e:	4603      	mov	r3, r0
 8008330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008332:	7bbb      	ldrb	r3, [r7, #14]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008356:	78fa      	ldrb	r2, [r7, #3]
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f7fa fe45 	bl	8002fea <HAL_PCD_EP_SetStall>
 8008360:	4603      	mov	r3, r0
 8008362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	4618      	mov	r0, r3
 8008368:	f000 f8de 	bl	8008528 <USBD_Get_USB_Status>
 800836c:	4603      	mov	r3, r0
 800836e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008370:	7bbb      	ldrb	r3, [r7, #14]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b084      	sub	sp, #16
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	460b      	mov	r3, r1
 8008384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008394:	78fa      	ldrb	r2, [r7, #3]
 8008396:	4611      	mov	r1, r2
 8008398:	4618      	mov	r0, r3
 800839a:	f7fa fe8a 	bl	80030b2 <HAL_PCD_EP_ClrStall>
 800839e:	4603      	mov	r3, r0
 80083a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 f8bf 	bl	8008528 <USBD_Get_USB_Status>
 80083aa:	4603      	mov	r3, r0
 80083ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80083cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	da0b      	bge.n	80083ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80083d4:	78fb      	ldrb	r3, [r7, #3]
 80083d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083da:	68f9      	ldr	r1, [r7, #12]
 80083dc:	4613      	mov	r3, r2
 80083de:	00db      	lsls	r3, r3, #3
 80083e0:	4413      	add	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	440b      	add	r3, r1
 80083e6:	333e      	adds	r3, #62	; 0x3e
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	e00b      	b.n	8008404 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083ec:	78fb      	ldrb	r3, [r7, #3]
 80083ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083f2:	68f9      	ldr	r1, [r7, #12]
 80083f4:	4613      	mov	r3, r2
 80083f6:	00db      	lsls	r3, r3, #3
 80083f8:	4413      	add	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	440b      	add	r3, r1
 80083fe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008402:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008404:	4618      	mov	r0, r3
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	460b      	mov	r3, r1
 800841a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	4611      	mov	r1, r2
 800842e:	4618      	mov	r0, r3
 8008430:	f7fa fc57 	bl	8002ce2 <HAL_PCD_SetAddress>
 8008434:	4603      	mov	r3, r0
 8008436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	4618      	mov	r0, r3
 800843c:	f000 f874 	bl	8008528 <USBD_Get_USB_Status>
 8008440:	4603      	mov	r3, r0
 8008442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008444:	7bbb      	ldrb	r3, [r7, #14]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b086      	sub	sp, #24
 8008452:	af00      	add	r7, sp, #0
 8008454:	60f8      	str	r0, [r7, #12]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	603b      	str	r3, [r7, #0]
 800845a:	460b      	mov	r3, r1
 800845c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800846c:	7af9      	ldrb	r1, [r7, #11]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	f7fa fd70 	bl	8002f56 <HAL_PCD_EP_Transmit>
 8008476:	4603      	mov	r3, r0
 8008478:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800847a:	7dfb      	ldrb	r3, [r7, #23]
 800847c:	4618      	mov	r0, r3
 800847e:	f000 f853 	bl	8008528 <USBD_Get_USB_Status>
 8008482:	4603      	mov	r3, r0
 8008484:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008486:	7dbb      	ldrb	r3, [r7, #22]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	607a      	str	r2, [r7, #4]
 800849a:	603b      	str	r3, [r7, #0]
 800849c:	460b      	mov	r3, r1
 800849e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80084ae:	7af9      	ldrb	r1, [r7, #11]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	f7fa fcec 	bl	8002e90 <HAL_PCD_EP_Receive>
 80084b8:	4603      	mov	r3, r0
 80084ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084bc:	7dfb      	ldrb	r3, [r7, #23]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 f832 	bl	8008528 <USBD_Get_USB_Status>
 80084c4:	4603      	mov	r3, r0
 80084c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b082      	sub	sp, #8
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	460b      	mov	r3, r1
 80084dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084e4:	78fa      	ldrb	r2, [r7, #3]
 80084e6:	4611      	mov	r1, r2
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fa fd1c 	bl	8002f26 <HAL_PCD_EP_GetRxCount>
 80084ee:	4603      	mov	r3, r0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008500:	4b03      	ldr	r3, [pc, #12]	; (8008510 <USBD_static_malloc+0x18>)
}
 8008502:	4618      	mov	r0, r3
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	20002308 	.word	0x20002308

08008514 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]

}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008536:	79fb      	ldrb	r3, [r7, #7]
 8008538:	2b03      	cmp	r3, #3
 800853a:	d817      	bhi.n	800856c <USBD_Get_USB_Status+0x44>
 800853c:	a201      	add	r2, pc, #4	; (adr r2, 8008544 <USBD_Get_USB_Status+0x1c>)
 800853e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008542:	bf00      	nop
 8008544:	08008555 	.word	0x08008555
 8008548:	0800855b 	.word	0x0800855b
 800854c:	08008561 	.word	0x08008561
 8008550:	08008567 	.word	0x08008567
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	73fb      	strb	r3, [r7, #15]
    break;
 8008558:	e00b      	b.n	8008572 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800855a:	2303      	movs	r3, #3
 800855c:	73fb      	strb	r3, [r7, #15]
    break;
 800855e:	e008      	b.n	8008572 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008560:	2301      	movs	r3, #1
 8008562:	73fb      	strb	r3, [r7, #15]
    break;
 8008564:	e005      	b.n	8008572 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008566:	2303      	movs	r3, #3
 8008568:	73fb      	strb	r3, [r7, #15]
    break;
 800856a:	e002      	b.n	8008572 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800856c:	2303      	movs	r3, #3
 800856e:	73fb      	strb	r3, [r7, #15]
    break;
 8008570:	bf00      	nop
  }
  return usb_status;
 8008572:	7bfb      	ldrb	r3, [r7, #15]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d009      	beq.n	80085a4 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8008590:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8008592:	461a      	mov	r2, r3
        err.type, err.code);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	4806      	ldr	r0, [pc, #24]	; (80085b8 <ai_log_err+0x38>)
 800859e:	f002 fa13 	bl	800a9c8 <iprintf>
 80085a2:	e008      	b.n	80085b6 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80085a4:	793b      	ldrb	r3, [r7, #4]
 80085a6:	4619      	mov	r1, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80085ae:	461a      	mov	r2, r3
 80085b0:	4802      	ldr	r0, [pc, #8]	; (80085bc <ai_log_err+0x3c>)
 80085b2:	f002 fa09 	bl	800a9c8 <iprintf>

  do {} while (1);
 80085b6:	e7fe      	b.n	80085b6 <ai_log_err+0x36>
 80085b8:	0800bb48 	.word	0x0800bb48
 80085bc:	0800bb7c 	.word	0x0800bb7c

080085c0 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 80085c8:	2200      	movs	r2, #0
 80085ca:	6879      	ldr	r1, [r7, #4]
 80085cc:	4828      	ldr	r0, [pc, #160]	; (8008670 <ai_boostrap+0xb0>)
 80085ce:	f000 f96d 	bl	80088ac <ai_network_create_and_init>
 80085d2:	4603      	mov	r3, r0
 80085d4:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 80085d6:	7b3b      	ldrb	r3, [r7, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d006      	beq.n	80085ea <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 80085dc:	4925      	ldr	r1, [pc, #148]	; (8008674 <ai_boostrap+0xb4>)
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f7ff ffce 	bl	8008580 <ai_log_err>
    return -1;
 80085e4:	f04f 33ff 	mov.w	r3, #4294967295
 80085e8:	e03e      	b.n	8008668 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 80085ea:	4b21      	ldr	r3, [pc, #132]	; (8008670 <ai_boostrap+0xb0>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2100      	movs	r1, #0
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 f9cf 	bl	8008994 <ai_network_inputs_get>
 80085f6:	4603      	mov	r3, r0
 80085f8:	4a1f      	ldr	r2, [pc, #124]	; (8008678 <ai_boostrap+0xb8>)
 80085fa:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80085fc:	4b1c      	ldr	r3, [pc, #112]	; (8008670 <ai_boostrap+0xb0>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2100      	movs	r1, #0
 8008602:	4618      	mov	r0, r3
 8008604:	f000 f9e0 	bl	80089c8 <ai_network_outputs_get>
 8008608:	4603      	mov	r3, r0
 800860a:	4a1c      	ldr	r2, [pc, #112]	; (800867c <ai_boostrap+0xbc>)
 800860c:	6013      	str	r3, [r2, #0]
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
	data_ins[idx] = ai_input[idx].data;
  }
#else
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 800860e:	2300      	movs	r3, #0
 8008610:	617b      	str	r3, [r7, #20]
 8008612:	e00f      	b.n	8008634 <ai_boostrap+0x74>
	  ai_input[idx].data = data_ins[idx];
 8008614:	4b18      	ldr	r3, [pc, #96]	; (8008678 <ai_boostrap+0xb8>)
 8008616:	6819      	ldr	r1, [r3, #0]
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	4613      	mov	r3, r2
 800861c:	00db      	lsls	r3, r3, #3
 800861e:	1a9b      	subs	r3, r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	440b      	add	r3, r1
 8008624:	4916      	ldr	r1, [pc, #88]	; (8008680 <ai_boostrap+0xc0>)
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800862c:	605a      	str	r2, [r3, #4]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	3301      	adds	r3, #1
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2b00      	cmp	r3, #0
 8008638:	ddec      	ble.n	8008614 <ai_boostrap+0x54>
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	data_outs[idx] = ai_output[idx].data;
  }
#else
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 800863a:	2300      	movs	r3, #0
 800863c:	613b      	str	r3, [r7, #16]
 800863e:	e00f      	b.n	8008660 <ai_boostrap+0xa0>
	ai_output[idx].data = data_outs[idx];
 8008640:	4b0e      	ldr	r3, [pc, #56]	; (800867c <ai_boostrap+0xbc>)
 8008642:	6819      	ldr	r1, [r3, #0]
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	4613      	mov	r3, r2
 8008648:	00db      	lsls	r3, r3, #3
 800864a:	1a9b      	subs	r3, r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	440b      	add	r3, r1
 8008650:	490c      	ldr	r1, [pc, #48]	; (8008684 <ai_boostrap+0xc4>)
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008658:	605a      	str	r2, [r3, #4]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	3301      	adds	r3, #1
 800865e:	613b      	str	r3, [r7, #16]
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	ddec      	ble.n	8008640 <ai_boostrap+0x80>
  }
#endif

  return 0;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	200031c8 	.word	0x200031c8
 8008674:	0800bbac 	.word	0x0800bbac
 8008678:	200031cc 	.word	0x200031cc
 800867c:	200031d0 	.word	0x200031d0
 8008680:	200000fc 	.word	0x200000fc
 8008684:	20000100 	.word	0x20000100

08008688 <ai_run>:

static int ai_run(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 800868e:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <ai_run+0x44>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a0f      	ldr	r2, [pc, #60]	; (80086d0 <ai_run+0x48>)
 8008694:	6811      	ldr	r1, [r2, #0]
 8008696:	4a0f      	ldr	r2, [pc, #60]	; (80086d4 <ai_run+0x4c>)
 8008698:	6812      	ldr	r2, [r2, #0]
 800869a:	4618      	mov	r0, r3
 800869c:	f000 f9ea 	bl	8008a74 <ai_network_run>
 80086a0:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d00c      	beq.n	80086c2 <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 80086a8:	4b08      	ldr	r3, [pc, #32]	; (80086cc <ai_run+0x44>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f000 f8db 	bl	8008868 <ai_network_get_error>
 80086b2:	4603      	mov	r3, r0
 80086b4:	4908      	ldr	r1, [pc, #32]	; (80086d8 <ai_run+0x50>)
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff ff62 	bl	8008580 <ai_log_err>
        "ai_network_run");
    return -1;
 80086bc:	f04f 33ff 	mov.w	r3, #4294967295
 80086c0:	e000      	b.n	80086c4 <ai_run+0x3c>
  }

  return 0;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	200031c8 	.word	0x200031c8
 80086d0:	200031cc 	.word	0x200031cc
 80086d4:	200031d0 	.word	0x200031d0
 80086d8:	0800bbc8 	.word	0x0800bbc8

080086dc <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 80086e0:	4803      	ldr	r0, [pc, #12]	; (80086f0 <MX_X_CUBE_AI_Init+0x14>)
 80086e2:	f002 f9f7 	bl	800aad4 <puts>

  ai_boostrap(data_activations0);
 80086e6:	4803      	ldr	r0, [pc, #12]	; (80086f4 <MX_X_CUBE_AI_Init+0x18>)
 80086e8:	f7ff ff6a 	bl	80085c0 <ai_boostrap>
    /* USER CODE END 5 */
}
 80086ec:	bf00      	nop
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	0800bbd8 	.word	0x0800bbd8
 80086f4:	20000104 	.word	0x20000104

080086f8 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80086fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008702:	4820      	ldr	r0, [pc, #128]	; (8008784 <MX_X_CUBE_AI_Process+0x8c>)
 8008704:	f7f8 feff 	bl	8001506 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8008708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800870c:	f7f8 fbf4 	bl	8000ef8 <HAL_Delay>
	ai_input->data = AiInput;
 8008710:	4b1d      	ldr	r3, [pc, #116]	; (8008788 <MX_X_CUBE_AI_Process+0x90>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a1d      	ldr	r2, [pc, #116]	; (800878c <MX_X_CUBE_AI_Process+0x94>)
 8008716:	605a      	str	r2, [r3, #4]
	ai_output->data = AiOutput;
 8008718:	4b1d      	ldr	r3, [pc, #116]	; (8008790 <MX_X_CUBE_AI_Process+0x98>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a1d      	ldr	r2, [pc, #116]	; (8008794 <MX_X_CUBE_AI_Process+0x9c>)
 800871e:	605a      	str	r2, [r3, #4]
  int res = -1;
 8008720:	f04f 33ff 	mov.w	r3, #4294967295
 8008724:	60bb      	str	r3, [r7, #8]
  res = ai_run();
 8008726:	f7ff ffaf 	bl	8008688 <ai_run>
 800872a:	60b8      	str	r0, [r7, #8]
  if (res) {
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00a      	beq.n	8008748 <MX_X_CUBE_AI_Process+0x50>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8008732:	2311      	movs	r3, #17
 8008734:	713b      	strb	r3, [r7, #4]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2210      	movs	r2, #16
 800873a:	f362 231f 	bfi	r3, r2, #8, #24
 800873e:	607b      	str	r3, [r7, #4]
    ai_log_err(err, "Process has FAILED");
 8008740:	4915      	ldr	r1, [pc, #84]	; (8008798 <MX_X_CUBE_AI_Process+0xa0>)
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7ff ff1c 	bl	8008580 <ai_log_err>
  }
  ai_output = ai_network_outputs_get(network, NULL);
 8008748:	4b14      	ldr	r3, [pc, #80]	; (800879c <MX_X_CUBE_AI_Process+0xa4>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2100      	movs	r1, #0
 800874e:	4618      	mov	r0, r3
 8008750:	f000 f93a 	bl	80089c8 <ai_network_outputs_get>
 8008754:	4603      	mov	r3, r0
 8008756:	4a0e      	ldr	r2, [pc, #56]	; (8008790 <MX_X_CUBE_AI_Process+0x98>)
 8008758:	6013      	str	r3, [r2, #0]
  for (int i=0;i<784;i++)
 800875a:	2300      	movs	r3, #0
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	e007      	b.n	8008770 <MX_X_CUBE_AI_Process+0x78>
  {
	  AiInput[i]=0;
 8008760:	4a0a      	ldr	r2, [pc, #40]	; (800878c <MX_X_CUBE_AI_Process+0x94>)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	4413      	add	r3, r2
 8008766:	2200      	movs	r2, #0
 8008768:	701a      	strb	r2, [r3, #0]
  for (int i=0;i<784;i++)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3301      	adds	r3, #1
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8008776:	dbf3      	blt.n	8008760 <MX_X_CUBE_AI_Process+0x68>
  }
    /* USER CODE END 6 */
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	40020c00 	.word	0x40020c00
 8008788:	200031cc 	.word	0x200031cc
 800878c:	200005f8 	.word	0x200005f8
 8008790:	200031d0 	.word	0x200031d0
 8008794:	20000908 	.word	0x20000908
 8008798:	0800bbf8 	.word	0x0800bbf8
 800879c:	200031c8 	.word	0x200031c8

080087a0 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 80087aa:	2300      	movs	r3, #0
 80087ac:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 80087ae:	f107 030c 	add.w	r3, r7, #12
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	2101      	movs	r1, #1
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 fa34 	bl	8008c24 <ai_platform_get_activations_map>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d007      	beq.n	80087d2 <network_configure_activations+0x32>
    /* Updating activations (byte) offsets */
    dense_1_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	4a08      	ldr	r2, [pc, #32]	; (80087e8 <network_configure_activations+0x48>)
 80087c6:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4a07      	ldr	r2, [pc, #28]	; (80087e8 <network_configure_activations+0x48>)
 80087cc:	60d3      	str	r3, [r2, #12]
    
    return true;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e005      	b.n	80087de <network_configure_activations+0x3e>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80087d2:	2213      	movs	r2, #19
 80087d4:	2130      	movs	r1, #48	; 0x30
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fb0c 	bl	8008df4 <ai_platform_network_set_error>
  return false;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20000118 	.word	0x20000118

080087ec <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80087f6:	2300      	movs	r3, #0
 80087f8:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80087fa:	f107 030c 	add.w	r3, r7, #12
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	2101      	movs	r1, #1
 8008802:	4618      	mov	r0, r3
 8008804:	f000 f9be 	bl	8008b84 <ai_platform_get_weights_map>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d01d      	beq.n	800884a <network_configure_weights+0x5e>
    /* Updating weights (byte) offsets */
    
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800880e:	4b14      	ldr	r3, [pc, #80]	; (8008860 <network_configure_weights+0x74>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008816:	4a12      	ldr	r2, [pc, #72]	; (8008860 <network_configure_weights+0x74>)
 8008818:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(weights_map[0] + 0);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4a10      	ldr	r2, [pc, #64]	; (8008860 <network_configure_weights+0x74>)
 800881e:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4a0f      	ldr	r2, [pc, #60]	; (8008860 <network_configure_weights+0x74>)
 8008824:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008826:	4b0f      	ldr	r3, [pc, #60]	; (8008864 <network_configure_weights+0x78>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800882e:	4a0d      	ldr	r2, [pc, #52]	; (8008864 <network_configure_weights+0x78>)
 8008830:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(weights_map[0] + 31360);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f503 43f5 	add.w	r3, r3, #31360	; 0x7a80
 8008838:	4a0a      	ldr	r2, [pc, #40]	; (8008864 <network_configure_weights+0x78>)
 800883a:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(weights_map[0] + 31360);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f503 43f5 	add.w	r3, r3, #31360	; 0x7a80
 8008842:	4a08      	ldr	r2, [pc, #32]	; (8008864 <network_configure_weights+0x78>)
 8008844:	60d3      	str	r3, [r2, #12]
    return true;
 8008846:	2301      	movs	r3, #1
 8008848:	e005      	b.n	8008856 <network_configure_weights+0x6a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800884a:	2212      	movs	r2, #18
 800884c:	2130      	movs	r1, #48	; 0x30
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fad0 	bl	8008df4 <ai_platform_network_set_error>
  return false;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	20000138 	.word	0x20000138
 8008864:	20000148 	.word	0x20000148

08008868 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fa45 	bl	8008d00 <ai_platform_network_get_error>
 8008876:	4603      	mov	r3, r0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af02      	add	r7, sp, #8
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800888a:	2300      	movs	r3, #0
 800888c:	9301      	str	r3, [sp, #4]
 800888e:	2305      	movs	r3, #5
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	2301      	movs	r3, #1
 8008894:	4a04      	ldr	r2, [pc, #16]	; (80088a8 <ai_network_create+0x28>)
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fc9f 	bl	80091dc <ai_platform_network_create>
 800889e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	200003c8 	.word	0x200003c8

080088ac <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b096      	sub	sp, #88	; 0x58
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80088b8:	2100      	movs	r1, #0
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff ffe0 	bl	8008880 <ai_network_create>
 80088c0:	4603      	mov	r3, r0
 80088c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 80088c4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <ai_network_create_and_init+0x24>
        return err;
 80088cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088ce:	e05d      	b.n	800898c <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 80088d0:	f107 0314 	add.w	r3, r7, #20
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 f8dd 	bl	8008a94 <ai_network_data_params_get>
 80088da:	4603      	mov	r3, r0
 80088dc:	f083 0301 	eor.w	r3, r3, #1
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d008      	beq.n	80088f8 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff ffbc 	bl	8008868 <ai_network_get_error>
 80088f0:	4603      	mov	r3, r0
 80088f2:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 80088f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f6:	e049      	b.n	800898c <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d016      	beq.n	800892c <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 80088fe:	2300      	movs	r3, #0
 8008900:	657b      	str	r3, [r7, #84]	; 0x54
 8008902:	e00e      	b.n	8008922 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8008904:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	4413      	add	r3, r2
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	f107 0314 	add.w	r3, r7, #20
 8008914:	330c      	adds	r3, #12
 8008916:	4618      	mov	r0, r3
 8008918:	f000 f91e 	bl	8008b58 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800891c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800891e:	3301      	adds	r3, #1
 8008920:	657b      	str	r3, [r7, #84]	; 0x54
 8008922:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008924:	461a      	mov	r2, r3
 8008926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008928:	4293      	cmp	r3, r2
 800892a:	dbeb      	blt.n	8008904 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d016      	beq.n	8008960 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8008932:	2300      	movs	r3, #0
 8008934:	653b      	str	r3, [r7, #80]	; 0x50
 8008936:	e00e      	b.n	8008956 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8008938:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800893a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	4413      	add	r3, r2
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	f107 0314 	add.w	r3, r7, #20
 8008948:	3304      	adds	r3, #4
 800894a:	4618      	mov	r0, r3
 800894c:	f000 f904 	bl	8008b58 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8008950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008952:	3301      	adds	r3, #1
 8008954:	653b      	str	r3, [r7, #80]	; 0x50
 8008956:	8b7b      	ldrh	r3, [r7, #26]
 8008958:	461a      	mov	r2, r3
 800895a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800895c:	4293      	cmp	r3, r2
 800895e:	dbeb      	blt.n	8008938 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f107 0214 	add.w	r2, r7, #20
 8008968:	4611      	mov	r1, r2
 800896a:	4618      	mov	r0, r3
 800896c:	f000 f846 	bl	80089fc <ai_network_init>
 8008970:	4603      	mov	r3, r0
 8008972:	f083 0301 	eor.w	r3, r3, #1
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	d006      	beq.n	800898a <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff ff71 	bl	8008868 <ai_network_get_error>
 8008986:	4603      	mov	r3, r0
 8008988:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800898a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800898c:	4618      	mov	r0, r3
 800898e:	3758      	adds	r7, #88	; 0x58
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d104      	bne.n	80089ae <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80089a4:	4b06      	ldr	r3, [pc, #24]	; (80089c0 <ai_network_inputs_get+0x2c>)
 80089a6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a06      	ldr	r2, [pc, #24]	; (80089c4 <ai_network_inputs_get+0x30>)
 80089ac:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fa25 	bl	8008e00 <ai_platform_inputs_get>
 80089b6:	4603      	mov	r3, r0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	200003c8 	.word	0x200003c8
 80089c4:	a1c00100 	.word	0xa1c00100

080089c8 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d104      	bne.n	80089e2 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80089d8:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <ai_network_outputs_get+0x2c>)
 80089da:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a06      	ldr	r2, [pc, #24]	; (80089f8 <ai_network_outputs_get+0x30>)
 80089e0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 faff 	bl	8008fe8 <ai_platform_outputs_get>
 80089ea:	4603      	mov	r3, r0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	200003c8 	.word	0x200003c8
 80089f8:	a1c00100 	.word	0xa1c00100

080089fc <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fcc7 	bl	800939c <ai_platform_network_init>
 8008a0e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <ai_network_init+0x1e>
 8008a16:	2300      	movs	r3, #0
 8008a18:	e028      	b.n	8008a6c <ai_network_init+0x70>

  ai_bool ok = true;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f7ff fee3 	bl	80087ec <network_configure_weights>
 8008a26:	4603      	mov	r3, r0
 8008a28:	461a      	mov	r2, r3
 8008a2a:	7afb      	ldrb	r3, [r7, #11]
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	bf14      	ite	ne
 8008a32:	2301      	movne	r3, #1
 8008a34:	2300      	moveq	r3, #0
 8008a36:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f7ff feb0 	bl	80087a0 <network_configure_activations>
 8008a40:	4603      	mov	r3, r0
 8008a42:	461a      	mov	r2, r3
 8008a44:	7afb      	ldrb	r3, [r7, #11]
 8008a46:	4013      	ands	r3, r2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	bf14      	ite	ne
 8008a4c:	2301      	movne	r3, #1
 8008a4e:	2300      	moveq	r3, #0
 8008a50:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fdae 	bl	80095b4 <ai_platform_network_post_init>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	7afb      	ldrb	r3, [r7, #11]
 8008a5e:	4013      	ands	r3, r2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	bf14      	ite	ne
 8008a64:	2301      	movne	r3, #1
 8008a66:	2300      	moveq	r3, #0
 8008a68:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008a6a:	7afb      	ldrb	r3, [r7, #11]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	68b9      	ldr	r1, [r7, #8]
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 fe29 	bl	80096dc <ai_platform_network_process>
 8008a8a:	4603      	mov	r3, r0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <ai_network_data_params_get+0x12>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	e016      	b.n	8008ad4 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8008aa6:	4a0d      	ldr	r2, [pc, #52]	; (8008adc <ai_network_data_params_get+0x48>)
 8008aa8:	f107 0310 	add.w	r3, r7, #16
 8008aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ab0:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8008ab4:	4a0a      	ldr	r2, [pc, #40]	; (8008ae0 <ai_network_data_params_get+0x4c>)
 8008ab6:	f107 0308 	add.w	r3, r7, #8
 8008aba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008abe:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8008ac2:	f107 0210 	add.w	r2, r7, #16
 8008ac6:	f107 0308 	add.w	r3, r7, #8
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f8fb 	bl	8008cc8 <ai_platform_bind_network_params>
 8008ad2:	4603      	mov	r3, r0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	0800bc2c 	.word	0x0800bc2c
 8008ae0:	0800bc34 	.word	0x0800bc34

08008ae4 <ai_buffer_get_size>:
 8008ae4:	b358      	cbz	r0, 8008b3e <ai_buffer_get_size+0x5a>
 8008ae6:	b430      	push	{r4, r5}
 8008ae8:	6803      	ldr	r3, [r0, #0]
 8008aea:	4d15      	ldr	r5, [pc, #84]	; (8008b40 <ai_buffer_get_size+0x5c>)
 8008aec:	6984      	ldr	r4, [r0, #24]
 8008aee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008af2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008af6:	42ab      	cmp	r3, r5
 8008af8:	6862      	ldr	r2, [r4, #4]
 8008afa:	d01a      	beq.n	8008b32 <ai_buffer_get_size+0x4e>
 8008afc:	7d03      	ldrb	r3, [r0, #20]
 8008afe:	6941      	ldr	r1, [r0, #20]
 8008b00:	f1a3 0301 	sub.w	r3, r3, #1
 8008b04:	fab3 f383 	clz	r3, r3
 8008b08:	095b      	lsrs	r3, r3, #5
 8008b0a:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8008b0e:	428b      	cmp	r3, r1
 8008b10:	da0b      	bge.n	8008b2a <ai_buffer_get_size+0x46>
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d102      	bne.n	8008b1c <ai_buffer_get_size+0x38>
 8008b16:	2902      	cmp	r1, #2
 8008b18:	d007      	beq.n	8008b2a <ai_buffer_get_size+0x46>
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8008b20:	3301      	adds	r3, #1
 8008b22:	428b      	cmp	r3, r1
 8008b24:	fb00 f202 	mul.w	r2, r0, r2
 8008b28:	d1f3      	bne.n	8008b12 <ai_buffer_get_size+0x2e>
 8008b2a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8008b2e:	bc30      	pop	{r4, r5}
 8008b30:	4770      	bx	lr
 8008b32:	2900      	cmp	r1, #0
 8008b34:	d0e2      	beq.n	8008afc <ai_buffer_get_size+0x18>
 8008b36:	321f      	adds	r2, #31
 8008b38:	f022 021f 	bic.w	r2, r2, #31
 8008b3c:	e7de      	b.n	8008afc <ai_buffer_get_size+0x18>
 8008b3e:	4770      	bx	lr
 8008b40:	000400c0 	.word	0x000400c0

08008b44 <ai_buffer_array_sane>:
 8008b44:	b138      	cbz	r0, 8008b56 <ai_buffer_array_sane+0x12>
 8008b46:	6843      	ldr	r3, [r0, #4]
 8008b48:	b123      	cbz	r3, 8008b54 <ai_buffer_array_sane+0x10>
 8008b4a:	8840      	ldrh	r0, [r0, #2]
 8008b4c:	3000      	adds	r0, #0
 8008b4e:	bf18      	it	ne
 8008b50:	2001      	movne	r0, #1
 8008b52:	4770      	bx	lr
 8008b54:	4618      	mov	r0, r3
 8008b56:	4770      	bx	lr

08008b58 <ai_buffer_array_item_set_address>:
 8008b58:	b120      	cbz	r0, 8008b64 <ai_buffer_array_item_set_address+0xc>
 8008b5a:	6843      	ldr	r3, [r0, #4]
 8008b5c:	b11b      	cbz	r3, 8008b66 <ai_buffer_array_item_set_address+0xe>
 8008b5e:	8840      	ldrh	r0, [r0, #2]
 8008b60:	b918      	cbnz	r0, 8008b6a <ai_buffer_array_item_set_address+0x12>
 8008b62:	4770      	bx	lr
 8008b64:	4770      	bx	lr
 8008b66:	4618      	mov	r0, r3
 8008b68:	4770      	bx	lr
 8008b6a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8008b6e:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 8008b72:	d0f7      	beq.n	8008b64 <ai_buffer_array_item_set_address+0xc>
 8008b74:	6042      	str	r2, [r0, #4]
 8008b76:	2001      	movs	r0, #1
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop

08008b7c <_ai_platform_acquire_crc>:
 8008b7c:	2001      	movs	r0, #1
 8008b7e:	4770      	bx	lr

08008b80 <_ai_platform_release_crc>:
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop

08008b84 <ai_platform_get_weights_map>:
 8008b84:	b192      	cbz	r2, 8008bac <ai_platform_get_weights_map+0x28>
 8008b86:	b188      	cbz	r0, 8008bac <ai_platform_get_weights_map+0x28>
 8008b88:	b181      	cbz	r1, 8008bac <ai_platform_get_weights_map+0x28>
 8008b8a:	b570      	push	{r4, r5, r6, lr}
 8008b8c:	4b24      	ldr	r3, [pc, #144]	; (8008c20 <ai_platform_get_weights_map+0x9c>)
 8008b8e:	6814      	ldr	r4, [r2, #0]
 8008b90:	429c      	cmp	r4, r3
 8008b92:	d00d      	beq.n	8008bb0 <ai_platform_get_weights_map+0x2c>
 8008b94:	6854      	ldr	r4, [r2, #4]
 8008b96:	b194      	cbz	r4, 8008bbe <ai_platform_get_weights_map+0x3a>
 8008b98:	6825      	ldr	r5, [r4, #0]
 8008b9a:	429d      	cmp	r5, r3
 8008b9c:	d027      	beq.n	8008bee <ai_platform_get_weights_map+0x6a>
 8008b9e:	6004      	str	r4, [r0, #0]
 8008ba0:	f1a1 0001 	sub.w	r0, r1, #1
 8008ba4:	fab0 f080 	clz	r0, r0
 8008ba8:	0940      	lsrs	r0, r0, #5
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
 8008bac:	2000      	movs	r0, #0
 8008bae:	4770      	bx	lr
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	1d10      	adds	r0, r2, #4
 8008bb4:	4616      	mov	r6, r2
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	f7ff ffc4 	bl	8008b44 <ai_buffer_array_sane>
 8008bbc:	b908      	cbnz	r0, 8008bc2 <ai_platform_get_weights_map+0x3e>
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	bd70      	pop	{r4, r5, r6, pc}
 8008bc2:	88f3      	ldrh	r3, [r6, #6]
 8008bc4:	429c      	cmp	r4, r3
 8008bc6:	d1fa      	bne.n	8008bbe <ai_platform_get_weights_map+0x3a>
 8008bc8:	2100      	movs	r1, #0
 8008bca:	1f2b      	subs	r3, r5, #4
 8008bcc:	4608      	mov	r0, r1
 8008bce:	68b2      	ldr	r2, [r6, #8]
 8008bd0:	440a      	add	r2, r1
 8008bd2:	311c      	adds	r1, #28
 8008bd4:	6852      	ldr	r2, [r2, #4]
 8008bd6:	b12a      	cbz	r2, 8008be4 <ai_platform_get_weights_map+0x60>
 8008bd8:	3001      	adds	r0, #1
 8008bda:	4284      	cmp	r4, r0
 8008bdc:	f843 2f04 	str.w	r2, [r3, #4]!
 8008be0:	d1f5      	bne.n	8008bce <ai_platform_get_weights_map+0x4a>
 8008be2:	4620      	mov	r0, r4
 8008be4:	1a20      	subs	r0, r4, r0
 8008be6:	fab0 f080 	clz	r0, r0
 8008bea:	0940      	lsrs	r0, r0, #5
 8008bec:	bd70      	pop	{r4, r5, r6, pc}
 8008bee:	6863      	ldr	r3, [r4, #4]
 8008bf0:	42ab      	cmp	r3, r5
 8008bf2:	f104 0404 	add.w	r4, r4, #4
 8008bf6:	d0e2      	beq.n	8008bbe <ai_platform_get_weights_map+0x3a>
 8008bf8:	3804      	subs	r0, #4
 8008bfa:	4626      	mov	r6, r4
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	e003      	b.n	8008c08 <ai_platform_get_weights_map+0x84>
 8008c00:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8008c04:	42ab      	cmp	r3, r5
 8008c06:	d0da      	beq.n	8008bbe <ai_platform_get_weights_map+0x3a>
 8008c08:	3201      	adds	r2, #1
 8008c0a:	4291      	cmp	r1, r2
 8008c0c:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c10:	d1f6      	bne.n	8008c00 <ai_platform_get_weights_map+0x7c>
 8008c12:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8008c16:	4b02      	ldr	r3, [pc, #8]	; (8008c20 <ai_platform_get_weights_map+0x9c>)
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d1d0      	bne.n	8008bbe <ai_platform_get_weights_map+0x3a>
 8008c1c:	2001      	movs	r0, #1
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
 8008c20:	a1facade 	.word	0xa1facade

08008c24 <ai_platform_get_activations_map>:
 8008c24:	b192      	cbz	r2, 8008c4c <ai_platform_get_activations_map+0x28>
 8008c26:	b188      	cbz	r0, 8008c4c <ai_platform_get_activations_map+0x28>
 8008c28:	b181      	cbz	r1, 8008c4c <ai_platform_get_activations_map+0x28>
 8008c2a:	b570      	push	{r4, r5, r6, lr}
 8008c2c:	4b25      	ldr	r3, [pc, #148]	; (8008cc4 <ai_platform_get_activations_map+0xa0>)
 8008c2e:	6814      	ldr	r4, [r2, #0]
 8008c30:	429c      	cmp	r4, r3
 8008c32:	d00d      	beq.n	8008c50 <ai_platform_get_activations_map+0x2c>
 8008c34:	6a14      	ldr	r4, [r2, #32]
 8008c36:	b19c      	cbz	r4, 8008c60 <ai_platform_get_activations_map+0x3c>
 8008c38:	6825      	ldr	r5, [r4, #0]
 8008c3a:	429d      	cmp	r5, r3
 8008c3c:	d028      	beq.n	8008c90 <ai_platform_get_activations_map+0x6c>
 8008c3e:	6004      	str	r4, [r0, #0]
 8008c40:	f1a1 0001 	sub.w	r0, r1, #1
 8008c44:	fab0 f080 	clz	r0, r0
 8008c48:	0940      	lsrs	r0, r0, #5
 8008c4a:	bd70      	pop	{r4, r5, r6, pc}
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	4770      	bx	lr
 8008c50:	4605      	mov	r5, r0
 8008c52:	f102 000c 	add.w	r0, r2, #12
 8008c56:	4616      	mov	r6, r2
 8008c58:	460c      	mov	r4, r1
 8008c5a:	f7ff ff73 	bl	8008b44 <ai_buffer_array_sane>
 8008c5e:	b908      	cbnz	r0, 8008c64 <ai_platform_get_activations_map+0x40>
 8008c60:	2000      	movs	r0, #0
 8008c62:	bd70      	pop	{r4, r5, r6, pc}
 8008c64:	89f3      	ldrh	r3, [r6, #14]
 8008c66:	429c      	cmp	r4, r3
 8008c68:	d1fa      	bne.n	8008c60 <ai_platform_get_activations_map+0x3c>
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	1f2b      	subs	r3, r5, #4
 8008c6e:	4608      	mov	r0, r1
 8008c70:	6932      	ldr	r2, [r6, #16]
 8008c72:	440a      	add	r2, r1
 8008c74:	311c      	adds	r1, #28
 8008c76:	6852      	ldr	r2, [r2, #4]
 8008c78:	b12a      	cbz	r2, 8008c86 <ai_platform_get_activations_map+0x62>
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	4284      	cmp	r4, r0
 8008c7e:	f843 2f04 	str.w	r2, [r3, #4]!
 8008c82:	d1f5      	bne.n	8008c70 <ai_platform_get_activations_map+0x4c>
 8008c84:	4620      	mov	r0, r4
 8008c86:	1a20      	subs	r0, r4, r0
 8008c88:	fab0 f080 	clz	r0, r0
 8008c8c:	0940      	lsrs	r0, r0, #5
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}
 8008c90:	6863      	ldr	r3, [r4, #4]
 8008c92:	42ab      	cmp	r3, r5
 8008c94:	f104 0404 	add.w	r4, r4, #4
 8008c98:	d0e2      	beq.n	8008c60 <ai_platform_get_activations_map+0x3c>
 8008c9a:	3804      	subs	r0, #4
 8008c9c:	4626      	mov	r6, r4
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	e003      	b.n	8008caa <ai_platform_get_activations_map+0x86>
 8008ca2:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8008ca6:	42ab      	cmp	r3, r5
 8008ca8:	d0da      	beq.n	8008c60 <ai_platform_get_activations_map+0x3c>
 8008caa:	3201      	adds	r2, #1
 8008cac:	4291      	cmp	r1, r2
 8008cae:	f840 3f04 	str.w	r3, [r0, #4]!
 8008cb2:	d1f6      	bne.n	8008ca2 <ai_platform_get_activations_map+0x7e>
 8008cb4:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8008cb8:	4b02      	ldr	r3, [pc, #8]	; (8008cc4 <ai_platform_get_activations_map+0xa0>)
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d1d0      	bne.n	8008c60 <ai_platform_get_activations_map+0x3c>
 8008cbe:	2001      	movs	r0, #1
 8008cc0:	bd70      	pop	{r4, r5, r6, pc}
 8008cc2:	bf00      	nop
 8008cc4:	a1facade 	.word	0xa1facade

08008cc8 <ai_platform_bind_network_params>:
 8008cc8:	4603      	mov	r3, r0
 8008cca:	b190      	cbz	r0, 8008cf2 <ai_platform_bind_network_params+0x2a>
 8008ccc:	b1a1      	cbz	r1, 8008cf8 <ai_platform_bind_network_params+0x30>
 8008cce:	b18a      	cbz	r2, 8008cf4 <ai_platform_bind_network_params+0x2c>
 8008cd0:	b410      	push	{r4}
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4809      	ldr	r0, [pc, #36]	; (8008cfc <ai_platform_bind_network_params+0x34>)
 8008cd6:	f844 0b04 	str.w	r0, [r4], #4
 8008cda:	c903      	ldmia	r1, {r0, r1}
 8008cdc:	e884 0003 	stmia.w	r4, {r0, r1}
 8008ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ce4:	330c      	adds	r3, #12
 8008ce6:	e883 0003 	stmia.w	r3, {r0, r1}
 8008cea:	2001      	movs	r0, #1
 8008cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	4770      	bx	lr
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4770      	bx	lr
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	4770      	bx	lr
 8008cfc:	a1facade 	.word	0xa1facade

08008d00 <ai_platform_network_get_error>:
 8008d00:	b510      	push	{r4, lr}
 8008d02:	b120      	cbz	r0, 8008d0e <ai_platform_network_get_error+0xe>
 8008d04:	4b32      	ldr	r3, [pc, #200]	; (8008dd0 <ai_platform_network_get_error+0xd0>)
 8008d06:	6802      	ldr	r2, [r0, #0]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	d02e      	beq.n	8008d6c <ai_platform_network_get_error+0x6c>
 8008d0e:	4a31      	ldr	r2, [pc, #196]	; (8008dd4 <ai_platform_network_get_error+0xd4>)
 8008d10:	6813      	ldr	r3, [r2, #0]
 8008d12:	f023 0301 	bic.w	r3, r3, #1
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	f7ff ff30 	bl	8008b7c <_ai_platform_acquire_crc>
 8008d1c:	4b2e      	ldr	r3, [pc, #184]	; (8008dd8 <ai_platform_network_get_error+0xd8>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d28:	d00d      	beq.n	8008d46 <ai_platform_network_get_error+0x46>
 8008d2a:	4b2c      	ldr	r3, [pc, #176]	; (8008ddc <ai_platform_network_get_error+0xdc>)
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	2a00      	cmp	r2, #0
 8008d34:	d1fc      	bne.n	8008d30 <ai_platform_network_get_error+0x30>
 8008d36:	4b2a      	ldr	r3, [pc, #168]	; (8008de0 <ai_platform_network_get_error+0xe0>)
 8008d38:	4a2a      	ldr	r2, [pc, #168]	; (8008de4 <ai_platform_network_get_error+0xe4>)
 8008d3a:	601a      	str	r2, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	4b2a      	ldr	r3, [pc, #168]	; (8008de8 <ai_platform_network_get_error+0xe8>)
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d00d      	beq.n	8008d60 <ai_platform_network_get_error+0x60>
 8008d44:	e7fe      	b.n	8008d44 <ai_platform_network_get_error+0x44>
 8008d46:	4b29      	ldr	r3, [pc, #164]	; (8008dec <ai_platform_network_get_error+0xec>)
 8008d48:	2201      	movs	r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	2a00      	cmp	r2, #0
 8008d50:	d1fc      	bne.n	8008d4c <ai_platform_network_get_error+0x4c>
 8008d52:	4b27      	ldr	r3, [pc, #156]	; (8008df0 <ai_platform_network_get_error+0xf0>)
 8008d54:	4a23      	ldr	r2, [pc, #140]	; (8008de4 <ai_platform_network_get_error+0xe4>)
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	4b23      	ldr	r3, [pc, #140]	; (8008de8 <ai_platform_network_get_error+0xe8>)
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d104      	bne.n	8008d6a <ai_platform_network_get_error+0x6a>
 8008d60:	f7ff ff0e 	bl	8008b80 <_ai_platform_release_crc>
 8008d64:	f241 0010 	movw	r0, #4112	; 0x1010
 8008d68:	bd10      	pop	{r4, pc}
 8008d6a:	e7fe      	b.n	8008d6a <ai_platform_network_get_error+0x6a>
 8008d6c:	4a19      	ldr	r2, [pc, #100]	; (8008dd4 <ai_platform_network_get_error+0xd4>)
 8008d6e:	6813      	ldr	r3, [r2, #0]
 8008d70:	f023 0301 	bic.w	r3, r3, #1
 8008d74:	6013      	str	r3, [r2, #0]
 8008d76:	f7ff ff01 	bl	8008b7c <_ai_platform_acquire_crc>
 8008d7a:	4b17      	ldr	r3, [pc, #92]	; (8008dd8 <ai_platform_network_get_error+0xd8>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d86:	d00d      	beq.n	8008da4 <ai_platform_network_get_error+0xa4>
 8008d88:	4b14      	ldr	r3, [pc, #80]	; (8008ddc <ai_platform_network_get_error+0xdc>)
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	2a00      	cmp	r2, #0
 8008d92:	d1fc      	bne.n	8008d8e <ai_platform_network_get_error+0x8e>
 8008d94:	4b12      	ldr	r3, [pc, #72]	; (8008de0 <ai_platform_network_get_error+0xe0>)
 8008d96:	4a13      	ldr	r2, [pc, #76]	; (8008de4 <ai_platform_network_get_error+0xe4>)
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	4b12      	ldr	r3, [pc, #72]	; (8008de8 <ai_platform_network_get_error+0xe8>)
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d00e      	beq.n	8008dc0 <ai_platform_network_get_error+0xc0>
 8008da2:	e7fe      	b.n	8008da2 <ai_platform_network_get_error+0xa2>
 8008da4:	4b11      	ldr	r3, [pc, #68]	; (8008dec <ai_platform_network_get_error+0xec>)
 8008da6:	2201      	movs	r2, #1
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	2a00      	cmp	r2, #0
 8008dae:	d1fc      	bne.n	8008daa <ai_platform_network_get_error+0xaa>
 8008db0:	4b0f      	ldr	r3, [pc, #60]	; (8008df0 <ai_platform_network_get_error+0xf0>)
 8008db2:	4a0c      	ldr	r2, [pc, #48]	; (8008de4 <ai_platform_network_get_error+0xe4>)
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	4b0b      	ldr	r3, [pc, #44]	; (8008de8 <ai_platform_network_get_error+0xe8>)
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d000      	beq.n	8008dc0 <ai_platform_network_get_error+0xc0>
 8008dbe:	e7fe      	b.n	8008dbe <ai_platform_network_get_error+0xbe>
 8008dc0:	f7ff fede 	bl	8008b80 <_ai_platform_release_crc>
 8008dc4:	f104 0010 	add.w	r0, r4, #16
 8008dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dcc:	f000 bef4 	b.w	8009bb8 <core_get_error>
 8008dd0:	a1c00100 	.word	0xa1c00100
 8008dd4:	e0002000 	.word	0xe0002000
 8008dd8:	e0042000 	.word	0xe0042000
 8008ddc:	58024c08 	.word	0x58024c08
 8008de0:	58024c00 	.word	0x58024c00
 8008de4:	f407a5c2 	.word	0xf407a5c2
 8008de8:	b5e8b5cd 	.word	0xb5e8b5cd
 8008dec:	40023008 	.word	0x40023008
 8008df0:	40023000 	.word	0x40023000

08008df4 <ai_platform_network_set_error>:
 8008df4:	b110      	cbz	r0, 8008dfc <ai_platform_network_set_error+0x8>
 8008df6:	3010      	adds	r0, #16
 8008df8:	f000 bee4 	b.w	8009bc4 <core_set_error>
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop

08008e00 <ai_platform_inputs_get>:
 8008e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e04:	b085      	sub	sp, #20
 8008e06:	2800      	cmp	r0, #0
 8008e08:	f000 80a1 	beq.w	8008f4e <ai_platform_inputs_get+0x14e>
 8008e0c:	4b6d      	ldr	r3, [pc, #436]	; (8008fc4 <ai_platform_inputs_get+0x1c4>)
 8008e0e:	6802      	ldr	r2, [r0, #0]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	4607      	mov	r7, r0
 8008e14:	f040 809b 	bne.w	8008f4e <ai_platform_inputs_get+0x14e>
 8008e18:	4a6b      	ldr	r2, [pc, #428]	; (8008fc8 <ai_platform_inputs_get+0x1c8>)
 8008e1a:	6813      	ldr	r3, [r2, #0]
 8008e1c:	f023 0301 	bic.w	r3, r3, #1
 8008e20:	6013      	str	r3, [r2, #0]
 8008e22:	468b      	mov	fp, r1
 8008e24:	f7ff feaa 	bl	8008b7c <_ai_platform_acquire_crc>
 8008e28:	4b68      	ldr	r3, [pc, #416]	; (8008fcc <ai_platform_inputs_get+0x1cc>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e34:	d00d      	beq.n	8008e52 <ai_platform_inputs_get+0x52>
 8008e36:	4b66      	ldr	r3, [pc, #408]	; (8008fd0 <ai_platform_inputs_get+0x1d0>)
 8008e38:	2201      	movs	r2, #1
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	2a00      	cmp	r2, #0
 8008e40:	d1fc      	bne.n	8008e3c <ai_platform_inputs_get+0x3c>
 8008e42:	4b64      	ldr	r3, [pc, #400]	; (8008fd4 <ai_platform_inputs_get+0x1d4>)
 8008e44:	4a64      	ldr	r2, [pc, #400]	; (8008fd8 <ai_platform_inputs_get+0x1d8>)
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	4b64      	ldr	r3, [pc, #400]	; (8008fdc <ai_platform_inputs_get+0x1dc>)
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d00d      	beq.n	8008e6c <ai_platform_inputs_get+0x6c>
 8008e50:	e7fe      	b.n	8008e50 <ai_platform_inputs_get+0x50>
 8008e52:	4b63      	ldr	r3, [pc, #396]	; (8008fe0 <ai_platform_inputs_get+0x1e0>)
 8008e54:	2201      	movs	r2, #1
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	2a00      	cmp	r2, #0
 8008e5c:	d1fc      	bne.n	8008e58 <ai_platform_inputs_get+0x58>
 8008e5e:	4b61      	ldr	r3, [pc, #388]	; (8008fe4 <ai_platform_inputs_get+0x1e4>)
 8008e60:	4a5d      	ldr	r2, [pc, #372]	; (8008fd8 <ai_platform_inputs_get+0x1d8>)
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	4b5d      	ldr	r3, [pc, #372]	; (8008fdc <ai_platform_inputs_get+0x1dc>)
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d16f      	bne.n	8008f4c <ai_platform_inputs_get+0x14c>
 8008e6c:	f7ff fe88 	bl	8008b80 <_ai_platform_release_crc>
 8008e70:	f1bb 0f00 	cmp.w	fp, #0
 8008e74:	d002      	beq.n	8008e7c <ai_platform_inputs_get+0x7c>
 8008e76:	2300      	movs	r3, #0
 8008e78:	f8ab 3000 	strh.w	r3, [fp]
 8008e7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 8081 	beq.w	8008f86 <ai_platform_inputs_get+0x186>
 8008e84:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8008e86:	2e00      	cmp	r6, #0
 8008e88:	d07d      	beq.n	8008f86 <ai_platform_inputs_get+0x186>
 8008e8a:	8833      	ldrh	r3, [r6, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d07a      	beq.n	8008f86 <ai_platform_inputs_get+0x186>
 8008e90:	6873      	ldr	r3, [r6, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d077      	beq.n	8008f86 <ai_platform_inputs_get+0x186>
 8008e96:	681d      	ldr	r5, [r3, #0]
 8008e98:	2d00      	cmp	r5, #0
 8008e9a:	d074      	beq.n	8008f86 <ai_platform_inputs_get+0x186>
 8008e9c:	f04f 0800 	mov.w	r8, #0
 8008ea0:	f8cd b008 	str.w	fp, [sp, #8]
 8008ea4:	46c1      	mov	r9, r8
 8008ea6:	46bb      	mov	fp, r7
 8008ea8:	68b0      	ldr	r0, [r6, #8]
 8008eaa:	69aa      	ldr	r2, [r5, #24]
 8008eac:	68ab      	ldr	r3, [r5, #8]
 8008eae:	6844      	ldr	r4, [r0, #4]
 8008eb0:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8008eb4:	6810      	ldr	r0, [r2, #0]
 8008eb6:	68ef      	ldr	r7, [r5, #12]
 8008eb8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8008ebc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	9203      	str	r2, [sp, #12]
 8008ec4:	f001 fbd6 	bl	800a674 <ai_array_to_buffer_fmt>
 8008ec8:	9a03      	ldr	r2, [sp, #12]
 8008eca:	4601      	mov	r1, r0
 8008ecc:	69a8      	ldr	r0, [r5, #24]
 8008ece:	eb0a 0302 	add.w	r3, sl, r2
 8008ed2:	4444      	add	r4, r8
 8008ed4:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8008ed8:	b16b      	cbz	r3, 8008ef6 <ai_platform_inputs_get+0xf6>
 8008eda:	2000      	movs	r0, #0
 8008edc:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8008ee0:	6828      	ldr	r0, [r5, #0]
 8008ee2:	6058      	str	r0, [r3, #4]
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d058      	beq.n	8008f9a <ai_platform_inputs_get+0x19a>
 8008ee8:	8840      	ldrh	r0, [r0, #2]
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d055      	beq.n	8008f9a <ai_platform_inputs_get+0x19a>
 8008eee:	2001      	movs	r0, #1
 8008ef0:	f84a 0002 	str.w	r0, [sl, r2]
 8008ef4:	69a8      	ldr	r0, [r5, #24]
 8008ef6:	6842      	ldr	r2, [r0, #4]
 8008ef8:	6122      	str	r2, [r4, #16]
 8008efa:	f04f 0001 	mov.w	r0, #1
 8008efe:	7520      	strb	r0, [r4, #20]
 8008f00:	9a01      	ldr	r2, [sp, #4]
 8008f02:	6960      	ldr	r0, [r4, #20]
 8008f04:	60a3      	str	r3, [r4, #8]
 8008f06:	f362 201f 	bfi	r0, r2, #8, #24
 8008f0a:	e9c4 1e00 	strd	r1, lr, [r4]
 8008f0e:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8008f12:	2300      	movs	r3, #0
 8008f14:	60e3      	str	r3, [r4, #12]
 8008f16:	8830      	ldrh	r0, [r6, #0]
 8008f18:	f109 0301 	add.w	r3, r9, #1
 8008f1c:	4283      	cmp	r3, r0
 8008f1e:	4699      	mov	r9, r3
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	d207      	bcs.n	8008f34 <ai_platform_inputs_get+0x134>
 8008f24:	6870      	ldr	r0, [r6, #4]
 8008f26:	b128      	cbz	r0, 8008f34 <ai_platform_inputs_get+0x134>
 8008f28:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8008f2c:	f108 081c 	add.w	r8, r8, #28
 8008f30:	2d00      	cmp	r5, #0
 8008f32:	d1b9      	bne.n	8008ea8 <ai_platform_inputs_get+0xa8>
 8008f34:	465f      	mov	r7, fp
 8008f36:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008f3a:	b322      	cbz	r2, 8008f86 <ai_platform_inputs_get+0x186>
 8008f3c:	68b3      	ldr	r3, [r6, #8]
 8008f3e:	6858      	ldr	r0, [r3, #4]
 8008f40:	f1bb 0f00 	cmp.w	fp, #0
 8008f44:	d026      	beq.n	8008f94 <ai_platform_inputs_get+0x194>
 8008f46:	f8ab 2000 	strh.w	r2, [fp]
 8008f4a:	e023      	b.n	8008f94 <ai_platform_inputs_get+0x194>
 8008f4c:	e7fe      	b.n	8008f4c <ai_platform_inputs_get+0x14c>
 8008f4e:	4a1e      	ldr	r2, [pc, #120]	; (8008fc8 <ai_platform_inputs_get+0x1c8>)
 8008f50:	6813      	ldr	r3, [r2, #0]
 8008f52:	f023 0301 	bic.w	r3, r3, #1
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	f7ff fe10 	bl	8008b7c <_ai_platform_acquire_crc>
 8008f5c:	4b1b      	ldr	r3, [pc, #108]	; (8008fcc <ai_platform_inputs_get+0x1cc>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f68:	d01a      	beq.n	8008fa0 <ai_platform_inputs_get+0x1a0>
 8008f6a:	4b19      	ldr	r3, [pc, #100]	; (8008fd0 <ai_platform_inputs_get+0x1d0>)
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	2a00      	cmp	r2, #0
 8008f74:	d1fc      	bne.n	8008f70 <ai_platform_inputs_get+0x170>
 8008f76:	4b17      	ldr	r3, [pc, #92]	; (8008fd4 <ai_platform_inputs_get+0x1d4>)
 8008f78:	4a17      	ldr	r2, [pc, #92]	; (8008fd8 <ai_platform_inputs_get+0x1d8>)
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	4b17      	ldr	r3, [pc, #92]	; (8008fdc <ai_platform_inputs_get+0x1dc>)
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d01b      	beq.n	8008fbc <ai_platform_inputs_get+0x1bc>
 8008f84:	e7fe      	b.n	8008f84 <ai_platform_inputs_get+0x184>
 8008f86:	f107 0010 	add.w	r0, r7, #16
 8008f8a:	2218      	movs	r2, #24
 8008f8c:	2111      	movs	r1, #17
 8008f8e:	f000 fe19 	bl	8009bc4 <core_set_error>
 8008f92:	2000      	movs	r0, #0
 8008f94:	b005      	add	sp, #20
 8008f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f9a:	69a8      	ldr	r0, [r5, #24]
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	e7aa      	b.n	8008ef6 <ai_platform_inputs_get+0xf6>
 8008fa0:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <ai_platform_inputs_get+0x1e0>)
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	2a00      	cmp	r2, #0
 8008faa:	d1fc      	bne.n	8008fa6 <ai_platform_inputs_get+0x1a6>
 8008fac:	4b0d      	ldr	r3, [pc, #52]	; (8008fe4 <ai_platform_inputs_get+0x1e4>)
 8008fae:	4a0a      	ldr	r2, [pc, #40]	; (8008fd8 <ai_platform_inputs_get+0x1d8>)
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	4b09      	ldr	r3, [pc, #36]	; (8008fdc <ai_platform_inputs_get+0x1dc>)
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d000      	beq.n	8008fbc <ai_platform_inputs_get+0x1bc>
 8008fba:	e7fe      	b.n	8008fba <ai_platform_inputs_get+0x1ba>
 8008fbc:	f7ff fde0 	bl	8008b80 <_ai_platform_release_crc>
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	e7e7      	b.n	8008f94 <ai_platform_inputs_get+0x194>
 8008fc4:	a1c00100 	.word	0xa1c00100
 8008fc8:	e0002000 	.word	0xe0002000
 8008fcc:	e0042000 	.word	0xe0042000
 8008fd0:	58024c08 	.word	0x58024c08
 8008fd4:	58024c00 	.word	0x58024c00
 8008fd8:	f407a5c2 	.word	0xf407a5c2
 8008fdc:	b5e8b5cd 	.word	0xb5e8b5cd
 8008fe0:	40023008 	.word	0x40023008
 8008fe4:	40023000 	.word	0x40023000

08008fe8 <ai_platform_outputs_get>:
 8008fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fec:	b085      	sub	sp, #20
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	f000 80a9 	beq.w	8009146 <ai_platform_outputs_get+0x15e>
 8008ff4:	4b70      	ldr	r3, [pc, #448]	; (80091b8 <ai_platform_outputs_get+0x1d0>)
 8008ff6:	6802      	ldr	r2, [r0, #0]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	4607      	mov	r7, r0
 8008ffc:	f040 80a3 	bne.w	8009146 <ai_platform_outputs_get+0x15e>
 8009000:	4a6e      	ldr	r2, [pc, #440]	; (80091bc <ai_platform_outputs_get+0x1d4>)
 8009002:	6813      	ldr	r3, [r2, #0]
 8009004:	f023 0301 	bic.w	r3, r3, #1
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	468b      	mov	fp, r1
 800900c:	f7ff fdb6 	bl	8008b7c <_ai_platform_acquire_crc>
 8009010:	4b6b      	ldr	r3, [pc, #428]	; (80091c0 <ai_platform_outputs_get+0x1d8>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800901c:	d00d      	beq.n	800903a <ai_platform_outputs_get+0x52>
 800901e:	4b69      	ldr	r3, [pc, #420]	; (80091c4 <ai_platform_outputs_get+0x1dc>)
 8009020:	2201      	movs	r2, #1
 8009022:	601a      	str	r2, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	2a00      	cmp	r2, #0
 8009028:	d1fc      	bne.n	8009024 <ai_platform_outputs_get+0x3c>
 800902a:	4b67      	ldr	r3, [pc, #412]	; (80091c8 <ai_platform_outputs_get+0x1e0>)
 800902c:	4a67      	ldr	r2, [pc, #412]	; (80091cc <ai_platform_outputs_get+0x1e4>)
 800902e:	601a      	str	r2, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	4b67      	ldr	r3, [pc, #412]	; (80091d0 <ai_platform_outputs_get+0x1e8>)
 8009034:	429a      	cmp	r2, r3
 8009036:	d00d      	beq.n	8009054 <ai_platform_outputs_get+0x6c>
 8009038:	e7fe      	b.n	8009038 <ai_platform_outputs_get+0x50>
 800903a:	4b66      	ldr	r3, [pc, #408]	; (80091d4 <ai_platform_outputs_get+0x1ec>)
 800903c:	2201      	movs	r2, #1
 800903e:	601a      	str	r2, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	2a00      	cmp	r2, #0
 8009044:	d1fc      	bne.n	8009040 <ai_platform_outputs_get+0x58>
 8009046:	4b64      	ldr	r3, [pc, #400]	; (80091d8 <ai_platform_outputs_get+0x1f0>)
 8009048:	4a60      	ldr	r2, [pc, #384]	; (80091cc <ai_platform_outputs_get+0x1e4>)
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	4b60      	ldr	r3, [pc, #384]	; (80091d0 <ai_platform_outputs_get+0x1e8>)
 8009050:	429a      	cmp	r2, r3
 8009052:	d177      	bne.n	8009144 <ai_platform_outputs_get+0x15c>
 8009054:	f7ff fd94 	bl	8008b80 <_ai_platform_release_crc>
 8009058:	f1bb 0f00 	cmp.w	fp, #0
 800905c:	d002      	beq.n	8009064 <ai_platform_outputs_get+0x7c>
 800905e:	2300      	movs	r3, #0
 8009060:	f8ab 3000 	strh.w	r3, [fp]
 8009064:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009066:	2b01      	cmp	r3, #1
 8009068:	f240 809a 	bls.w	80091a0 <ai_platform_outputs_get+0x1b8>
 800906c:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800906e:	f116 0f0c 	cmn.w	r6, #12
 8009072:	f000 8095 	beq.w	80091a0 <ai_platform_outputs_get+0x1b8>
 8009076:	89b3      	ldrh	r3, [r6, #12]
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 8091 	beq.w	80091a0 <ai_platform_outputs_get+0x1b8>
 800907e:	6933      	ldr	r3, [r6, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 808d 	beq.w	80091a0 <ai_platform_outputs_get+0x1b8>
 8009086:	681d      	ldr	r5, [r3, #0]
 8009088:	2d00      	cmp	r5, #0
 800908a:	f000 8089 	beq.w	80091a0 <ai_platform_outputs_get+0x1b8>
 800908e:	f04f 0800 	mov.w	r8, #0
 8009092:	f8cd b008 	str.w	fp, [sp, #8]
 8009096:	46c1      	mov	r9, r8
 8009098:	46bb      	mov	fp, r7
 800909a:	6970      	ldr	r0, [r6, #20]
 800909c:	69aa      	ldr	r2, [r5, #24]
 800909e:	68ab      	ldr	r3, [r5, #8]
 80090a0:	6844      	ldr	r4, [r0, #4]
 80090a2:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80090a6:	6810      	ldr	r0, [r2, #0]
 80090a8:	68ef      	ldr	r7, [r5, #12]
 80090aa:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80090ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80090b2:	9301      	str	r3, [sp, #4]
 80090b4:	9203      	str	r2, [sp, #12]
 80090b6:	f001 fadd 	bl	800a674 <ai_array_to_buffer_fmt>
 80090ba:	9a03      	ldr	r2, [sp, #12]
 80090bc:	4601      	mov	r1, r0
 80090be:	69a8      	ldr	r0, [r5, #24]
 80090c0:	eb0a 0302 	add.w	r3, sl, r2
 80090c4:	4444      	add	r4, r8
 80090c6:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80090ca:	b16b      	cbz	r3, 80090e8 <ai_platform_outputs_get+0x100>
 80090cc:	2000      	movs	r0, #0
 80090ce:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 80090d2:	6828      	ldr	r0, [r5, #0]
 80090d4:	6058      	str	r0, [r3, #4]
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d051      	beq.n	800917e <ai_platform_outputs_get+0x196>
 80090da:	8840      	ldrh	r0, [r0, #2]
 80090dc:	2800      	cmp	r0, #0
 80090de:	d04e      	beq.n	800917e <ai_platform_outputs_get+0x196>
 80090e0:	2001      	movs	r0, #1
 80090e2:	f84a 0002 	str.w	r0, [sl, r2]
 80090e6:	69a8      	ldr	r0, [r5, #24]
 80090e8:	6842      	ldr	r2, [r0, #4]
 80090ea:	6122      	str	r2, [r4, #16]
 80090ec:	f04f 0001 	mov.w	r0, #1
 80090f0:	7520      	strb	r0, [r4, #20]
 80090f2:	9a01      	ldr	r2, [sp, #4]
 80090f4:	6960      	ldr	r0, [r4, #20]
 80090f6:	60a3      	str	r3, [r4, #8]
 80090f8:	f362 201f 	bfi	r0, r2, #8, #24
 80090fc:	e9c4 1e00 	strd	r1, lr, [r4]
 8009100:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8009104:	2300      	movs	r3, #0
 8009106:	60e3      	str	r3, [r4, #12]
 8009108:	89b0      	ldrh	r0, [r6, #12]
 800910a:	f109 0301 	add.w	r3, r9, #1
 800910e:	4283      	cmp	r3, r0
 8009110:	4699      	mov	r9, r3
 8009112:	b29a      	uxth	r2, r3
 8009114:	d207      	bcs.n	8009126 <ai_platform_outputs_get+0x13e>
 8009116:	6930      	ldr	r0, [r6, #16]
 8009118:	b128      	cbz	r0, 8009126 <ai_platform_outputs_get+0x13e>
 800911a:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 800911e:	f108 081c 	add.w	r8, r8, #28
 8009122:	2d00      	cmp	r5, #0
 8009124:	d1b9      	bne.n	800909a <ai_platform_outputs_get+0xb2>
 8009126:	465f      	mov	r7, fp
 8009128:	f8dd b008 	ldr.w	fp, [sp, #8]
 800912c:	2a00      	cmp	r2, #0
 800912e:	d037      	beq.n	80091a0 <ai_platform_outputs_get+0x1b8>
 8009130:	6973      	ldr	r3, [r6, #20]
 8009132:	6858      	ldr	r0, [r3, #4]
 8009134:	f1bb 0f00 	cmp.w	fp, #0
 8009138:	d001      	beq.n	800913e <ai_platform_outputs_get+0x156>
 800913a:	f8ab 2000 	strh.w	r2, [fp]
 800913e:	b005      	add	sp, #20
 8009140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009144:	e7fe      	b.n	8009144 <ai_platform_outputs_get+0x15c>
 8009146:	4a1d      	ldr	r2, [pc, #116]	; (80091bc <ai_platform_outputs_get+0x1d4>)
 8009148:	6813      	ldr	r3, [r2, #0]
 800914a:	f023 0301 	bic.w	r3, r3, #1
 800914e:	6013      	str	r3, [r2, #0]
 8009150:	f7ff fd14 	bl	8008b7c <_ai_platform_acquire_crc>
 8009154:	4b1a      	ldr	r3, [pc, #104]	; (80091c0 <ai_platform_outputs_get+0x1d8>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800915c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009160:	d010      	beq.n	8009184 <ai_platform_outputs_get+0x19c>
 8009162:	4b18      	ldr	r3, [pc, #96]	; (80091c4 <ai_platform_outputs_get+0x1dc>)
 8009164:	2201      	movs	r2, #1
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	2a00      	cmp	r2, #0
 800916c:	d1fc      	bne.n	8009168 <ai_platform_outputs_get+0x180>
 800916e:	4b16      	ldr	r3, [pc, #88]	; (80091c8 <ai_platform_outputs_get+0x1e0>)
 8009170:	4a16      	ldr	r2, [pc, #88]	; (80091cc <ai_platform_outputs_get+0x1e4>)
 8009172:	601a      	str	r2, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	4b16      	ldr	r3, [pc, #88]	; (80091d0 <ai_platform_outputs_get+0x1e8>)
 8009178:	429a      	cmp	r2, r3
 800917a:	d019      	beq.n	80091b0 <ai_platform_outputs_get+0x1c8>
 800917c:	e7fe      	b.n	800917c <ai_platform_outputs_get+0x194>
 800917e:	69a8      	ldr	r0, [r5, #24]
 8009180:	2300      	movs	r3, #0
 8009182:	e7b1      	b.n	80090e8 <ai_platform_outputs_get+0x100>
 8009184:	4b13      	ldr	r3, [pc, #76]	; (80091d4 <ai_platform_outputs_get+0x1ec>)
 8009186:	2201      	movs	r2, #1
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	2a00      	cmp	r2, #0
 800918e:	d1fc      	bne.n	800918a <ai_platform_outputs_get+0x1a2>
 8009190:	4b11      	ldr	r3, [pc, #68]	; (80091d8 <ai_platform_outputs_get+0x1f0>)
 8009192:	4a0e      	ldr	r2, [pc, #56]	; (80091cc <ai_platform_outputs_get+0x1e4>)
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	4b0d      	ldr	r3, [pc, #52]	; (80091d0 <ai_platform_outputs_get+0x1e8>)
 800919a:	429a      	cmp	r2, r3
 800919c:	d008      	beq.n	80091b0 <ai_platform_outputs_get+0x1c8>
 800919e:	e7fe      	b.n	800919e <ai_platform_outputs_get+0x1b6>
 80091a0:	f107 0010 	add.w	r0, r7, #16
 80091a4:	2218      	movs	r2, #24
 80091a6:	2111      	movs	r1, #17
 80091a8:	f000 fd0c 	bl	8009bc4 <core_set_error>
 80091ac:	2000      	movs	r0, #0
 80091ae:	e7c6      	b.n	800913e <ai_platform_outputs_get+0x156>
 80091b0:	f7ff fce6 	bl	8008b80 <_ai_platform_release_crc>
 80091b4:	2000      	movs	r0, #0
 80091b6:	e7c2      	b.n	800913e <ai_platform_outputs_get+0x156>
 80091b8:	a1c00100 	.word	0xa1c00100
 80091bc:	e0002000 	.word	0xe0002000
 80091c0:	e0042000 	.word	0xe0042000
 80091c4:	58024c08 	.word	0x58024c08
 80091c8:	58024c00 	.word	0x58024c00
 80091cc:	f407a5c2 	.word	0xf407a5c2
 80091d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80091d4:	40023008 	.word	0x40023008
 80091d8:	40023000 	.word	0x40023000

080091dc <ai_platform_network_create>:
 80091dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091e0:	b083      	sub	sp, #12
 80091e2:	4606      	mov	r6, r0
 80091e4:	4615      	mov	r5, r2
 80091e6:	461f      	mov	r7, r3
 80091e8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80091ec:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80091f0:	f7ff fcc4 	bl	8008b7c <_ai_platform_acquire_crc>
 80091f4:	b178      	cbz	r0, 8009216 <ai_platform_network_create+0x3a>
 80091f6:	4b5f      	ldr	r3, [pc, #380]	; (8009374 <ai_platform_network_create+0x198>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009202:	4602      	mov	r2, r0
 8009204:	d00d      	beq.n	8009222 <ai_platform_network_create+0x46>
 8009206:	4b5c      	ldr	r3, [pc, #368]	; (8009378 <ai_platform_network_create+0x19c>)
 8009208:	2118      	movs	r1, #24
 800920a:	6019      	str	r1, [r3, #0]
 800920c:	6819      	ldr	r1, [r3, #0]
 800920e:	2918      	cmp	r1, #24
 8009210:	d01a      	beq.n	8009248 <ai_platform_network_create+0x6c>
 8009212:	f7ff fcb5 	bl	8008b80 <_ai_platform_release_crc>
 8009216:	f244 1333 	movw	r3, #16691	; 0x4133
 800921a:	4618      	mov	r0, r3
 800921c:	b003      	add	sp, #12
 800921e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009222:	4b56      	ldr	r3, [pc, #344]	; (800937c <ai_platform_network_create+0x1a0>)
 8009224:	2101      	movs	r1, #1
 8009226:	6019      	str	r1, [r3, #0]
 8009228:	2114      	movs	r1, #20
 800922a:	e001      	b.n	8009230 <ai_platform_network_create+0x54>
 800922c:	3901      	subs	r1, #1
 800922e:	d002      	beq.n	8009236 <ai_platform_network_create+0x5a>
 8009230:	6818      	ldr	r0, [r3, #0]
 8009232:	2800      	cmp	r0, #0
 8009234:	d1fa      	bne.n	800922c <ai_platform_network_create+0x50>
 8009236:	4b51      	ldr	r3, [pc, #324]	; (800937c <ai_platform_network_create+0x1a0>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	b91b      	cbnz	r3, 8009244 <ai_platform_network_create+0x68>
 800923c:	4b50      	ldr	r3, [pc, #320]	; (8009380 <ai_platform_network_create+0x1a4>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3301      	adds	r3, #1
 8009242:	d006      	beq.n	8009252 <ai_platform_network_create+0x76>
 8009244:	4610      	mov	r0, r2
 8009246:	e7e4      	b.n	8009212 <ai_platform_network_create+0x36>
 8009248:	2101      	movs	r1, #1
 800924a:	6019      	str	r1, [r3, #0]
 800924c:	6819      	ldr	r1, [r3, #0]
 800924e:	2900      	cmp	r1, #0
 8009250:	d1fc      	bne.n	800924c <ai_platform_network_create+0x70>
 8009252:	4610      	mov	r0, r2
 8009254:	f7ff fc94 	bl	8008b80 <_ai_platform_release_crc>
 8009258:	4a4a      	ldr	r2, [pc, #296]	; (8009384 <ai_platform_network_create+0x1a8>)
 800925a:	6813      	ldr	r3, [r2, #0]
 800925c:	f023 0301 	bic.w	r3, r3, #1
 8009260:	6013      	str	r3, [r2, #0]
 8009262:	f7ff fc8b 	bl	8008b7c <_ai_platform_acquire_crc>
 8009266:	4b43      	ldr	r3, [pc, #268]	; (8009374 <ai_platform_network_create+0x198>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800926e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009272:	d00d      	beq.n	8009290 <ai_platform_network_create+0xb4>
 8009274:	4b40      	ldr	r3, [pc, #256]	; (8009378 <ai_platform_network_create+0x19c>)
 8009276:	2201      	movs	r2, #1
 8009278:	601a      	str	r2, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	2a00      	cmp	r2, #0
 800927e:	d1fc      	bne.n	800927a <ai_platform_network_create+0x9e>
 8009280:	4b41      	ldr	r3, [pc, #260]	; (8009388 <ai_platform_network_create+0x1ac>)
 8009282:	4a42      	ldr	r2, [pc, #264]	; (800938c <ai_platform_network_create+0x1b0>)
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	4b41      	ldr	r3, [pc, #260]	; (8009390 <ai_platform_network_create+0x1b4>)
 800928a:	429a      	cmp	r2, r3
 800928c:	d00e      	beq.n	80092ac <ai_platform_network_create+0xd0>
 800928e:	e7fe      	b.n	800928e <ai_platform_network_create+0xb2>
 8009290:	4b3a      	ldr	r3, [pc, #232]	; (800937c <ai_platform_network_create+0x1a0>)
 8009292:	2201      	movs	r2, #1
 8009294:	601a      	str	r2, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	2a00      	cmp	r2, #0
 800929a:	d1fc      	bne.n	8009296 <ai_platform_network_create+0xba>
 800929c:	4b38      	ldr	r3, [pc, #224]	; (8009380 <ai_platform_network_create+0x1a4>)
 800929e:	4a3b      	ldr	r2, [pc, #236]	; (800938c <ai_platform_network_create+0x1b0>)
 80092a0:	601a      	str	r2, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	4b3a      	ldr	r3, [pc, #232]	; (8009390 <ai_platform_network_create+0x1b4>)
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d000      	beq.n	80092ac <ai_platform_network_create+0xd0>
 80092aa:	e7fe      	b.n	80092aa <ai_platform_network_create+0xce>
 80092ac:	f7ff fc68 	bl	8008b80 <_ai_platform_release_crc>
 80092b0:	b1ae      	cbz	r6, 80092de <ai_platform_network_create+0x102>
 80092b2:	4b38      	ldr	r3, [pc, #224]	; (8009394 <ai_platform_network_create+0x1b8>)
 80092b4:	602b      	str	r3, [r5, #0]
 80092b6:	6035      	str	r5, [r6, #0]
 80092b8:	f000 fc7c 	bl	8009bb4 <core_init>
 80092bc:	b990      	cbnz	r0, 80092e4 <ai_platform_network_create+0x108>
 80092be:	2430      	movs	r4, #48	; 0x30
 80092c0:	2300      	movs	r3, #0
 80092c2:	6033      	str	r3, [r6, #0]
 80092c4:	2610      	movs	r6, #16
 80092c6:	464a      	mov	r2, r9
 80092c8:	4641      	mov	r1, r8
 80092ca:	4638      	mov	r0, r7
 80092cc:	f001 f9b8 	bl	800a640 <ai_version_get>
 80092d0:	2300      	movs	r3, #0
 80092d2:	f364 0307 	bfi	r3, r4, #0, #8
 80092d6:	6468      	str	r0, [r5, #68]	; 0x44
 80092d8:	f366 231f 	bfi	r3, r6, #8, #24
 80092dc:	e79d      	b.n	800921a <ai_platform_network_create+0x3e>
 80092de:	f241 0310 	movw	r3, #4112	; 0x1010
 80092e2:	e79a      	b.n	800921a <ai_platform_network_create+0x3e>
 80092e4:	4a27      	ldr	r2, [pc, #156]	; (8009384 <ai_platform_network_create+0x1a8>)
 80092e6:	6813      	ldr	r3, [r2, #0]
 80092e8:	f023 0301 	bic.w	r3, r3, #1
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	f7ff fc45 	bl	8008b7c <_ai_platform_acquire_crc>
 80092f2:	4b20      	ldr	r3, [pc, #128]	; (8009374 <ai_platform_network_create+0x198>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092fe:	d00d      	beq.n	800931c <ai_platform_network_create+0x140>
 8009300:	4b1d      	ldr	r3, [pc, #116]	; (8009378 <ai_platform_network_create+0x19c>)
 8009302:	2201      	movs	r2, #1
 8009304:	601a      	str	r2, [r3, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	2a00      	cmp	r2, #0
 800930a:	d1fc      	bne.n	8009306 <ai_platform_network_create+0x12a>
 800930c:	4b1e      	ldr	r3, [pc, #120]	; (8009388 <ai_platform_network_create+0x1ac>)
 800930e:	4a1f      	ldr	r2, [pc, #124]	; (800938c <ai_platform_network_create+0x1b0>)
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	4b1e      	ldr	r3, [pc, #120]	; (8009390 <ai_platform_network_create+0x1b4>)
 8009316:	429a      	cmp	r2, r3
 8009318:	d00e      	beq.n	8009338 <ai_platform_network_create+0x15c>
 800931a:	e7fe      	b.n	800931a <ai_platform_network_create+0x13e>
 800931c:	4b17      	ldr	r3, [pc, #92]	; (800937c <ai_platform_network_create+0x1a0>)
 800931e:	2201      	movs	r2, #1
 8009320:	601a      	str	r2, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	2a00      	cmp	r2, #0
 8009326:	d1fc      	bne.n	8009322 <ai_platform_network_create+0x146>
 8009328:	4b15      	ldr	r3, [pc, #84]	; (8009380 <ai_platform_network_create+0x1a4>)
 800932a:	4a18      	ldr	r2, [pc, #96]	; (800938c <ai_platform_network_create+0x1b0>)
 800932c:	601a      	str	r2, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	4b17      	ldr	r3, [pc, #92]	; (8009390 <ai_platform_network_create+0x1b4>)
 8009332:	429a      	cmp	r2, r3
 8009334:	d000      	beq.n	8009338 <ai_platform_network_create+0x15c>
 8009336:	e7fe      	b.n	8009336 <ai_platform_network_create+0x15a>
 8009338:	f7ff fc22 	bl	8008b80 <_ai_platform_release_crc>
 800933c:	2200      	movs	r2, #0
 800933e:	4641      	mov	r1, r8
 8009340:	4638      	mov	r0, r7
 8009342:	f001 f97d 	bl	800a640 <ai_version_get>
 8009346:	2200      	movs	r2, #0
 8009348:	4604      	mov	r4, r0
 800934a:	2105      	movs	r1, #5
 800934c:	2001      	movs	r0, #1
 800934e:	f001 f977 	bl	800a640 <ai_version_get>
 8009352:	4284      	cmp	r4, r0
 8009354:	d001      	beq.n	800935a <ai_platform_network_create+0x17e>
 8009356:	2401      	movs	r4, #1
 8009358:	e7b2      	b.n	80092c0 <ai_platform_network_create+0xe4>
 800935a:	a802      	add	r0, sp, #8
 800935c:	4b0e      	ldr	r3, [pc, #56]	; (8009398 <ai_platform_network_create+0x1bc>)
 800935e:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009362:	f001 f8c9 	bl	800a4f8 <ai_check_custom_types>
 8009366:	b110      	cbz	r0, 800936e <ai_platform_network_create+0x192>
 8009368:	2600      	movs	r6, #0
 800936a:	4634      	mov	r4, r6
 800936c:	e7ab      	b.n	80092c6 <ai_platform_network_create+0xea>
 800936e:	2402      	movs	r4, #2
 8009370:	e7a6      	b.n	80092c0 <ai_platform_network_create+0xe4>
 8009372:	bf00      	nop
 8009374:	e0042000 	.word	0xe0042000
 8009378:	58024c08 	.word	0x58024c08
 800937c:	40023008 	.word	0x40023008
 8009380:	40023000 	.word	0x40023000
 8009384:	e0002000 	.word	0xe0002000
 8009388:	58024c00 	.word	0x58024c00
 800938c:	f407a5c2 	.word	0xf407a5c2
 8009390:	b5e8b5cd 	.word	0xb5e8b5cd
 8009394:	a1c00100 	.word	0xa1c00100
 8009398:	84048403 	.word	0x84048403

0800939c <ai_platform_network_init>:
 800939c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093a0:	2800      	cmp	r0, #0
 80093a2:	d04b      	beq.n	800943c <ai_platform_network_init+0xa0>
 80093a4:	4b79      	ldr	r3, [pc, #484]	; (800958c <ai_platform_network_init+0x1f0>)
 80093a6:	6802      	ldr	r2, [r0, #0]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	4604      	mov	r4, r0
 80093ac:	d146      	bne.n	800943c <ai_platform_network_init+0xa0>
 80093ae:	4a78      	ldr	r2, [pc, #480]	; (8009590 <ai_platform_network_init+0x1f4>)
 80093b0:	6813      	ldr	r3, [r2, #0]
 80093b2:	f023 0301 	bic.w	r3, r3, #1
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	460e      	mov	r6, r1
 80093ba:	f7ff fbdf 	bl	8008b7c <_ai_platform_acquire_crc>
 80093be:	4b75      	ldr	r3, [pc, #468]	; (8009594 <ai_platform_network_init+0x1f8>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093ca:	d00d      	beq.n	80093e8 <ai_platform_network_init+0x4c>
 80093cc:	4b72      	ldr	r3, [pc, #456]	; (8009598 <ai_platform_network_init+0x1fc>)
 80093ce:	2201      	movs	r2, #1
 80093d0:	601a      	str	r2, [r3, #0]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	2a00      	cmp	r2, #0
 80093d6:	d1fc      	bne.n	80093d2 <ai_platform_network_init+0x36>
 80093d8:	4b70      	ldr	r3, [pc, #448]	; (800959c <ai_platform_network_init+0x200>)
 80093da:	4a71      	ldr	r2, [pc, #452]	; (80095a0 <ai_platform_network_init+0x204>)
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	4b70      	ldr	r3, [pc, #448]	; (80095a4 <ai_platform_network_init+0x208>)
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d00d      	beq.n	8009402 <ai_platform_network_init+0x66>
 80093e6:	e7fe      	b.n	80093e6 <ai_platform_network_init+0x4a>
 80093e8:	4b6f      	ldr	r3, [pc, #444]	; (80095a8 <ai_platform_network_init+0x20c>)
 80093ea:	2201      	movs	r2, #1
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	2a00      	cmp	r2, #0
 80093f2:	d1fc      	bne.n	80093ee <ai_platform_network_init+0x52>
 80093f4:	4b6d      	ldr	r3, [pc, #436]	; (80095ac <ai_platform_network_init+0x210>)
 80093f6:	4a6a      	ldr	r2, [pc, #424]	; (80095a0 <ai_platform_network_init+0x204>)
 80093f8:	601a      	str	r2, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	4b69      	ldr	r3, [pc, #420]	; (80095a4 <ai_platform_network_init+0x208>)
 80093fe:	429a      	cmp	r2, r3
 8009400:	d11b      	bne.n	800943a <ai_platform_network_init+0x9e>
 8009402:	f7ff fbbd 	bl	8008b80 <_ai_platform_release_crc>
 8009406:	2e00      	cmp	r6, #0
 8009408:	d034      	beq.n	8009474 <ai_platform_network_init+0xd8>
 800940a:	4b69      	ldr	r3, [pc, #420]	; (80095b0 <ai_platform_network_init+0x214>)
 800940c:	6832      	ldr	r2, [r6, #0]
 800940e:	429a      	cmp	r2, r3
 8009410:	d149      	bne.n	80094a6 <ai_platform_network_init+0x10a>
 8009412:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8009416:	6930      	ldr	r0, [r6, #16]
 8009418:	89b3      	ldrh	r3, [r6, #12]
 800941a:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 800941e:	62a0      	str	r0, [r4, #40]	; 0x28
 8009420:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8009424:	2203      	movs	r2, #3
 8009426:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800942a:	84a3      	strh	r3, [r4, #36]	; 0x24
 800942c:	60e2      	str	r2, [r4, #12]
 800942e:	4620      	mov	r0, r4
 8009430:	f001 f88c 	bl	800a54c <ai_layers_init_all>
 8009434:	4620      	mov	r0, r4
 8009436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800943a:	e7fe      	b.n	800943a <ai_platform_network_init+0x9e>
 800943c:	4a54      	ldr	r2, [pc, #336]	; (8009590 <ai_platform_network_init+0x1f4>)
 800943e:	6813      	ldr	r3, [r2, #0]
 8009440:	f023 0301 	bic.w	r3, r3, #1
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	f7ff fb99 	bl	8008b7c <_ai_platform_acquire_crc>
 800944a:	4b52      	ldr	r3, [pc, #328]	; (8009594 <ai_platform_network_init+0x1f8>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009456:	d015      	beq.n	8009484 <ai_platform_network_init+0xe8>
 8009458:	4b4f      	ldr	r3, [pc, #316]	; (8009598 <ai_platform_network_init+0x1fc>)
 800945a:	2201      	movs	r2, #1
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	2a00      	cmp	r2, #0
 8009462:	d1fc      	bne.n	800945e <ai_platform_network_init+0xc2>
 8009464:	4b4d      	ldr	r3, [pc, #308]	; (800959c <ai_platform_network_init+0x200>)
 8009466:	4a4e      	ldr	r2, [pc, #312]	; (80095a0 <ai_platform_network_init+0x204>)
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	4b4d      	ldr	r3, [pc, #308]	; (80095a4 <ai_platform_network_init+0x208>)
 800946e:	429a      	cmp	r2, r3
 8009470:	d015      	beq.n	800949e <ai_platform_network_init+0x102>
 8009472:	e7fe      	b.n	8009472 <ai_platform_network_init+0xd6>
 8009474:	f104 0010 	add.w	r0, r4, #16
 8009478:	2211      	movs	r2, #17
 800947a:	2110      	movs	r1, #16
 800947c:	4634      	mov	r4, r6
 800947e:	f000 fba1 	bl	8009bc4 <core_set_error>
 8009482:	e7d7      	b.n	8009434 <ai_platform_network_init+0x98>
 8009484:	4b48      	ldr	r3, [pc, #288]	; (80095a8 <ai_platform_network_init+0x20c>)
 8009486:	2201      	movs	r2, #1
 8009488:	601a      	str	r2, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	2a00      	cmp	r2, #0
 800948e:	d1fc      	bne.n	800948a <ai_platform_network_init+0xee>
 8009490:	4b46      	ldr	r3, [pc, #280]	; (80095ac <ai_platform_network_init+0x210>)
 8009492:	4a43      	ldr	r2, [pc, #268]	; (80095a0 <ai_platform_network_init+0x204>)
 8009494:	601a      	str	r2, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	4b42      	ldr	r3, [pc, #264]	; (80095a4 <ai_platform_network_init+0x208>)
 800949a:	429a      	cmp	r2, r3
 800949c:	d16d      	bne.n	800957a <ai_platform_network_init+0x1de>
 800949e:	f7ff fb6f 	bl	8008b80 <_ai_platform_release_crc>
 80094a2:	2400      	movs	r4, #0
 80094a4:	e7c6      	b.n	8009434 <ai_platform_network_init+0x98>
 80094a6:	4630      	mov	r0, r6
 80094a8:	2101      	movs	r1, #1
 80094aa:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80094ae:	f7ff fb19 	bl	8008ae4 <ai_buffer_get_size>
 80094b2:	4635      	mov	r5, r6
 80094b4:	f106 071c 	add.w	r7, r6, #28
 80094b8:	2101      	movs	r1, #1
 80094ba:	4606      	mov	r6, r0
 80094bc:	4638      	mov	r0, r7
 80094be:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80094c2:	f7ff fb0f 	bl	8008ae4 <ai_buffer_get_size>
 80094c6:	2e00      	cmp	r6, #0
 80094c8:	bf0a      	itet	eq
 80094ca:	46b6      	moveq	lr, r6
 80094cc:	f04f 0e01 	movne.w	lr, #1
 80094d0:	4635      	moveq	r5, r6
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d14b      	bne.n	800956e <ai_platform_network_init+0x1d2>
 80094d6:	4607      	mov	r7, r0
 80094d8:	4684      	mov	ip, r0
 80094da:	f1b8 0f00 	cmp.w	r8, #0
 80094de:	d023      	beq.n	8009528 <ai_platform_network_init+0x18c>
 80094e0:	8be3      	ldrh	r3, [r4, #30]
 80094e2:	4573      	cmp	r3, lr
 80094e4:	d207      	bcs.n	80094f6 <ai_platform_network_init+0x15a>
 80094e6:	f104 0010 	add.w	r0, r4, #16
 80094ea:	2212      	movs	r2, #18
 80094ec:	2116      	movs	r1, #22
 80094ee:	f000 fb69 	bl	8009bc4 <core_set_error>
 80094f2:	2400      	movs	r4, #0
 80094f4:	e79e      	b.n	8009434 <ai_platform_network_init+0x98>
 80094f6:	f1be 0f00 	cmp.w	lr, #0
 80094fa:	d006      	beq.n	800950a <ai_platform_network_init+0x16e>
 80094fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094fe:	6a26      	ldr	r6, [r4, #32]
 8009500:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009502:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009506:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800950a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800950c:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8009510:	2600      	movs	r6, #0
 8009512:	4563      	cmp	r3, ip
 8009514:	83a6      	strh	r6, [r4, #28]
 8009516:	d211      	bcs.n	800953c <ai_platform_network_init+0x1a0>
 8009518:	f104 0010 	add.w	r0, r4, #16
 800951c:	2213      	movs	r2, #19
 800951e:	2116      	movs	r1, #22
 8009520:	f000 fb50 	bl	8009bc4 <core_set_error>
 8009524:	4634      	mov	r4, r6
 8009526:	e785      	b.n	8009434 <ai_platform_network_init+0x98>
 8009528:	2e00      	cmp	r6, #0
 800952a:	d0d9      	beq.n	80094e0 <ai_platform_network_init+0x144>
 800952c:	f104 0010 	add.w	r0, r4, #16
 8009530:	2212      	movs	r2, #18
 8009532:	2110      	movs	r1, #16
 8009534:	4644      	mov	r4, r8
 8009536:	f000 fb45 	bl	8009bc4 <core_set_error>
 800953a:	e77b      	b.n	8009434 <ai_platform_network_init+0x98>
 800953c:	f1bc 0f00 	cmp.w	ip, #0
 8009540:	d013      	beq.n	800956a <ai_platform_network_init+0x1ce>
 8009542:	f04f 081c 	mov.w	r8, #28
 8009546:	fb08 f80c 	mul.w	r8, r8, ip
 800954a:	eb07 0e06 	add.w	lr, r7, r6
 800954e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009552:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009554:	4435      	add	r5, r6
 8009556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009558:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800955c:	361c      	adds	r6, #28
 800955e:	4546      	cmp	r6, r8
 8009560:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009564:	d1f1      	bne.n	800954a <ai_platform_network_init+0x1ae>
 8009566:	2300      	movs	r3, #0
 8009568:	e75c      	b.n	8009424 <ai_platform_network_init+0x88>
 800956a:	4663      	mov	r3, ip
 800956c:	e75a      	b.n	8009424 <ai_platform_network_init+0x88>
 800956e:	f1b9 0f00 	cmp.w	r9, #0
 8009572:	d003      	beq.n	800957c <ai_platform_network_init+0x1e0>
 8009574:	f04f 0c01 	mov.w	ip, #1
 8009578:	e7af      	b.n	80094da <ai_platform_network_init+0x13e>
 800957a:	e7fe      	b.n	800957a <ai_platform_network_init+0x1de>
 800957c:	f104 0010 	add.w	r0, r4, #16
 8009580:	2213      	movs	r2, #19
 8009582:	2110      	movs	r1, #16
 8009584:	464c      	mov	r4, r9
 8009586:	f000 fb1d 	bl	8009bc4 <core_set_error>
 800958a:	e753      	b.n	8009434 <ai_platform_network_init+0x98>
 800958c:	a1c00100 	.word	0xa1c00100
 8009590:	e0002000 	.word	0xe0002000
 8009594:	e0042000 	.word	0xe0042000
 8009598:	58024c08 	.word	0x58024c08
 800959c:	58024c00 	.word	0x58024c00
 80095a0:	f407a5c2 	.word	0xf407a5c2
 80095a4:	b5e8b5cd 	.word	0xb5e8b5cd
 80095a8:	40023008 	.word	0x40023008
 80095ac:	40023000 	.word	0x40023000
 80095b0:	a1facade 	.word	0xa1facade

080095b4 <ai_platform_network_post_init>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	b120      	cbz	r0, 80095c2 <ai_platform_network_post_init+0xe>
 80095b8:	4b3f      	ldr	r3, [pc, #252]	; (80096b8 <ai_platform_network_post_init+0x104>)
 80095ba:	6802      	ldr	r2, [r0, #0]
 80095bc:	429a      	cmp	r2, r3
 80095be:	4604      	mov	r4, r0
 80095c0:	d02d      	beq.n	800961e <ai_platform_network_post_init+0x6a>
 80095c2:	4a3e      	ldr	r2, [pc, #248]	; (80096bc <ai_platform_network_post_init+0x108>)
 80095c4:	6813      	ldr	r3, [r2, #0]
 80095c6:	f023 0301 	bic.w	r3, r3, #1
 80095ca:	6013      	str	r3, [r2, #0]
 80095cc:	f7ff fad6 	bl	8008b7c <_ai_platform_acquire_crc>
 80095d0:	4b3b      	ldr	r3, [pc, #236]	; (80096c0 <ai_platform_network_post_init+0x10c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095dc:	d00d      	beq.n	80095fa <ai_platform_network_post_init+0x46>
 80095de:	4b39      	ldr	r3, [pc, #228]	; (80096c4 <ai_platform_network_post_init+0x110>)
 80095e0:	2201      	movs	r2, #1
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	2a00      	cmp	r2, #0
 80095e8:	d1fc      	bne.n	80095e4 <ai_platform_network_post_init+0x30>
 80095ea:	4b37      	ldr	r3, [pc, #220]	; (80096c8 <ai_platform_network_post_init+0x114>)
 80095ec:	4a37      	ldr	r2, [pc, #220]	; (80096cc <ai_platform_network_post_init+0x118>)
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	4b37      	ldr	r3, [pc, #220]	; (80096d0 <ai_platform_network_post_init+0x11c>)
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d00d      	beq.n	8009614 <ai_platform_network_post_init+0x60>
 80095f8:	e7fe      	b.n	80095f8 <ai_platform_network_post_init+0x44>
 80095fa:	4b36      	ldr	r3, [pc, #216]	; (80096d4 <ai_platform_network_post_init+0x120>)
 80095fc:	2201      	movs	r2, #1
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	2a00      	cmp	r2, #0
 8009604:	d1fc      	bne.n	8009600 <ai_platform_network_post_init+0x4c>
 8009606:	4b34      	ldr	r3, [pc, #208]	; (80096d8 <ai_platform_network_post_init+0x124>)
 8009608:	4a30      	ldr	r2, [pc, #192]	; (80096cc <ai_platform_network_post_init+0x118>)
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	4b30      	ldr	r3, [pc, #192]	; (80096d0 <ai_platform_network_post_init+0x11c>)
 8009610:	429a      	cmp	r2, r3
 8009612:	d103      	bne.n	800961c <ai_platform_network_post_init+0x68>
 8009614:	f7ff fab4 	bl	8008b80 <_ai_platform_release_crc>
 8009618:	2000      	movs	r0, #0
 800961a:	bd38      	pop	{r3, r4, r5, pc}
 800961c:	e7fe      	b.n	800961c <ai_platform_network_post_init+0x68>
 800961e:	4a27      	ldr	r2, [pc, #156]	; (80096bc <ai_platform_network_post_init+0x108>)
 8009620:	6813      	ldr	r3, [r2, #0]
 8009622:	f023 0301 	bic.w	r3, r3, #1
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	f7ff faa8 	bl	8008b7c <_ai_platform_acquire_crc>
 800962c:	4b24      	ldr	r3, [pc, #144]	; (80096c0 <ai_platform_network_post_init+0x10c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009638:	d00d      	beq.n	8009656 <ai_platform_network_post_init+0xa2>
 800963a:	4b22      	ldr	r3, [pc, #136]	; (80096c4 <ai_platform_network_post_init+0x110>)
 800963c:	2201      	movs	r2, #1
 800963e:	601a      	str	r2, [r3, #0]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	2a00      	cmp	r2, #0
 8009644:	d1fc      	bne.n	8009640 <ai_platform_network_post_init+0x8c>
 8009646:	4b20      	ldr	r3, [pc, #128]	; (80096c8 <ai_platform_network_post_init+0x114>)
 8009648:	4a20      	ldr	r2, [pc, #128]	; (80096cc <ai_platform_network_post_init+0x118>)
 800964a:	601a      	str	r2, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	4b20      	ldr	r3, [pc, #128]	; (80096d0 <ai_platform_network_post_init+0x11c>)
 8009650:	429a      	cmp	r2, r3
 8009652:	d00e      	beq.n	8009672 <ai_platform_network_post_init+0xbe>
 8009654:	e7fe      	b.n	8009654 <ai_platform_network_post_init+0xa0>
 8009656:	4b1f      	ldr	r3, [pc, #124]	; (80096d4 <ai_platform_network_post_init+0x120>)
 8009658:	2201      	movs	r2, #1
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	2a00      	cmp	r2, #0
 8009660:	d1fc      	bne.n	800965c <ai_platform_network_post_init+0xa8>
 8009662:	4b1d      	ldr	r3, [pc, #116]	; (80096d8 <ai_platform_network_post_init+0x124>)
 8009664:	4a19      	ldr	r2, [pc, #100]	; (80096cc <ai_platform_network_post_init+0x118>)
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	4b19      	ldr	r3, [pc, #100]	; (80096d0 <ai_platform_network_post_init+0x11c>)
 800966c:	429a      	cmp	r2, r3
 800966e:	d000      	beq.n	8009672 <ai_platform_network_post_init+0xbe>
 8009670:	e7fe      	b.n	8009670 <ai_platform_network_post_init+0xbc>
 8009672:	f7ff fa85 	bl	8008b80 <_ai_platform_release_crc>
 8009676:	68e3      	ldr	r3, [r4, #12]
 8009678:	f013 0502 	ands.w	r5, r3, #2
 800967c:	d011      	beq.n	80096a2 <ai_platform_network_post_init+0xee>
 800967e:	4620      	mov	r0, r4
 8009680:	f000 ff78 	bl	800a574 <ai_layers_post_init_all>
 8009684:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009686:	b1a3      	cbz	r3, 80096b2 <ai_platform_network_post_init+0xfe>
 8009688:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800968a:	b195      	cbz	r5, 80096b2 <ai_platform_network_post_init+0xfe>
 800968c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800968e:	4629      	mov	r1, r5
 8009690:	2000      	movs	r0, #0
 8009692:	4798      	blx	r3
 8009694:	692b      	ldr	r3, [r5, #16]
 8009696:	42ab      	cmp	r3, r5
 8009698:	d00b      	beq.n	80096b2 <ai_platform_network_post_init+0xfe>
 800969a:	461d      	mov	r5, r3
 800969c:	b14b      	cbz	r3, 80096b2 <ai_platform_network_post_init+0xfe>
 800969e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80096a0:	e7f4      	b.n	800968c <ai_platform_network_post_init+0xd8>
 80096a2:	f104 0010 	add.w	r0, r4, #16
 80096a6:	2210      	movs	r2, #16
 80096a8:	2111      	movs	r1, #17
 80096aa:	f000 fa8b 	bl	8009bc4 <core_set_error>
 80096ae:	4628      	mov	r0, r5
 80096b0:	bd38      	pop	{r3, r4, r5, pc}
 80096b2:	2001      	movs	r0, #1
 80096b4:	bd38      	pop	{r3, r4, r5, pc}
 80096b6:	bf00      	nop
 80096b8:	a1c00100 	.word	0xa1c00100
 80096bc:	e0002000 	.word	0xe0002000
 80096c0:	e0042000 	.word	0xe0042000
 80096c4:	58024c08 	.word	0x58024c08
 80096c8:	58024c00 	.word	0x58024c00
 80096cc:	f407a5c2 	.word	0xf407a5c2
 80096d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80096d4:	40023008 	.word	0x40023008
 80096d8:	40023000 	.word	0x40023000

080096dc <ai_platform_network_process>:
 80096dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e0:	b085      	sub	sp, #20
 80096e2:	460d      	mov	r5, r1
 80096e4:	9202      	str	r2, [sp, #8]
 80096e6:	4604      	mov	r4, r0
 80096e8:	b120      	cbz	r0, 80096f4 <ai_platform_network_process+0x18>
 80096ea:	4b73      	ldr	r3, [pc, #460]	; (80098b8 <ai_platform_network_process+0x1dc>)
 80096ec:	6802      	ldr	r2, [r0, #0]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	bf18      	it	ne
 80096f2:	2400      	movne	r4, #0
 80096f4:	4a71      	ldr	r2, [pc, #452]	; (80098bc <ai_platform_network_process+0x1e0>)
 80096f6:	6813      	ldr	r3, [r2, #0]
 80096f8:	f023 0301 	bic.w	r3, r3, #1
 80096fc:	6013      	str	r3, [r2, #0]
 80096fe:	f7ff fa3d 	bl	8008b7c <_ai_platform_acquire_crc>
 8009702:	4b6f      	ldr	r3, [pc, #444]	; (80098c0 <ai_platform_network_process+0x1e4>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800970a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800970e:	d00d      	beq.n	800972c <ai_platform_network_process+0x50>
 8009710:	4b6c      	ldr	r3, [pc, #432]	; (80098c4 <ai_platform_network_process+0x1e8>)
 8009712:	2201      	movs	r2, #1
 8009714:	601a      	str	r2, [r3, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	2a00      	cmp	r2, #0
 800971a:	d1fc      	bne.n	8009716 <ai_platform_network_process+0x3a>
 800971c:	4b6a      	ldr	r3, [pc, #424]	; (80098c8 <ai_platform_network_process+0x1ec>)
 800971e:	4a6b      	ldr	r2, [pc, #428]	; (80098cc <ai_platform_network_process+0x1f0>)
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	4b6a      	ldr	r3, [pc, #424]	; (80098d0 <ai_platform_network_process+0x1f4>)
 8009726:	429a      	cmp	r2, r3
 8009728:	d00e      	beq.n	8009748 <ai_platform_network_process+0x6c>
 800972a:	e7fe      	b.n	800972a <ai_platform_network_process+0x4e>
 800972c:	4b69      	ldr	r3, [pc, #420]	; (80098d4 <ai_platform_network_process+0x1f8>)
 800972e:	2201      	movs	r2, #1
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	2a00      	cmp	r2, #0
 8009736:	d1fc      	bne.n	8009732 <ai_platform_network_process+0x56>
 8009738:	4b67      	ldr	r3, [pc, #412]	; (80098d8 <ai_platform_network_process+0x1fc>)
 800973a:	4a64      	ldr	r2, [pc, #400]	; (80098cc <ai_platform_network_process+0x1f0>)
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	4b63      	ldr	r3, [pc, #396]	; (80098d0 <ai_platform_network_process+0x1f4>)
 8009742:	429a      	cmp	r2, r3
 8009744:	d000      	beq.n	8009748 <ai_platform_network_process+0x6c>
 8009746:	e7fe      	b.n	8009746 <ai_platform_network_process+0x6a>
 8009748:	f7ff fa1a 	bl	8008b80 <_ai_platform_release_crc>
 800974c:	2c00      	cmp	r4, #0
 800974e:	f000 8089 	beq.w	8009864 <ai_platform_network_process+0x188>
 8009752:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8009754:	2f00      	cmp	r7, #0
 8009756:	f040 822b 	bne.w	8009bb0 <ai_platform_network_process+0x4d4>
 800975a:	68e3      	ldr	r3, [r4, #12]
 800975c:	f003 0303 	and.w	r3, r3, #3
 8009760:	2600      	movs	r6, #0
 8009762:	2b03      	cmp	r3, #3
 8009764:	6166      	str	r6, [r4, #20]
 8009766:	f040 821b 	bne.w	8009ba0 <ai_platform_network_process+0x4c4>
 800976a:	2d00      	cmp	r5, #0
 800976c:	f000 809c 	beq.w	80098a8 <ai_platform_network_process+0x1cc>
 8009770:	2f00      	cmp	r7, #0
 8009772:	f000 8099 	beq.w	80098a8 <ai_platform_network_process+0x1cc>
 8009776:	883b      	ldrh	r3, [r7, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 8095 	beq.w	80098a8 <ai_platform_network_process+0x1cc>
 800977e:	69aa      	ldr	r2, [r5, #24]
 8009780:	9401      	str	r4, [sp, #4]
 8009782:	f8d2 8000 	ldr.w	r8, [r2]
 8009786:	429e      	cmp	r6, r3
 8009788:	f080 80a8 	bcs.w	80098dc <ai_platform_network_process+0x200>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 80a4 	beq.w	80098dc <ai_platform_network_process+0x200>
 8009794:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8009798:	2c00      	cmp	r4, #0
 800979a:	f000 809f 	beq.w	80098dc <ai_platform_network_process+0x200>
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f8d3 b000 	ldr.w	fp, [r3]
 80097a4:	ea4f 1906 	mov.w	r9, r6, lsl #4
 80097a8:	eb1b 0a09 	adds.w	sl, fp, r9
 80097ac:	d07b      	beq.n	80098a6 <ai_platform_network_process+0x1ca>
 80097ae:	69a3      	ldr	r3, [r4, #24]
 80097b0:	2101      	movs	r1, #1
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	9303      	str	r3, [sp, #12]
 80097b6:	4628      	mov	r0, r5
 80097b8:	f7ff f994 	bl	8008ae4 <ai_buffer_get_size>
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	4283      	cmp	r3, r0
 80097c0:	d368      	bcc.n	8009894 <ai_platform_network_process+0x1b8>
 80097c2:	68e0      	ldr	r0, [r4, #12]
 80097c4:	69a9      	ldr	r1, [r5, #24]
 80097c6:	68c2      	ldr	r2, [r0, #12]
 80097c8:	68cb      	ldr	r3, [r1, #12]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d162      	bne.n	8009894 <ai_platform_network_process+0x1b8>
 80097ce:	6882      	ldr	r2, [r0, #8]
 80097d0:	688b      	ldr	r3, [r1, #8]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d15e      	bne.n	8009894 <ai_platform_network_process+0x1b8>
 80097d6:	6842      	ldr	r2, [r0, #4]
 80097d8:	684b      	ldr	r3, [r1, #4]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d15a      	bne.n	8009894 <ai_platform_network_process+0x1b8>
 80097de:	69a3      	ldr	r3, [r4, #24]
 80097e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097e4:	f000 ffc0 	bl	800a768 <ai_array_get_data_byte_size>
 80097e8:	9003      	str	r0, [sp, #12]
 80097ea:	4620      	mov	r0, r4
 80097ec:	f000 ff2e 	bl	800a64c <get_tensor_byte_size>
 80097f0:	9b03      	ldr	r3, [sp, #12]
 80097f2:	4283      	cmp	r3, r0
 80097f4:	d34e      	bcc.n	8009894 <ai_platform_network_process+0x1b8>
 80097f6:	69a3      	ldr	r3, [r4, #24]
 80097f8:	6818      	ldr	r0, [r3, #0]
 80097fa:	f000 ff3b 	bl	800a674 <ai_array_to_buffer_fmt>
 80097fe:	682b      	ldr	r3, [r5, #0]
 8009800:	4043      	eors	r3, r0
 8009802:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8009806:	d13c      	bne.n	8009882 <ai_platform_network_process+0x1a6>
 8009808:	686b      	ldr	r3, [r5, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d04b      	beq.n	80098a6 <ai_platform_network_process+0x1ca>
 800980e:	69ab      	ldr	r3, [r5, #24]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	b362      	cbz	r2, 800986e <ai_platform_network_process+0x192>
 8009814:	4620      	mov	r0, r4
 8009816:	9203      	str	r2, [sp, #12]
 8009818:	f000 ff18 	bl	800a64c <get_tensor_byte_size>
 800981c:	f8ca 0008 	str.w	r0, [sl, #8]
 8009820:	69ab      	ldr	r3, [r5, #24]
 8009822:	9a03      	ldr	r2, [sp, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	fb03 f000 	mul.w	r0, r3, r0
 800982a:	f8ca 000c 	str.w	r0, [sl, #12]
 800982e:	6869      	ldr	r1, [r5, #4]
 8009830:	f8ca 1004 	str.w	r1, [sl, #4]
 8009834:	686b      	ldr	r3, [r5, #4]
 8009836:	4403      	add	r3, r0
 8009838:	f84b 3009 	str.w	r3, [fp, r9]
 800983c:	69a0      	ldr	r0, [r4, #24]
 800983e:	6803      	ldr	r3, [r0, #0]
 8009840:	4590      	cmp	r8, r2
 8009842:	bf38      	it	cc
 8009844:	4690      	movcc	r8, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	d408      	bmi.n	800985c <ai_platform_network_process+0x180>
 800984a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800984e:	1a9b      	subs	r3, r3, r2
 8009850:	4419      	add	r1, r3
 8009852:	6081      	str	r1, [r0, #8]
 8009854:	69a3      	ldr	r3, [r4, #24]
 8009856:	f8da 2004 	ldr.w	r2, [sl, #4]
 800985a:	60da      	str	r2, [r3, #12]
 800985c:	883b      	ldrh	r3, [r7, #0]
 800985e:	3601      	adds	r6, #1
 8009860:	351c      	adds	r5, #28
 8009862:	e790      	b.n	8009786 <ai_platform_network_process+0xaa>
 8009864:	4623      	mov	r3, r4
 8009866:	4618      	mov	r0, r3
 8009868:	b005      	add	sp, #20
 800986a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986e:	9c01      	ldr	r4, [sp, #4]
 8009870:	4692      	mov	sl, r2
 8009872:	f104 0010 	add.w	r0, r4, #16
 8009876:	2221      	movs	r2, #33	; 0x21
 8009878:	2112      	movs	r1, #18
 800987a:	f000 f9a3 	bl	8009bc4 <core_set_error>
 800987e:	4653      	mov	r3, sl
 8009880:	e7f1      	b.n	8009866 <ai_platform_network_process+0x18a>
 8009882:	9c01      	ldr	r4, [sp, #4]
 8009884:	2219      	movs	r2, #25
 8009886:	f104 0010 	add.w	r0, r4, #16
 800988a:	2112      	movs	r1, #18
 800988c:	f000 f99a 	bl	8009bc4 <core_set_error>
 8009890:	2300      	movs	r3, #0
 8009892:	e7e8      	b.n	8009866 <ai_platform_network_process+0x18a>
 8009894:	9c01      	ldr	r4, [sp, #4]
 8009896:	2218      	movs	r2, #24
 8009898:	f104 0010 	add.w	r0, r4, #16
 800989c:	2112      	movs	r1, #18
 800989e:	f000 f991 	bl	8009bc4 <core_set_error>
 80098a2:	2300      	movs	r3, #0
 80098a4:	e7df      	b.n	8009866 <ai_platform_network_process+0x18a>
 80098a6:	9c01      	ldr	r4, [sp, #4]
 80098a8:	f104 0010 	add.w	r0, r4, #16
 80098ac:	2217      	movs	r2, #23
 80098ae:	2112      	movs	r1, #18
 80098b0:	f000 f988 	bl	8009bc4 <core_set_error>
 80098b4:	2300      	movs	r3, #0
 80098b6:	e7d6      	b.n	8009866 <ai_platform_network_process+0x18a>
 80098b8:	a1c00100 	.word	0xa1c00100
 80098bc:	e0002000 	.word	0xe0002000
 80098c0:	e0042000 	.word	0xe0042000
 80098c4:	58024c08 	.word	0x58024c08
 80098c8:	58024c00 	.word	0x58024c00
 80098cc:	f407a5c2 	.word	0xf407a5c2
 80098d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80098d4:	40023008 	.word	0x40023008
 80098d8:	40023000 	.word	0x40023000
 80098dc:	9c01      	ldr	r4, [sp, #4]
 80098de:	9a02      	ldr	r2, [sp, #8]
 80098e0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80098e2:	2a00      	cmp	r2, #0
 80098e4:	f000 80ab 	beq.w	8009a3e <ai_platform_network_process+0x362>
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	f240 809e 	bls.w	8009a2a <ai_platform_network_process+0x34e>
 80098ee:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 80098f2:	f119 0f0c 	cmn.w	r9, #12
 80098f6:	f000 8098 	beq.w	8009a2a <ai_platform_network_process+0x34e>
 80098fa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 8093 	beq.w	8009a2a <ai_platform_network_process+0x34e>
 8009904:	9d02      	ldr	r5, [sp, #8]
 8009906:	9401      	str	r4, [sp, #4]
 8009908:	2700      	movs	r7, #0
 800990a:	429f      	cmp	r7, r3
 800990c:	f080 8095 	bcs.w	8009a3a <ai_platform_network_process+0x35e>
 8009910:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009914:	2b00      	cmp	r3, #0
 8009916:	f000 8090 	beq.w	8009a3a <ai_platform_network_process+0x35e>
 800991a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800991e:	2c00      	cmp	r4, #0
 8009920:	f000 808b 	beq.w	8009a3a <ai_platform_network_process+0x35e>
 8009924:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009928:	f8d3 b000 	ldr.w	fp, [r3]
 800992c:	013e      	lsls	r6, r7, #4
 800992e:	eb1b 0a06 	adds.w	sl, fp, r6
 8009932:	f000 812c 	beq.w	8009b8e <ai_platform_network_process+0x4b2>
 8009936:	69a3      	ldr	r3, [r4, #24]
 8009938:	2101      	movs	r1, #1
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	9302      	str	r3, [sp, #8]
 800993e:	4628      	mov	r0, r5
 8009940:	f7ff f8d0 	bl	8008ae4 <ai_buffer_get_size>
 8009944:	9b02      	ldr	r3, [sp, #8]
 8009946:	4283      	cmp	r3, r0
 8009948:	d36e      	bcc.n	8009a28 <ai_platform_network_process+0x34c>
 800994a:	68e0      	ldr	r0, [r4, #12]
 800994c:	69a9      	ldr	r1, [r5, #24]
 800994e:	68c2      	ldr	r2, [r0, #12]
 8009950:	68cb      	ldr	r3, [r1, #12]
 8009952:	429a      	cmp	r2, r3
 8009954:	d168      	bne.n	8009a28 <ai_platform_network_process+0x34c>
 8009956:	6882      	ldr	r2, [r0, #8]
 8009958:	688b      	ldr	r3, [r1, #8]
 800995a:	429a      	cmp	r2, r3
 800995c:	d164      	bne.n	8009a28 <ai_platform_network_process+0x34c>
 800995e:	6842      	ldr	r2, [r0, #4]
 8009960:	684b      	ldr	r3, [r1, #4]
 8009962:	429a      	cmp	r2, r3
 8009964:	d160      	bne.n	8009a28 <ai_platform_network_process+0x34c>
 8009966:	69a3      	ldr	r3, [r4, #24]
 8009968:	e9d3 0100 	ldrd	r0, r1, [r3]
 800996c:	f000 fefc 	bl	800a768 <ai_array_get_data_byte_size>
 8009970:	9002      	str	r0, [sp, #8]
 8009972:	4620      	mov	r0, r4
 8009974:	f000 fe6a 	bl	800a64c <get_tensor_byte_size>
 8009978:	9b02      	ldr	r3, [sp, #8]
 800997a:	4283      	cmp	r3, r0
 800997c:	d354      	bcc.n	8009a28 <ai_platform_network_process+0x34c>
 800997e:	69a3      	ldr	r3, [r4, #24]
 8009980:	6818      	ldr	r0, [r3, #0]
 8009982:	f000 fe77 	bl	800a674 <ai_array_to_buffer_fmt>
 8009986:	682b      	ldr	r3, [r5, #0]
 8009988:	4043      	eors	r3, r0
 800998a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800998e:	d142      	bne.n	8009a16 <ai_platform_network_process+0x33a>
 8009990:	686b      	ldr	r3, [r5, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d035      	beq.n	8009a02 <ai_platform_network_process+0x326>
 8009996:	69ab      	ldr	r3, [r5, #24]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	b342      	cbz	r2, 80099ee <ai_platform_network_process+0x312>
 800999c:	4620      	mov	r0, r4
 800999e:	9202      	str	r2, [sp, #8]
 80099a0:	f000 fe54 	bl	800a64c <get_tensor_byte_size>
 80099a4:	f8ca 0008 	str.w	r0, [sl, #8]
 80099a8:	69ab      	ldr	r3, [r5, #24]
 80099aa:	9a02      	ldr	r2, [sp, #8]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	fb03 f000 	mul.w	r0, r3, r0
 80099b2:	f8ca 000c 	str.w	r0, [sl, #12]
 80099b6:	6869      	ldr	r1, [r5, #4]
 80099b8:	f8ca 1004 	str.w	r1, [sl, #4]
 80099bc:	686b      	ldr	r3, [r5, #4]
 80099be:	4403      	add	r3, r0
 80099c0:	f84b 3006 	str.w	r3, [fp, r6]
 80099c4:	69a0      	ldr	r0, [r4, #24]
 80099c6:	6803      	ldr	r3, [r0, #0]
 80099c8:	4590      	cmp	r8, r2
 80099ca:	bf38      	it	cc
 80099cc:	4690      	movcc	r8, r2
 80099ce:	009e      	lsls	r6, r3, #2
 80099d0:	d408      	bmi.n	80099e4 <ai_platform_network_process+0x308>
 80099d2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80099d6:	1a9b      	subs	r3, r3, r2
 80099d8:	4419      	add	r1, r3
 80099da:	6081      	str	r1, [r0, #8]
 80099dc:	69a3      	ldr	r3, [r4, #24]
 80099de:	f8da 2004 	ldr.w	r2, [sl, #4]
 80099e2:	60da      	str	r2, [r3, #12]
 80099e4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80099e8:	3701      	adds	r7, #1
 80099ea:	351c      	adds	r5, #28
 80099ec:	e78d      	b.n	800990a <ai_platform_network_process+0x22e>
 80099ee:	9c01      	ldr	r4, [sp, #4]
 80099f0:	4692      	mov	sl, r2
 80099f2:	f104 0010 	add.w	r0, r4, #16
 80099f6:	2221      	movs	r2, #33	; 0x21
 80099f8:	2113      	movs	r1, #19
 80099fa:	f000 f8e3 	bl	8009bc4 <core_set_error>
 80099fe:	4653      	mov	r3, sl
 8009a00:	e731      	b.n	8009866 <ai_platform_network_process+0x18a>
 8009a02:	9c01      	ldr	r4, [sp, #4]
 8009a04:	469a      	mov	sl, r3
 8009a06:	f104 0010 	add.w	r0, r4, #16
 8009a0a:	2217      	movs	r2, #23
 8009a0c:	2113      	movs	r1, #19
 8009a0e:	f000 f8d9 	bl	8009bc4 <core_set_error>
 8009a12:	4653      	mov	r3, sl
 8009a14:	e727      	b.n	8009866 <ai_platform_network_process+0x18a>
 8009a16:	9c01      	ldr	r4, [sp, #4]
 8009a18:	2219      	movs	r2, #25
 8009a1a:	f104 0010 	add.w	r0, r4, #16
 8009a1e:	2113      	movs	r1, #19
 8009a20:	f000 f8d0 	bl	8009bc4 <core_set_error>
 8009a24:	2300      	movs	r3, #0
 8009a26:	e71e      	b.n	8009866 <ai_platform_network_process+0x18a>
 8009a28:	9c01      	ldr	r4, [sp, #4]
 8009a2a:	f104 0010 	add.w	r0, r4, #16
 8009a2e:	2218      	movs	r2, #24
 8009a30:	2113      	movs	r1, #19
 8009a32:	f000 f8c7 	bl	8009bc4 <core_set_error>
 8009a36:	2300      	movs	r3, #0
 8009a38:	e715      	b.n	8009866 <ai_platform_network_process+0x18a>
 8009a3a:	9c01      	ldr	r4, [sp, #4]
 8009a3c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8009a3e:	f8a4 8014 	strh.w	r8, [r4, #20]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 80a0 	beq.w	8009b88 <ai_platform_network_process+0x4ac>
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8009a4c:	f240 809a 	bls.w	8009b84 <ai_platform_network_process+0x4a8>
 8009a50:	f105 070c 	add.w	r7, r5, #12
 8009a54:	8ae3      	ldrh	r3, [r4, #22]
 8009a56:	8aa2      	ldrh	r2, [r4, #20]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	f67f af04 	bls.w	8009866 <ai_platform_network_process+0x18a>
 8009a5e:	46a3      	mov	fp, r4
 8009a60:	2d00      	cmp	r5, #0
 8009a62:	d036      	beq.n	8009ad2 <ai_platform_network_process+0x3f6>
 8009a64:	882b      	ldrh	r3, [r5, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d033      	beq.n	8009ad2 <ai_platform_network_process+0x3f6>
 8009a6a:	686b      	ldr	r3, [r5, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d030      	beq.n	8009ad2 <ai_platform_network_process+0x3f6>
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f04f 0800 	mov.w	r8, #0
 8009a76:	b9db      	cbnz	r3, 8009ab0 <ai_platform_network_process+0x3d4>
 8009a78:	e02b      	b.n	8009ad2 <ai_platform_network_process+0x3f6>
 8009a7a:	68d4      	ldr	r4, [r2, #12]
 8009a7c:	1b00      	subs	r0, r0, r4
 8009a7e:	4401      	add	r1, r0
 8009a80:	6091      	str	r1, [r2, #8]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	6872      	ldr	r2, [r6, #4]
 8009a86:	60da      	str	r2, [r3, #12]
 8009a88:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8009a8c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009a90:	440b      	add	r3, r1
 8009a92:	4293      	cmp	r3, r2
 8009a94:	bf24      	itt	cs
 8009a96:	68f3      	ldrcs	r3, [r6, #12]
 8009a98:	1ad3      	subcs	r3, r2, r3
 8009a9a:	6073      	str	r3, [r6, #4]
 8009a9c:	882b      	ldrh	r3, [r5, #0]
 8009a9e:	f108 0801 	add.w	r8, r8, #1
 8009aa2:	4598      	cmp	r8, r3
 8009aa4:	d215      	bcs.n	8009ad2 <ai_platform_network_process+0x3f6>
 8009aa6:	686b      	ldr	r3, [r5, #4]
 8009aa8:	b19b      	cbz	r3, 8009ad2 <ai_platform_network_process+0x3f6>
 8009aaa:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009aae:	b183      	cbz	r3, 8009ad2 <ai_platform_network_process+0x3f6>
 8009ab0:	68a9      	ldr	r1, [r5, #8]
 8009ab2:	699a      	ldr	r2, [r3, #24]
 8009ab4:	f8d1 a000 	ldr.w	sl, [r1]
 8009ab8:	6814      	ldr	r4, [r2, #0]
 8009aba:	6890      	ldr	r0, [r2, #8]
 8009abc:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8009ac0:	eb0a 0609 	add.w	r6, sl, r9
 8009ac4:	00a4      	lsls	r4, r4, #2
 8009ac6:	6871      	ldr	r1, [r6, #4]
 8009ac8:	d5d7      	bpl.n	8009a7a <ai_platform_network_process+0x39e>
 8009aca:	68b2      	ldr	r2, [r6, #8]
 8009acc:	f000 fe86 	bl	800a7dc <memcpy>
 8009ad0:	e7da      	b.n	8009a88 <ai_platform_network_process+0x3ac>
 8009ad2:	4658      	mov	r0, fp
 8009ad4:	f000 fd66 	bl	800a5a4 <ai_layers_forward_all>
 8009ad8:	2f00      	cmp	r7, #0
 8009ada:	d047      	beq.n	8009b6c <ai_platform_network_process+0x490>
 8009adc:	883b      	ldrh	r3, [r7, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d044      	beq.n	8009b6c <ai_platform_network_process+0x490>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d041      	beq.n	8009b6c <ai_platform_network_process+0x490>
 8009ae8:	6818      	ldr	r0, [r3, #0]
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d03e      	beq.n	8009b6c <ai_platform_network_process+0x490>
 8009aee:	f04f 0800 	mov.w	r8, #0
 8009af2:	e019      	b.n	8009b28 <ai_platform_network_process+0x44c>
 8009af4:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009af8:	4293      	cmp	r3, r2
 8009afa:	bf24      	itt	cs
 8009afc:	68f3      	ldrcs	r3, [r6, #12]
 8009afe:	1ad3      	subcs	r3, r2, r3
 8009b00:	6073      	str	r3, [r6, #4]
 8009b02:	6981      	ldr	r1, [r0, #24]
 8009b04:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8009b08:	1b12      	subs	r2, r2, r4
 8009b0a:	4413      	add	r3, r2
 8009b0c:	608b      	str	r3, [r1, #8]
 8009b0e:	6983      	ldr	r3, [r0, #24]
 8009b10:	6872      	ldr	r2, [r6, #4]
 8009b12:	60da      	str	r2, [r3, #12]
 8009b14:	883b      	ldrh	r3, [r7, #0]
 8009b16:	f108 0801 	add.w	r8, r8, #1
 8009b1a:	4598      	cmp	r8, r3
 8009b1c:	d226      	bcs.n	8009b6c <ai_platform_network_process+0x490>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	b323      	cbz	r3, 8009b6c <ai_platform_network_process+0x490>
 8009b22:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009b26:	b308      	cbz	r0, 8009b6c <ai_platform_network_process+0x490>
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	6981      	ldr	r1, [r0, #24]
 8009b2c:	f8d3 a000 	ldr.w	sl, [r3]
 8009b30:	680c      	ldr	r4, [r1, #0]
 8009b32:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8009b36:	eb0a 0609 	add.w	r6, sl, r9
 8009b3a:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8009b3e:	00a4      	lsls	r4, r4, #2
 8009b40:	eb0c 0302 	add.w	r3, ip, r2
 8009b44:	d5d6      	bpl.n	8009af4 <ai_platform_network_process+0x418>
 8009b46:	6889      	ldr	r1, [r1, #8]
 8009b48:	4660      	mov	r0, ip
 8009b4a:	f000 fe47 	bl	800a7dc <memcpy>
 8009b4e:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8009b52:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009b56:	440b      	add	r3, r1
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	bf24      	itt	cs
 8009b5c:	68f3      	ldrcs	r3, [r6, #12]
 8009b5e:	1ad3      	subcs	r3, r2, r3
 8009b60:	6073      	str	r3, [r6, #4]
 8009b62:	883b      	ldrh	r3, [r7, #0]
 8009b64:	f108 0801 	add.w	r8, r8, #1
 8009b68:	4598      	cmp	r8, r3
 8009b6a:	d3d8      	bcc.n	8009b1e <ai_platform_network_process+0x442>
 8009b6c:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 8009b70:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 8009b74:	3301      	adds	r3, #1
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	f8ab 3016 	strh.w	r3, [fp, #22]
 8009b7e:	f63f af6f 	bhi.w	8009a60 <ai_platform_network_process+0x384>
 8009b82:	e670      	b.n	8009866 <ai_platform_network_process+0x18a>
 8009b84:	2700      	movs	r7, #0
 8009b86:	e765      	b.n	8009a54 <ai_platform_network_process+0x378>
 8009b88:	461d      	mov	r5, r3
 8009b8a:	461f      	mov	r7, r3
 8009b8c:	e762      	b.n	8009a54 <ai_platform_network_process+0x378>
 8009b8e:	9c01      	ldr	r4, [sp, #4]
 8009b90:	2217      	movs	r2, #23
 8009b92:	f104 0010 	add.w	r0, r4, #16
 8009b96:	2113      	movs	r1, #19
 8009b98:	f000 f814 	bl	8009bc4 <core_set_error>
 8009b9c:	4653      	mov	r3, sl
 8009b9e:	e662      	b.n	8009866 <ai_platform_network_process+0x18a>
 8009ba0:	f104 0010 	add.w	r0, r4, #16
 8009ba4:	2230      	movs	r2, #48	; 0x30
 8009ba6:	2111      	movs	r1, #17
 8009ba8:	f000 f80c 	bl	8009bc4 <core_set_error>
 8009bac:	4633      	mov	r3, r6
 8009bae:	e65a      	b.n	8009866 <ai_platform_network_process+0x18a>
 8009bb0:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8009bb2:	e5d2      	b.n	800975a <ai_platform_network_process+0x7e>

08009bb4 <core_init>:
 8009bb4:	2001      	movs	r0, #1
 8009bb6:	4770      	bx	lr

08009bb8 <core_get_error>:
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2200      	movs	r2, #0
 8009bbc:	6800      	ldr	r0, [r0, #0]
 8009bbe:	601a      	str	r2, [r3, #0]
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop

08009bc4 <core_set_error>:
 8009bc4:	7803      	ldrb	r3, [r0, #0]
 8009bc6:	b933      	cbnz	r3, 8009bd6 <core_set_error+0x12>
 8009bc8:	7001      	strb	r1, [r0, #0]
 8009bca:	6803      	ldr	r3, [r0, #0]
 8009bcc:	f362 231f 	bfi	r3, r2, #8, #24
 8009bd0:	6003      	str	r3, [r0, #0]
 8009bd2:	2001      	movs	r0, #1
 8009bd4:	4770      	bx	lr
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop

08009bdc <forward_dense>:
 8009bdc:	6983      	ldr	r3, [r0, #24]
 8009bde:	881a      	ldrh	r2, [r3, #0]
 8009be0:	2a00      	cmp	r2, #0
 8009be2:	f000 8193 	beq.w	8009f0c <forward_dense+0x330>
 8009be6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bea:	ed2d 8b10 	vpush	{d8-d15}
 8009bee:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8009bf2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009bf6:	b099      	sub	sp, #100	; 0x64
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 8194 	beq.w	8009f26 <forward_dense+0x34a>
 8009bfe:	f8d3 8000 	ldr.w	r8, [r3]
 8009c02:	2a01      	cmp	r2, #1
 8009c04:	f240 817f 	bls.w	8009f06 <forward_dense+0x32a>
 8009c08:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8009c0c:	b104      	cbz	r4, 8009c10 <forward_dense+0x34>
 8009c0e:	6824      	ldr	r4, [r4, #0]
 8009c10:	2a02      	cmp	r2, #2
 8009c12:	f000 817d 	beq.w	8009f10 <forward_dense+0x334>
 8009c16:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	f040 817b 	bne.w	8009f16 <forward_dense+0x33a>
 8009c20:	f11c 0118 	adds.w	r1, ip, #24
 8009c24:	930e      	str	r3, [sp, #56]	; 0x38
 8009c26:	f000 817c 	beq.w	8009f22 <forward_dense+0x346>
 8009c2a:	f8bc 1018 	ldrh.w	r1, [ip, #24]
 8009c2e:	2901      	cmp	r1, #1
 8009c30:	f240 83ab 	bls.w	800a38a <forward_dense+0x7ae>
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 8178 	beq.w	8009f2a <forward_dense+0x34e>
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c40:	68e7      	ldr	r7, [r4, #12]
 8009c42:	6998      	ldr	r0, [r3, #24]
 8009c44:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8009c48:	6803      	ldr	r3, [r0, #0]
 8009c4a:	6849      	ldr	r1, [r1, #4]
 8009c4c:	9115      	str	r1, [sp, #84]	; 0x54
 8009c4e:	e9d7 6501 	ldrd	r6, r5, [r7, #4]
 8009c52:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8009c56:	f3c3 5141 	ubfx	r1, r3, #21, #2
 8009c5a:	fa4e f101 	asr.w	r1, lr, r1
 8009c5e:	2a03      	cmp	r2, #3
 8009c60:	68ff      	ldr	r7, [r7, #12]
 8009c62:	9113      	str	r1, [sp, #76]	; 0x4c
 8009c64:	fb05 f506 	mul.w	r5, r5, r6
 8009c68:	f000 8373 	beq.w	800a352 <forward_dense+0x776>
 8009c6c:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8009c70:	2a00      	cmp	r2, #0
 8009c72:	f000 8371 	beq.w	800a358 <forward_dense+0x77c>
 8009c76:	6812      	ldr	r2, [r2, #0]
 8009c78:	2a00      	cmp	r2, #0
 8009c7a:	f000 836d 	beq.w	800a358 <forward_dense+0x77c>
 8009c7e:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8009c82:	2b04      	cmp	r3, #4
 8009c84:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8009c88:	f000 836c 	beq.w	800a364 <forward_dense+0x788>
 8009c8c:	2b08      	cmp	r3, #8
 8009c8e:	f000 8369 	beq.w	800a364 <forward_dense+0x788>
 8009c92:	f04f 0a00 	mov.w	sl, #0
 8009c96:	69a3      	ldr	r3, [r4, #24]
 8009c98:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8009c9c:	6899      	ldr	r1, [r3, #8]
 8009c9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ca0:	9102      	str	r1, [sp, #8]
 8009ca2:	695b      	ldr	r3, [r3, #20]
 8009ca4:	6892      	ldr	r2, [r2, #8]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	9305      	str	r3, [sp, #20]
 8009caa:	00ad      	lsls	r5, r5, #2
 8009cac:	fb07 1005 	mla	r0, r7, r5, r1
 8009cb0:	00b4      	lsls	r4, r6, #2
 8009cb2:	4281      	cmp	r1, r0
 8009cb4:	9011      	str	r0, [sp, #68]	; 0x44
 8009cb6:	9410      	str	r4, [sp, #64]	; 0x40
 8009cb8:	eb01 0804 	add.w	r8, r1, r4
 8009cbc:	f080 811e 	bcs.w	8009efc <forward_dense+0x320>
 8009cc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009cc2:	eddf faa0 	vldr	s31, [pc, #640]	; 8009f44 <forward_dense+0x368>
 8009cc6:	08e8      	lsrs	r0, r5, #3
 8009cc8:	0141      	lsls	r1, r0, #5
 8009cca:	f025 0301 	bic.w	r3, r5, #1
 8009cce:	4606      	mov	r6, r0
 8009cd0:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
 8009cd4:	9001      	str	r0, [sp, #4]
 8009cd6:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 8009cda:	00f7      	lsls	r7, r6, #3
 8009cdc:	9316      	str	r3, [sp, #88]	; 0x58
 8009cde:	0143      	lsls	r3, r0, #5
 8009ce0:	00b6      	lsls	r6, r6, #2
 8009ce2:	f1a5 0410 	sub.w	r4, r5, #16
 8009ce6:	9307      	str	r3, [sp, #28]
 8009ce8:	f107 0308 	add.w	r3, r7, #8
 8009cec:	0924      	lsrs	r4, r4, #4
 8009cee:	9304      	str	r3, [sp, #16]
 8009cf0:	1d33      	adds	r3, r6, #4
 8009cf2:	3401      	adds	r4, #1
 8009cf4:	930d      	str	r3, [sp, #52]	; 0x34
 8009cf6:	f005 0301 	and.w	r3, r5, #1
 8009cfa:	01a4      	lsls	r4, r4, #6
 8009cfc:	f005 0907 	and.w	r9, r5, #7
 8009d00:	9309      	str	r3, [sp, #36]	; 0x24
 8009d02:	00ab      	lsls	r3, r5, #2
 8009d04:	9312      	str	r3, [sp, #72]	; 0x48
 8009d06:	9703      	str	r7, [sp, #12]
 8009d08:	960c      	str	r6, [sp, #48]	; 0x30
 8009d0a:	9417      	str	r4, [sp, #92]	; 0x5c
 8009d0c:	eb02 0b01 	add.w	fp, r2, r1
 8009d10:	4653      	mov	r3, sl
 8009d12:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8009d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d18:	9907      	ldr	r1, [sp, #28]
 8009d1a:	6992      	ldr	r2, [r2, #24]
 8009d1c:	6894      	ldr	r4, [r2, #8]
 8009d1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d20:	4459      	add	r1, fp
 8009d22:	9106      	str	r1, [sp, #24]
 8009d24:	2a00      	cmp	r2, #0
 8009d26:	f000 810f 	beq.w	8009f48 <forward_dense+0x36c>
 8009d2a:	6992      	ldr	r2, [r2, #24]
 8009d2c:	6896      	ldr	r6, [r2, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 810e 	beq.w	8009f50 <forward_dense+0x374>
 8009d34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d36:	2a04      	cmp	r2, #4
 8009d38:	f000 821e 	beq.w	800a178 <forward_dense+0x59c>
 8009d3c:	9a02      	ldr	r2, [sp, #8]
 8009d3e:	4590      	cmp	r8, r2
 8009d40:	f240 80d3 	bls.w	8009eea <forward_dense+0x30e>
 8009d44:	4694      	mov	ip, r2
 8009d46:	9a07      	ldr	r2, [sp, #28]
 8009d48:	f8dd a014 	ldr.w	sl, [sp, #20]
 8009d4c:	f102 0e20 	add.w	lr, r2, #32
 8009d50:	46b1      	mov	r9, r6
 8009d52:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009d54:	44de      	add	lr, fp
 8009d56:	f1b9 0f00 	cmp.w	r9, #0
 8009d5a:	f000 80e8 	beq.w	8009f2e <forward_dense+0x352>
 8009d5e:	9a01      	ldr	r2, [sp, #4]
 8009d60:	edd9 2a00 	vldr	s5, [r9]
 8009d64:	eddf 6a77 	vldr	s13, [pc, #476]	; 8009f44 <forward_dense+0x368>
 8009d68:	f109 0904 	add.w	r9, r9, #4
 8009d6c:	2a00      	cmp	r2, #0
 8009d6e:	f000 80e6 	beq.w	8009f3e <forward_dense+0x362>
 8009d72:	9904      	ldr	r1, [sp, #16]
 8009d74:	f104 0208 	add.w	r2, r4, #8
 8009d78:	190f      	adds	r7, r1, r4
 8009d7a:	4671      	mov	r1, lr
 8009d7c:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 8009d80:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 8009d84:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 8009d88:	ed11 3a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
 8009d8c:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8009d90:	ed11 5a05 	vldr	s10, [r1, #-20]	; 0xffffffec
 8009d94:	ed51 3a04 	vldr	s7, [r1, #-16]
 8009d98:	ed51 4a03 	vldr	s9, [r1, #-12]
 8009d9c:	ed51 5a02 	vldr	s11, [r1, #-8]
 8009da0:	ed11 6a01 	vldr	s12, [r1, #-4]
 8009da4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009da8:	ed95 7a00 	vldr	s14, [r5]
 8009dac:	f812 5c06 	ldrb.w	r5, [r2, #-6]
 8009db0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009db8:	ed90 7a00 	vldr	s14, [r0]
 8009dbc:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 8009dc0:	eee7 7a03 	vfma.f32	s15, s14, s6
 8009dc4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009dc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009dcc:	ed95 3a00 	vldr	s6, [r5]
 8009dd0:	ed90 7a00 	vldr	s14, [r0]
 8009dd4:	f812 5c04 	ldrb.w	r5, [r2, #-4]
 8009dd8:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 8009ddc:	eee3 7a04 	vfma.f32	s15, s6, s8
 8009de0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009de4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009de8:	ed95 3a00 	vldr	s6, [r5]
 8009dec:	ed90 4a00 	vldr	s8, [r0]
 8009df0:	f812 5c02 	ldrb.w	r5, [r2, #-2]
 8009df4:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8009df8:	eee7 7a05 	vfma.f32	s15, s14, s10
 8009dfc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009e00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e04:	ed95 5a00 	vldr	s10, [r5]
 8009e08:	ed90 7a00 	vldr	s14, [r0]
 8009e0c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009e10:	3208      	adds	r2, #8
 8009e12:	4297      	cmp	r7, r2
 8009e14:	f101 0120 	add.w	r1, r1, #32
 8009e18:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009e1c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009e20:	eee7 7a06 	vfma.f32	s15, s14, s12
 8009e24:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009e28:	d1a8      	bne.n	8009d7c <forward_dense+0x1a0>
 8009e2a:	9a03      	ldr	r2, [sp, #12]
 8009e2c:	18a1      	adds	r1, r4, r2
 8009e2e:	465a      	mov	r2, fp
 8009e30:	2e00      	cmp	r6, #0
 8009e32:	d04a      	beq.n	8009eca <forward_dense+0x2ee>
 8009e34:	7808      	ldrb	r0, [r1, #0]
 8009e36:	ed92 7a00 	vldr	s14, [r2]
 8009e3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e3e:	edd0 7a00 	vldr	s15, [r0]
 8009e42:	2e01      	cmp	r6, #1
 8009e44:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009e48:	d03f      	beq.n	8009eca <forward_dense+0x2ee>
 8009e4a:	7848      	ldrb	r0, [r1, #1]
 8009e4c:	edd2 7a01 	vldr	s15, [r2, #4]
 8009e50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e54:	ed90 7a00 	vldr	s14, [r0]
 8009e58:	2e02      	cmp	r6, #2
 8009e5a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009e5e:	d034      	beq.n	8009eca <forward_dense+0x2ee>
 8009e60:	7888      	ldrb	r0, [r1, #2]
 8009e62:	edd2 7a02 	vldr	s15, [r2, #8]
 8009e66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e6a:	ed90 7a00 	vldr	s14, [r0]
 8009e6e:	2e03      	cmp	r6, #3
 8009e70:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009e74:	d029      	beq.n	8009eca <forward_dense+0x2ee>
 8009e76:	78c8      	ldrb	r0, [r1, #3]
 8009e78:	edd2 7a03 	vldr	s15, [r2, #12]
 8009e7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e80:	ed90 7a00 	vldr	s14, [r0]
 8009e84:	2e04      	cmp	r6, #4
 8009e86:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009e8a:	d01e      	beq.n	8009eca <forward_dense+0x2ee>
 8009e8c:	7908      	ldrb	r0, [r1, #4]
 8009e8e:	edd2 7a04 	vldr	s15, [r2, #16]
 8009e92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e96:	ed90 7a00 	vldr	s14, [r0]
 8009e9a:	2e05      	cmp	r6, #5
 8009e9c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009ea0:	d013      	beq.n	8009eca <forward_dense+0x2ee>
 8009ea2:	7948      	ldrb	r0, [r1, #5]
 8009ea4:	edd2 7a05 	vldr	s15, [r2, #20]
 8009ea8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009eac:	ed90 7a00 	vldr	s14, [r0]
 8009eb0:	2e06      	cmp	r6, #6
 8009eb2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009eb6:	d008      	beq.n	8009eca <forward_dense+0x2ee>
 8009eb8:	7989      	ldrb	r1, [r1, #6]
 8009eba:	edd2 7a06 	vldr	s15, [r2, #24]
 8009ebe:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 8009ec2:	ed92 7a00 	vldr	s14, [r2]
 8009ec6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009eca:	4454      	add	r4, sl
 8009ecc:	ee72 6aa6 	vadd.f32	s13, s5, s13
 8009ed0:	ecec 6a01 	vstmia	ip!, {s13}
 8009ed4:	45c4      	cmp	ip, r8
 8009ed6:	f4ff af3e 	bcc.w	8009d56 <forward_dense+0x17a>
 8009eda:	9902      	ldr	r1, [sp, #8]
 8009edc:	43ca      	mvns	r2, r1
 8009ede:	4442      	add	r2, r8
 8009ee0:	f022 0203 	bic.w	r2, r2, #3
 8009ee4:	3204      	adds	r2, #4
 8009ee6:	188a      	adds	r2, r1, r2
 8009ee8:	9202      	str	r2, [sp, #8]
 8009eea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009eec:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009eee:	4490      	add	r8, r2
 8009ef0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ef2:	4493      	add	fp, r2
 8009ef4:	9a02      	ldr	r2, [sp, #8]
 8009ef6:	428a      	cmp	r2, r1
 8009ef8:	f4ff af0d 	bcc.w	8009d16 <forward_dense+0x13a>
 8009efc:	b019      	add	sp, #100	; 0x64
 8009efe:	ecbd 8b10 	vpop	{d8-d15}
 8009f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f06:	2300      	movs	r3, #0
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	deff      	udf	#255	; 0xff
 8009f0c:	6853      	ldr	r3, [r2, #4]
 8009f0e:	deff      	udf	#255	; 0xff
 8009f10:	2300      	movs	r3, #0
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	deff      	udf	#255	; 0xff
 8009f16:	6819      	ldr	r1, [r3, #0]
 8009f18:	910e      	str	r1, [sp, #56]	; 0x38
 8009f1a:	f11c 0118 	adds.w	r1, ip, #24
 8009f1e:	f47f ae84 	bne.w	8009c2a <forward_dense+0x4e>
 8009f22:	910f      	str	r1, [sp, #60]	; 0x3c
 8009f24:	e68b      	b.n	8009c3e <forward_dense+0x62>
 8009f26:	4698      	mov	r8, r3
 8009f28:	e66b      	b.n	8009c02 <forward_dense+0x26>
 8009f2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f2c:	e687      	b.n	8009c3e <forward_dense+0x62>
 8009f2e:	9a01      	ldr	r2, [sp, #4]
 8009f30:	eddf 6a04 	vldr	s13, [pc, #16]	; 8009f44 <forward_dense+0x368>
 8009f34:	eef0 2a6f 	vmov.f32	s5, s31
 8009f38:	2a00      	cmp	r2, #0
 8009f3a:	f47f af1a 	bne.w	8009d72 <forward_dense+0x196>
 8009f3e:	9a06      	ldr	r2, [sp, #24]
 8009f40:	4621      	mov	r1, r4
 8009f42:	e775      	b.n	8009e30 <forward_dense+0x254>
 8009f44:	00000000 	.word	0x00000000
 8009f48:	4616      	mov	r6, r2
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f47f aef2 	bne.w	8009d34 <forward_dense+0x158>
 8009f50:	9a02      	ldr	r2, [sp, #8]
 8009f52:	4590      	cmp	r8, r2
 8009f54:	d9c9      	bls.n	8009eea <forward_dense+0x30e>
 8009f56:	4615      	mov	r5, r2
 8009f58:	9a07      	ldr	r2, [sp, #28]
 8009f5a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009f5c:	9308      	str	r3, [sp, #32]
 8009f5e:	f102 0740 	add.w	r7, r2, #64	; 0x40
 8009f62:	9a06      	ldr	r2, [sp, #24]
 8009f64:	9b05      	ldr	r3, [sp, #20]
 8009f66:	4610      	mov	r0, r2
 8009f68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f6a:	445f      	add	r7, fp
 8009f6c:	eb00 0c02 	add.w	ip, r0, r2
 8009f70:	f001 0e0f 	and.w	lr, r1, #15
 8009f74:	468a      	mov	sl, r1
 8009f76:	4691      	mov	r9, r2
 8009f78:	2e00      	cmp	r6, #0
 8009f7a:	f000 81de 	beq.w	800a33a <forward_dense+0x75e>
 8009f7e:	f1ba 0f0f 	cmp.w	sl, #15
 8009f82:	ed96 fa00 	vldr	s30, [r6]
 8009f86:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 8009f44 <forward_dense+0x368>
 8009f8a:	f106 0604 	add.w	r6, r6, #4
 8009f8e:	f240 81dc 	bls.w	800a34a <forward_dense+0x76e>
 8009f92:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8009f96:	463a      	mov	r2, r7
 8009f98:	4650      	mov	r0, sl
 8009f9a:	ed52 ea0f 	vldr	s29, [r2, #-60]	; 0xffffffc4
 8009f9e:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 8009fa2:	ed11 ea10 	vldr	s28, [r1, #-64]	; 0xffffffc0
 8009fa6:	ed52 da10 	vldr	s27, [r2, #-64]	; 0xffffffc0
 8009faa:	ed11 da0e 	vldr	s26, [r1, #-56]	; 0xffffffc8
 8009fae:	ed51 ca0d 	vldr	s25, [r1, #-52]	; 0xffffffcc
 8009fb2:	ed12 ca0d 	vldr	s24, [r2, #-52]	; 0xffffffcc
 8009fb6:	ed52 ba0c 	vldr	s23, [r2, #-48]	; 0xffffffd0
 8009fba:	ed11 ba0c 	vldr	s22, [r1, #-48]	; 0xffffffd0
 8009fbe:	ed52 aa0b 	vldr	s21, [r2, #-44]	; 0xffffffd4
 8009fc2:	ed11 aa0b 	vldr	s20, [r1, #-44]	; 0xffffffd4
 8009fc6:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8009fca:	ed11 9a0a 	vldr	s18, [r1, #-40]	; 0xffffffd8
 8009fce:	ed51 8a09 	vldr	s17, [r1, #-36]	; 0xffffffdc
 8009fd2:	ed12 8a09 	vldr	s16, [r2, #-36]	; 0xffffffdc
 8009fd6:	ed11 0a08 	vldr	s0, [r1, #-32]	; 0xffffffe0
 8009fda:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8009fde:	ed11 1a07 	vldr	s2, [r1, #-28]	; 0xffffffe4
 8009fe2:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8009fe6:	ed11 2a06 	vldr	s4, [r1, #-24]	; 0xffffffe8
 8009fea:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8009fee:	ed11 3a05 	vldr	s6, [r1, #-20]	; 0xffffffec
 8009ff2:	ed52 3a05 	vldr	s7, [r2, #-20]	; 0xffffffec
 8009ff6:	ed12 4a04 	vldr	s8, [r2, #-16]
 8009ffa:	ed51 4a04 	vldr	s9, [r1, #-16]
 8009ffe:	ed12 5a03 	vldr	s10, [r2, #-12]
 800a002:	ed51 5a03 	vldr	s11, [r1, #-12]
 800a006:	ed12 6a02 	vldr	s12, [r2, #-8]
 800a00a:	ed11 7a02 	vldr	s14, [r1, #-8]
 800a00e:	ee67 7aae 	vmul.f32	s15, s15, s29
 800a012:	ed52 ea0e 	vldr	s29, [r2, #-56]	; 0xffffffc8
 800a016:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800a01a:	3810      	subs	r0, #16
 800a01c:	280f      	cmp	r0, #15
 800a01e:	ed11 ea01 	vldr	s28, [r1, #-4]
 800a022:	ed52 da01 	vldr	s27, [r2, #-4]
 800a026:	eeed 7a2e 	vfma.f32	s15, s26, s29
 800a02a:	f101 0140 	add.w	r1, r1, #64	; 0x40
 800a02e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800a032:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800a036:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a03a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a03e:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a042:	eee8 7a88 	vfma.f32	s15, s17, s16
 800a046:	eee0 7a20 	vfma.f32	s15, s0, s1
 800a04a:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a04e:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a052:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a056:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a05a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a05e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a062:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800a066:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a06a:	d896      	bhi.n	8009f9a <forward_dense+0x3be>
 800a06c:	eb04 0009 	add.w	r0, r4, r9
 800a070:	4672      	mov	r2, lr
 800a072:	4661      	mov	r1, ip
 800a074:	2a00      	cmp	r2, #0
 800a076:	d075      	beq.n	800a164 <forward_dense+0x588>
 800a078:	ed90 7a00 	vldr	s14, [r0]
 800a07c:	edd1 7a00 	vldr	s15, [r1]
 800a080:	2a01      	cmp	r2, #1
 800a082:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a086:	d06d      	beq.n	800a164 <forward_dense+0x588>
 800a088:	ed90 7a01 	vldr	s14, [r0, #4]
 800a08c:	edd1 7a01 	vldr	s15, [r1, #4]
 800a090:	2a02      	cmp	r2, #2
 800a092:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a096:	d065      	beq.n	800a164 <forward_dense+0x588>
 800a098:	ed90 7a02 	vldr	s14, [r0, #8]
 800a09c:	edd1 7a02 	vldr	s15, [r1, #8]
 800a0a0:	2a03      	cmp	r2, #3
 800a0a2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0a6:	d05d      	beq.n	800a164 <forward_dense+0x588>
 800a0a8:	ed90 7a03 	vldr	s14, [r0, #12]
 800a0ac:	edd1 7a03 	vldr	s15, [r1, #12]
 800a0b0:	2a04      	cmp	r2, #4
 800a0b2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0b6:	d055      	beq.n	800a164 <forward_dense+0x588>
 800a0b8:	ed90 7a04 	vldr	s14, [r0, #16]
 800a0bc:	edd1 7a04 	vldr	s15, [r1, #16]
 800a0c0:	2a05      	cmp	r2, #5
 800a0c2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0c6:	d04d      	beq.n	800a164 <forward_dense+0x588>
 800a0c8:	ed90 7a05 	vldr	s14, [r0, #20]
 800a0cc:	edd1 7a05 	vldr	s15, [r1, #20]
 800a0d0:	2a06      	cmp	r2, #6
 800a0d2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0d6:	d045      	beq.n	800a164 <forward_dense+0x588>
 800a0d8:	ed90 7a06 	vldr	s14, [r0, #24]
 800a0dc:	edd1 7a06 	vldr	s15, [r1, #24]
 800a0e0:	2a07      	cmp	r2, #7
 800a0e2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0e6:	d03d      	beq.n	800a164 <forward_dense+0x588>
 800a0e8:	ed90 7a07 	vldr	s14, [r0, #28]
 800a0ec:	edd1 7a07 	vldr	s15, [r1, #28]
 800a0f0:	2a08      	cmp	r2, #8
 800a0f2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0f6:	d035      	beq.n	800a164 <forward_dense+0x588>
 800a0f8:	ed90 7a08 	vldr	s14, [r0, #32]
 800a0fc:	edd1 7a08 	vldr	s15, [r1, #32]
 800a100:	2a09      	cmp	r2, #9
 800a102:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a106:	d02d      	beq.n	800a164 <forward_dense+0x588>
 800a108:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 800a10c:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 800a110:	2a0a      	cmp	r2, #10
 800a112:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a116:	d025      	beq.n	800a164 <forward_dense+0x588>
 800a118:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 800a11c:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 800a120:	2a0b      	cmp	r2, #11
 800a122:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a126:	d01d      	beq.n	800a164 <forward_dense+0x588>
 800a128:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 800a12c:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 800a130:	2a0c      	cmp	r2, #12
 800a132:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a136:	d015      	beq.n	800a164 <forward_dense+0x588>
 800a138:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 800a13c:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 800a140:	2a0d      	cmp	r2, #13
 800a142:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a146:	d00d      	beq.n	800a164 <forward_dense+0x588>
 800a148:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800a14c:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 800a150:	2a0e      	cmp	r2, #14
 800a152:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a156:	d005      	beq.n	800a164 <forward_dense+0x588>
 800a158:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 800a15c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 800a160:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a164:	441c      	add	r4, r3
 800a166:	ee7f 6a26 	vadd.f32	s13, s30, s13
 800a16a:	ece5 6a01 	vstmia	r5!, {s13}
 800a16e:	4545      	cmp	r5, r8
 800a170:	f4ff af02 	bcc.w	8009f78 <forward_dense+0x39c>
 800a174:	9b08      	ldr	r3, [sp, #32]
 800a176:	e6b0      	b.n	8009eda <forward_dense+0x2fe>
 800a178:	9902      	ldr	r1, [sp, #8]
 800a17a:	4588      	cmp	r8, r1
 800a17c:	f67f aeb5 	bls.w	8009eea <forward_dense+0x30e>
 800a180:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a182:	eb02 000b 	add.w	r0, r2, fp
 800a186:	9a07      	ldr	r2, [sp, #28]
 800a188:	9008      	str	r0, [sp, #32]
 800a18a:	3220      	adds	r2, #32
 800a18c:	3007      	adds	r0, #7
 800a18e:	445a      	add	r2, fp
 800a190:	900b      	str	r0, [sp, #44]	; 0x2c
 800a192:	920a      	str	r2, [sp, #40]	; 0x28
 800a194:	4689      	mov	r9, r1
 800a196:	2e00      	cmp	r6, #0
 800a198:	f000 80b9 	beq.w	800a30e <forward_dense+0x732>
 800a19c:	9a01      	ldr	r2, [sp, #4]
 800a19e:	edd6 2a00 	vldr	s5, [r6]
 800a1a2:	ed5f 6a98 	vldr	s13, [pc, #-608]	; 8009f44 <forward_dense+0x368>
 800a1a6:	3604      	adds	r6, #4
 800a1a8:	2a00      	cmp	r2, #0
 800a1aa:	f000 80b8 	beq.w	800a31e <forward_dense+0x742>
 800a1ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1b0:	1917      	adds	r7, r2, r4
 800a1b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1b4:	1d21      	adds	r1, r4, #4
 800a1b6:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 800a1ba:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 800a1be:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800a1c2:	ed12 3a08 	vldr	s6, [r2, #-32]	; 0xffffffe0
 800a1c6:	ed52 3a06 	vldr	s7, [r2, #-24]	; 0xffffffe8
 800a1ca:	ed12 4a05 	vldr	s8, [r2, #-20]	; 0xffffffec
 800a1ce:	ed52 4a04 	vldr	s9, [r2, #-16]
 800a1d2:	ed12 5a03 	vldr	s10, [r2, #-12]
 800a1d6:	ed52 5a02 	vldr	s11, [r2, #-8]
 800a1da:	ed12 6a01 	vldr	s12, [r2, #-4]
 800a1de:	f005 0e0f 	and.w	lr, r5, #15
 800a1e2:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800a1e6:	ed9e 7a00 	vldr	s14, [lr]
 800a1ea:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 800a1ee:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f6:	ed9c 7a00 	vldr	s14, [ip]
 800a1fa:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 800a1fe:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 800a202:	eee7 7a03 	vfma.f32	s15, s14, s6
 800a206:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800a20a:	f000 0c0f 	and.w	ip, r0, #15
 800a20e:	ed9e 7a00 	vldr	s14, [lr]
 800a212:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800a216:	eee7 7a23 	vfma.f32	s15, s14, s7
 800a21a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a21e:	3104      	adds	r1, #4
 800a220:	ed9c 7a00 	vldr	s14, [ip]
 800a224:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 800a228:	eee7 7a04 	vfma.f32	s15, s14, s8
 800a22c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a230:	f005 050f 	and.w	r5, r5, #15
 800a234:	ed9c 7a00 	vldr	s14, [ip]
 800a238:	eee7 7a24 	vfma.f32	s15, s14, s9
 800a23c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a240:	428f      	cmp	r7, r1
 800a242:	ed95 7a00 	vldr	s14, [r5]
 800a246:	ea4f 1510 	mov.w	r5, r0, lsr #4
 800a24a:	eee7 7a05 	vfma.f32	s15, s14, s10
 800a24e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a252:	f000 000f 	and.w	r0, r0, #15
 800a256:	ed95 7a00 	vldr	s14, [r5]
 800a25a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a25e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a262:	f102 0220 	add.w	r2, r2, #32
 800a266:	ed90 7a00 	vldr	s14, [r0]
 800a26a:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a26e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a272:	d1a0      	bne.n	800a1b6 <forward_dense+0x5da>
 800a274:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a276:	46de      	mov	lr, fp
 800a278:	eb04 0a02 	add.w	sl, r4, r2
 800a27c:	9a08      	ldr	r2, [sp, #32]
 800a27e:	4596      	cmp	lr, r2
 800a280:	d22c      	bcs.n	800a2dc <forward_dense+0x700>
 800a282:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a284:	f10e 0108 	add.w	r1, lr, #8
 800a288:	eba2 0c01 	sub.w	ip, r2, r1
 800a28c:	f02c 0207 	bic.w	r2, ip, #7
 800a290:	f10e 0710 	add.w	r7, lr, #16
 800a294:	4417      	add	r7, r2
 800a296:	f10a 35ff 	add.w	r5, sl, #4294967295
 800a29a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a29e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a2a2:	ed11 6a02 	vldr	s12, [r1, #-8]
 800a2a6:	f002 000f 	and.w	r0, r2, #15
 800a2aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a2ae:	ed90 7a00 	vldr	s14, [r0]
 800a2b2:	0912      	lsrs	r2, r2, #4
 800a2b4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a2b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2bc:	ed92 7a00 	vldr	s14, [r2]
 800a2c0:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a2c4:	3108      	adds	r1, #8
 800a2c6:	428f      	cmp	r7, r1
 800a2c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a2cc:	d1e5      	bne.n	800a29a <forward_dense+0x6be>
 800a2ce:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800a2d2:	f10c 0c01 	add.w	ip, ip, #1
 800a2d6:	44e2      	add	sl, ip
 800a2d8:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 800a2dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2de:	b312      	cbz	r2, 800a326 <forward_dense+0x74a>
 800a2e0:	f89a 2000 	ldrb.w	r2, [sl]
 800a2e4:	edde 7a00 	vldr	s15, [lr]
 800a2e8:	0912      	lsrs	r2, r2, #4
 800a2ea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a2ee:	ed92 7a00 	vldr	s14, [r2]
 800a2f2:	9a05      	ldr	r2, [sp, #20]
 800a2f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a2f8:	4414      	add	r4, r2
 800a2fa:	ee76 2aa2 	vadd.f32	s5, s13, s5
 800a2fe:	ece9 2a01 	vstmia	r9!, {s5}
 800a302:	45c8      	cmp	r8, r9
 800a304:	f67f ade9 	bls.w	8009eda <forward_dense+0x2fe>
 800a308:	2e00      	cmp	r6, #0
 800a30a:	f47f af47 	bne.w	800a19c <forward_dense+0x5c0>
 800a30e:	9a01      	ldr	r2, [sp, #4]
 800a310:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a390 <forward_dense+0x7b4>
 800a314:	eef0 2a6f 	vmov.f32	s5, s31
 800a318:	2a00      	cmp	r2, #0
 800a31a:	f47f af48 	bne.w	800a1ae <forward_dense+0x5d2>
 800a31e:	f8dd e018 	ldr.w	lr, [sp, #24]
 800a322:	46a2      	mov	sl, r4
 800a324:	e7aa      	b.n	800a27c <forward_dense+0x6a0>
 800a326:	ee72 6aa6 	vadd.f32	s13, s5, s13
 800a32a:	9a05      	ldr	r2, [sp, #20]
 800a32c:	ece9 6a01 	vstmia	r9!, {s13}
 800a330:	45c1      	cmp	r9, r8
 800a332:	4414      	add	r4, r2
 800a334:	f4ff af2f 	bcc.w	800a196 <forward_dense+0x5ba>
 800a338:	e5cf      	b.n	8009eda <forward_dense+0x2fe>
 800a33a:	f1ba 0f0f 	cmp.w	sl, #15
 800a33e:	eeb0 fa6f 	vmov.f32	s30, s31
 800a342:	eddf 6a13 	vldr	s13, [pc, #76]	; 800a390 <forward_dense+0x7b4>
 800a346:	f63f ae24 	bhi.w	8009f92 <forward_dense+0x3b6>
 800a34a:	4652      	mov	r2, sl
 800a34c:	4620      	mov	r0, r4
 800a34e:	9906      	ldr	r1, [sp, #24]
 800a350:	e690      	b.n	800a074 <forward_dense+0x498>
 800a352:	2300      	movs	r3, #0
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	deff      	udf	#255	; 0xff
 800a358:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800a35c:	2b04      	cmp	r3, #4
 800a35e:	4691      	mov	r9, r2
 800a360:	f47f ac94 	bne.w	8009c8c <forward_dense+0xb0>
 800a364:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800a368:	f1b9 0f00 	cmp.w	r9, #0
 800a36c:	f43f ac93 	beq.w	8009c96 <forward_dense+0xba>
 800a370:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a374:	f000 f9d4 	bl	800a720 <ai_array_get_byte_size>
 800a378:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a37c:	4602      	mov	r2, r0
 800a37e:	4651      	mov	r1, sl
 800a380:	4618      	mov	r0, r3
 800a382:	f000 fa2b 	bl	800a7dc <memcpy>
 800a386:	4682      	mov	sl, r0
 800a388:	e485      	b.n	8009c96 <forward_dense+0xba>
 800a38a:	2300      	movs	r3, #0
 800a38c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a38e:	e456      	b.n	8009c3e <forward_dense+0x62>
 800a390:	00000000 	.word	0x00000000

0800a394 <nl_func_sm_array_f32>:
 800a394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a398:	ed2d 8b04 	vpush	{d8-d9}
 800a39c:	b089      	sub	sp, #36	; 0x24
 800a39e:	698f      	ldr	r7, [r1, #24]
 800a3a0:	6984      	ldr	r4, [r0, #24]
 800a3a2:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800a3a6:	68bd      	ldr	r5, [r7, #8]
 800a3a8:	9402      	str	r4, [sp, #8]
 800a3aa:	4626      	mov	r6, r4
 800a3ac:	4696      	mov	lr, r2
 800a3ae:	eba2 020c 	sub.w	r2, r2, ip
 800a3b2:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800a3b6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	68b6      	ldr	r6, [r6, #8]
 800a3bc:	ebae 0e04 	sub.w	lr, lr, r4
 800a3c0:	4295      	cmp	r5, r2
 800a3c2:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800a3c6:	d354      	bcc.n	800a472 <nl_func_sm_array_f32+0xde>
 800a3c8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800a3cc:	f1cc 0200 	rsb	r2, ip, #0
 800a3d0:	00a4      	lsls	r4, r4, #2
 800a3d2:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800a3d6:	9303      	str	r3, [sp, #12]
 800a3d8:	9204      	str	r2, [sp, #16]
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4262      	negs	r2, r4
 800a3de:	9205      	str	r2, [sp, #20]
 800a3e0:	9301      	str	r3, [sp, #4]
 800a3e2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800a3e6:	9b02      	ldr	r3, [sp, #8]
 800a3e8:	9a07      	ldr	r2, [sp, #28]
 800a3ea:	60bd      	str	r5, [r7, #8]
 800a3ec:	609e      	str	r6, [r3, #8]
 800a3ee:	9b06      	ldr	r3, [sp, #24]
 800a3f0:	6992      	ldr	r2, [r2, #24]
 800a3f2:	699b      	ldr	r3, [r3, #24]
 800a3f4:	6894      	ldr	r4, [r2, #8]
 800a3f6:	9a03      	ldr	r2, [sp, #12]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	2a01      	cmp	r2, #1
 800a3fc:	ed93 8a00 	vldr	s16, [r3]
 800a400:	d940      	bls.n	800a484 <nl_func_sm_array_f32+0xf0>
 800a402:	9901      	ldr	r1, [sp, #4]
 800a404:	1d1a      	adds	r2, r3, #4
 800a406:	eb03 0b01 	add.w	fp, r3, r1
 800a40a:	ecf2 7a01 	vldmia	r2!, {s15}
 800a40e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a416:	bfb8      	it	lt
 800a418:	eeb0 8a67 	vmovlt.f32	s16, s15
 800a41c:	4593      	cmp	fp, r2
 800a41e:	d1f4      	bne.n	800a40a <nl_func_sm_array_f32+0x76>
 800a420:	eddf 8a1b 	vldr	s17, [pc, #108]	; 800a490 <nl_func_sm_array_f32+0xfc>
 800a424:	469a      	mov	sl, r3
 800a426:	46a1      	mov	r9, r4
 800a428:	46a0      	mov	r8, r4
 800a42a:	ecba 0a01 	vldmia	sl!, {s0}
 800a42e:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a432:	f001 f9ed 	bl	800b810 <expf>
 800a436:	45d3      	cmp	fp, sl
 800a438:	eca8 0a01 	vstmia	r8!, {s0}
 800a43c:	ee78 8a80 	vadd.f32	s17, s17, s0
 800a440:	d1f3      	bne.n	800a42a <nl_func_sm_array_f32+0x96>
 800a442:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a44a:	d00b      	beq.n	800a464 <nl_func_sm_array_f32+0xd0>
 800a44c:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800a450:	9b01      	ldr	r3, [sp, #4]
 800a452:	441c      	add	r4, r3
 800a454:	edd9 7a00 	vldr	s15, [r9]
 800a458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a45c:	ece9 7a01 	vstmia	r9!, {s15}
 800a460:	454c      	cmp	r4, r9
 800a462:	d1f7      	bne.n	800a454 <nl_func_sm_array_f32+0xc0>
 800a464:	9b04      	ldr	r3, [sp, #16]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	441d      	add	r5, r3
 800a46a:	9b05      	ldr	r3, [sp, #20]
 800a46c:	42aa      	cmp	r2, r5
 800a46e:	441e      	add	r6, r3
 800a470:	d9b9      	bls.n	800a3e6 <nl_func_sm_array_f32+0x52>
 800a472:	60ba      	str	r2, [r7, #8]
 800a474:	9a02      	ldr	r2, [sp, #8]
 800a476:	68d3      	ldr	r3, [r2, #12]
 800a478:	6093      	str	r3, [r2, #8]
 800a47a:	b009      	add	sp, #36	; 0x24
 800a47c:	ecbd 8b04 	vpop	{d8-d9}
 800a480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a484:	2a00      	cmp	r2, #0
 800a486:	d0ed      	beq.n	800a464 <nl_func_sm_array_f32+0xd0>
 800a488:	9a01      	ldr	r2, [sp, #4]
 800a48a:	eb03 0b02 	add.w	fp, r3, r2
 800a48e:	e7c7      	b.n	800a420 <nl_func_sm_array_f32+0x8c>
 800a490:	00000000 	.word	0x00000000

0800a494 <forward_sm>:
 800a494:	6982      	ldr	r2, [r0, #24]
 800a496:	8813      	ldrh	r3, [r2, #0]
 800a498:	b32b      	cbz	r3, 800a4e6 <forward_sm+0x52>
 800a49a:	6852      	ldr	r2, [r2, #4]
 800a49c:	6851      	ldr	r1, [r2, #4]
 800a49e:	b101      	cbz	r1, 800a4a2 <forward_sm+0xe>
 800a4a0:	6809      	ldr	r1, [r1, #0]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d91c      	bls.n	800a4e0 <forward_sm+0x4c>
 800a4a6:	6913      	ldr	r3, [r2, #16]
 800a4a8:	b1c3      	cbz	r3, 800a4dc <forward_sm+0x48>
 800a4aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ac:	6818      	ldr	r0, [r3, #0]
 800a4ae:	688c      	ldr	r4, [r1, #8]
 800a4b0:	68c3      	ldr	r3, [r0, #12]
 800a4b2:	68ce      	ldr	r6, [r1, #12]
 800a4b4:	685f      	ldr	r7, [r3, #4]
 800a4b6:	6873      	ldr	r3, [r6, #4]
 800a4b8:	0a24      	lsrs	r4, r4, #8
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	d015      	beq.n	800a4ea <forward_sm+0x56>
 800a4be:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a4c8:	42a6      	cmp	r6, r4
 800a4ca:	fb05 f202 	mul.w	r2, r5, r2
 800a4ce:	d1f9      	bne.n	800a4c4 <forward_sm+0x30>
 800a4d0:	e9cd 3700 	strd	r3, r7, [sp]
 800a4d4:	f7ff ff5e 	bl	800a394 <nl_func_sm_array_f32>
 800a4d8:	b003      	add	sp, #12
 800a4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	deff      	udf	#255	; 0xff
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	deff      	udf	#255	; 0xff
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	deff      	udf	#255	; 0xff
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	e9cd 3700 	strd	r3, r7, [sp]
 800a4f0:	f7ff ff50 	bl	800a394 <nl_func_sm_array_f32>
 800a4f4:	b003      	add	sp, #12
 800a4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4f8 <ai_check_custom_types>:
 800a4f8:	4b13      	ldr	r3, [pc, #76]	; (800a548 <ai_check_custom_types+0x50>)
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	9301      	str	r3, [sp, #4]
 800a500:	b118      	cbz	r0, 800a50a <ai_check_custom_types+0x12>
 800a502:	7803      	ldrb	r3, [r0, #0]
 800a504:	2b03      	cmp	r3, #3
 800a506:	d002      	beq.n	800a50e <ai_check_custom_types+0x16>
 800a508:	2000      	movs	r0, #0
 800a50a:	b002      	add	sp, #8
 800a50c:	4770      	bx	lr
 800a50e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a512:	4293      	cmp	r3, r2
 800a514:	d004      	beq.n	800a520 <ai_check_custom_types+0x28>
 800a516:	2001      	movs	r0, #1
 800a518:	f080 0001 	eor.w	r0, r0, #1
 800a51c:	b002      	add	sp, #8
 800a51e:	4770      	bx	lr
 800a520:	7842      	ldrb	r2, [r0, #1]
 800a522:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a526:	429a      	cmp	r2, r3
 800a528:	f100 0001 	add.w	r0, r0, #1
 800a52c:	d1f3      	bne.n	800a516 <ai_check_custom_types+0x1e>
 800a52e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800a532:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a536:	429a      	cmp	r2, r3
 800a538:	d1ed      	bne.n	800a516 <ai_check_custom_types+0x1e>
 800a53a:	7842      	ldrb	r2, [r0, #1]
 800a53c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a540:	429a      	cmp	r2, r3
 800a542:	d1e8      	bne.n	800a516 <ai_check_custom_types+0x1e>
 800a544:	2000      	movs	r0, #0
 800a546:	e7e7      	b.n	800a518 <ai_check_custom_types+0x20>
 800a548:	0800bc3c 	.word	0x0800bc3c

0800a54c <ai_layers_init_all>:
 800a54c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a54e:	b17a      	cbz	r2, 800a570 <ai_layers_init_all+0x24>
 800a550:	6913      	ldr	r3, [r2, #16]
 800a552:	60d0      	str	r0, [r2, #12]
 800a554:	429a      	cmp	r2, r3
 800a556:	f04f 0201 	mov.w	r2, #1
 800a55a:	d009      	beq.n	800a570 <ai_layers_init_all+0x24>
 800a55c:	b143      	cbz	r3, 800a570 <ai_layers_init_all+0x24>
 800a55e:	6919      	ldr	r1, [r3, #16]
 800a560:	60d8      	str	r0, [r3, #12]
 800a562:	4299      	cmp	r1, r3
 800a564:	f102 0201 	add.w	r2, r2, #1
 800a568:	d002      	beq.n	800a570 <ai_layers_init_all+0x24>
 800a56a:	460b      	mov	r3, r1
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1f6      	bne.n	800a55e <ai_layers_init_all+0x12>
 800a570:	4610      	mov	r0, r2
 800a572:	4770      	bx	lr

0800a574 <ai_layers_post_init_all>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a578:	b18c      	cbz	r4, 800a59e <ai_layers_post_init_all+0x2a>
 800a57a:	2500      	movs	r5, #0
 800a57c:	6863      	ldr	r3, [r4, #4]
 800a57e:	f013 0f01 	tst.w	r3, #1
 800a582:	4620      	mov	r0, r4
 800a584:	d003      	beq.n	800a58e <ai_layers_post_init_all+0x1a>
 800a586:	6a23      	ldr	r3, [r4, #32]
 800a588:	b10b      	cbz	r3, 800a58e <ai_layers_post_init_all+0x1a>
 800a58a:	4798      	blx	r3
 800a58c:	3501      	adds	r5, #1
 800a58e:	6923      	ldr	r3, [r4, #16]
 800a590:	42a3      	cmp	r3, r4
 800a592:	d002      	beq.n	800a59a <ai_layers_post_init_all+0x26>
 800a594:	461c      	mov	r4, r3
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1f0      	bne.n	800a57c <ai_layers_post_init_all+0x8>
 800a59a:	4628      	mov	r0, r5
 800a59c:	bd38      	pop	{r3, r4, r5, pc}
 800a59e:	4625      	mov	r5, r4
 800a5a0:	e7fb      	b.n	800a59a <ai_layers_post_init_all+0x26>
 800a5a2:	bf00      	nop

0800a5a4 <ai_layers_forward_all>:
 800a5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a8:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800a5aa:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	2f00      	cmp	r7, #0
 800a5b0:	d02c      	beq.n	800a60c <ai_layers_forward_all+0x68>
 800a5b2:	2d00      	cmp	r5, #0
 800a5b4:	d03f      	beq.n	800a636 <ai_layers_forward_all+0x92>
 800a5b6:	6385      	str	r5, [r0, #56]	; 0x38
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a5bc:	2001      	movs	r0, #1
 800a5be:	47b8      	blx	r7
 800a5c0:	2600      	movs	r6, #0
 800a5c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a5c4:	46b0      	mov	r8, r6
 800a5c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a5c8:	2002      	movs	r0, #2
 800a5ca:	47b8      	blx	r7
 800a5cc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a5ce:	696b      	ldr	r3, [r5, #20]
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	4798      	blx	r3
 800a5d4:	692b      	ldr	r3, [r5, #16]
 800a5d6:	429d      	cmp	r5, r3
 800a5d8:	f04f 0003 	mov.w	r0, #3
 800a5dc:	4619      	mov	r1, r3
 800a5de:	d009      	beq.n	800a5f4 <ai_layers_forward_all+0x50>
 800a5e0:	63a3      	str	r3, [r4, #56]	; 0x38
 800a5e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a5e4:	47b8      	blx	r7
 800a5e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a5e8:	3601      	adds	r6, #1
 800a5ea:	2900      	cmp	r1, #0
 800a5ec:	d1eb      	bne.n	800a5c6 <ai_layers_forward_all+0x22>
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800a5fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a5fc:	47b8      	blx	r7
 800a5fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a600:	3601      	adds	r6, #1
 800a602:	2900      	cmp	r1, #0
 800a604:	d1df      	bne.n	800a5c6 <ai_layers_forward_all+0x22>
 800a606:	4630      	mov	r0, r6
 800a608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a60c:	b19d      	cbz	r5, 800a636 <ai_layers_forward_all+0x92>
 800a60e:	6385      	str	r5, [r0, #56]	; 0x38
 800a610:	463e      	mov	r6, r7
 800a612:	696b      	ldr	r3, [r5, #20]
 800a614:	4628      	mov	r0, r5
 800a616:	4798      	blx	r3
 800a618:	692b      	ldr	r3, [r5, #16]
 800a61a:	42ab      	cmp	r3, r5
 800a61c:	f106 0601 	add.w	r6, r6, #1
 800a620:	d004      	beq.n	800a62c <ai_layers_forward_all+0x88>
 800a622:	63a3      	str	r3, [r4, #56]	; 0x38
 800a624:	461d      	mov	r5, r3
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1f3      	bne.n	800a612 <ai_layers_forward_all+0x6e>
 800a62a:	e7e0      	b.n	800a5ee <ai_layers_forward_all+0x4a>
 800a62c:	2300      	movs	r3, #0
 800a62e:	63a3      	str	r3, [r4, #56]	; 0x38
 800a630:	4630      	mov	r0, r6
 800a632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a636:	462e      	mov	r6, r5
 800a638:	4630      	mov	r0, r6
 800a63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a63e:	bf00      	nop

0800a640 <ai_version_get>:
 800a640:	0212      	lsls	r2, r2, #8
 800a642:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a646:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800a64a:	4770      	bx	lr

0800a64c <get_tensor_byte_size>:
 800a64c:	6983      	ldr	r3, [r0, #24]
 800a64e:	68c1      	ldr	r1, [r0, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	6940      	ldr	r0, [r0, #20]
 800a654:	4a06      	ldr	r2, [pc, #24]	; (800a670 <get_tensor_byte_size+0x24>)
 800a656:	68c9      	ldr	r1, [r1, #12]
 800a658:	68c0      	ldr	r0, [r0, #12]
 800a65a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800a65e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a662:	fb00 f001 	mul.w	r0, r0, r1
 800a666:	4293      	cmp	r3, r2
 800a668:	bf04      	itt	eq
 800a66a:	3007      	addeq	r0, #7
 800a66c:	08c0      	lsreq	r0, r0, #3
 800a66e:	4770      	bx	lr
 800a670:	000400c0 	.word	0x000400c0

0800a674 <ai_array_to_buffer_fmt>:
 800a674:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800a678:	2b02      	cmp	r3, #2
 800a67a:	d036      	beq.n	800a6ea <ai_array_to_buffer_fmt+0x76>
 800a67c:	4a21      	ldr	r2, [pc, #132]	; (800a704 <ai_array_to_buffer_fmt+0x90>)
 800a67e:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800a682:	4293      	cmp	r3, r2
 800a684:	d00f      	beq.n	800a6a6 <ai_array_to_buffer_fmt+0x32>
 800a686:	dd12      	ble.n	800a6ae <ai_array_to_buffer_fmt+0x3a>
 800a688:	4a1f      	ldr	r2, [pc, #124]	; (800a708 <ai_array_to_buffer_fmt+0x94>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d00b      	beq.n	800a6a6 <ai_array_to_buffer_fmt+0x32>
 800a68e:	dd1e      	ble.n	800a6ce <ai_array_to_buffer_fmt+0x5a>
 800a690:	4a1e      	ldr	r2, [pc, #120]	; (800a70c <ai_array_to_buffer_fmt+0x98>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d007      	beq.n	800a6a6 <ai_array_to_buffer_fmt+0x32>
 800a696:	dd30      	ble.n	800a6fa <ai_array_to_buffer_fmt+0x86>
 800a698:	4a1d      	ldr	r2, [pc, #116]	; (800a710 <ai_array_to_buffer_fmt+0x9c>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d003      	beq.n	800a6a6 <ai_array_to_buffer_fmt+0x32>
 800a69e:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d11f      	bne.n	800a6e6 <ai_array_to_buffer_fmt+0x72>
 800a6a6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a6aa:	4318      	orrs	r0, r3
 800a6ac:	4770      	bx	lr
 800a6ae:	4a19      	ldr	r2, [pc, #100]	; (800a714 <ai_array_to_buffer_fmt+0xa0>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d0f8      	beq.n	800a6a6 <ai_array_to_buffer_fmt+0x32>
 800a6b4:	dd0b      	ble.n	800a6ce <ai_array_to_buffer_fmt+0x5a>
 800a6b6:	4a18      	ldr	r2, [pc, #96]	; (800a718 <ai_array_to_buffer_fmt+0xa4>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d0f4      	beq.n	800a6a6 <ai_array_to_buffer_fmt+0x32>
 800a6bc:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d0f0      	beq.n	800a6a6 <ai_array_to_buffer_fmt+0x32>
 800a6c4:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d10c      	bne.n	800a6e6 <ai_array_to_buffer_fmt+0x72>
 800a6cc:	e7eb      	b.n	800a6a6 <ai_array_to_buffer_fmt+0x32>
 800a6ce:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d0e7      	beq.n	800a6a6 <ai_array_to_buffer_fmt+0x32>
 800a6d6:	f502 7260 	add.w	r2, r2, #896	; 0x380
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d0e3      	beq.n	800a6a6 <ai_array_to_buffer_fmt+0x32>
 800a6de:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d0df      	beq.n	800a6a6 <ai_array_to_buffer_fmt+0x32>
 800a6e6:	2340      	movs	r3, #64	; 0x40
 800a6e8:	e7dd      	b.n	800a6a6 <ai_array_to_buffer_fmt+0x32>
 800a6ea:	4b0c      	ldr	r3, [pc, #48]	; (800a71c <ai_array_to_buffer_fmt+0xa8>)
 800a6ec:	4003      	ands	r3, r0
 800a6ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a6f2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a6f6:	4318      	orrs	r0, r3
 800a6f8:	4770      	bx	lr
 800a6fa:	3a0f      	subs	r2, #15
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d0d2      	beq.n	800a6a6 <ai_array_to_buffer_fmt+0x32>
 800a700:	e7f1      	b.n	800a6e6 <ai_array_to_buffer_fmt+0x72>
 800a702:	bf00      	nop
 800a704:	00060440 	.word	0x00060440
 800a708:	00840447 	.word	0x00840447
 800a70c:	0084084f 	.word	0x0084084f
 800a710:	00841040 	.word	0x00841040
 800a714:	00040447 	.word	0x00040447
 800a718:	0004084f 	.word	0x0004084f
 800a71c:	00803fff 	.word	0x00803fff

0800a720 <ai_array_get_byte_size>:
 800a720:	b1c1      	cbz	r1, 800a754 <ai_array_get_byte_size+0x34>
 800a722:	11c3      	asrs	r3, r0, #7
 800a724:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a728:	fb01 f102 	mul.w	r1, r1, r2
 800a72c:	3107      	adds	r1, #7
 800a72e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800a732:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800a736:	f021 0107 	bic.w	r1, r1, #7
 800a73a:	2804      	cmp	r0, #4
 800a73c:	fa21 f102 	lsr.w	r1, r1, r2
 800a740:	d00a      	beq.n	800a758 <ai_array_get_byte_size+0x38>
 800a742:	2808      	cmp	r0, #8
 800a744:	d103      	bne.n	800a74e <ai_array_get_byte_size+0x2e>
 800a746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a74a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800a74e:	3107      	adds	r1, #7
 800a750:	08c8      	lsrs	r0, r1, #3
 800a752:	4770      	bx	lr
 800a754:	4608      	mov	r0, r1
 800a756:	4770      	bx	lr
 800a758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a75c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800a760:	3107      	adds	r1, #7
 800a762:	08c8      	lsrs	r0, r1, #3
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop

0800a768 <ai_array_get_data_byte_size>:
 800a768:	b161      	cbz	r1, 800a784 <ai_array_get_data_byte_size+0x1c>
 800a76a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800a76e:	fb01 f103 	mul.w	r1, r1, r3
 800a772:	3107      	adds	r1, #7
 800a774:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800a778:	f021 0107 	bic.w	r1, r1, #7
 800a77c:	40c1      	lsrs	r1, r0
 800a77e:	3107      	adds	r1, #7
 800a780:	08c8      	lsrs	r0, r1, #3
 800a782:	4770      	bx	lr
 800a784:	4608      	mov	r0, r1
 800a786:	4770      	bx	lr

0800a788 <__errno>:
 800a788:	4b01      	ldr	r3, [pc, #4]	; (800a790 <__errno+0x8>)
 800a78a:	6818      	ldr	r0, [r3, #0]
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	20000468 	.word	0x20000468

0800a794 <__libc_init_array>:
 800a794:	b570      	push	{r4, r5, r6, lr}
 800a796:	4d0d      	ldr	r5, [pc, #52]	; (800a7cc <__libc_init_array+0x38>)
 800a798:	4c0d      	ldr	r4, [pc, #52]	; (800a7d0 <__libc_init_array+0x3c>)
 800a79a:	1b64      	subs	r4, r4, r5
 800a79c:	10a4      	asrs	r4, r4, #2
 800a79e:	2600      	movs	r6, #0
 800a7a0:	42a6      	cmp	r6, r4
 800a7a2:	d109      	bne.n	800a7b8 <__libc_init_array+0x24>
 800a7a4:	4d0b      	ldr	r5, [pc, #44]	; (800a7d4 <__libc_init_array+0x40>)
 800a7a6:	4c0c      	ldr	r4, [pc, #48]	; (800a7d8 <__libc_init_array+0x44>)
 800a7a8:	f001 f996 	bl	800bad8 <_init>
 800a7ac:	1b64      	subs	r4, r4, r5
 800a7ae:	10a4      	asrs	r4, r4, #2
 800a7b0:	2600      	movs	r6, #0
 800a7b2:	42a6      	cmp	r6, r4
 800a7b4:	d105      	bne.n	800a7c2 <__libc_init_array+0x2e>
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}
 800a7b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7bc:	4798      	blx	r3
 800a7be:	3601      	adds	r6, #1
 800a7c0:	e7ee      	b.n	800a7a0 <__libc_init_array+0xc>
 800a7c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7c6:	4798      	blx	r3
 800a7c8:	3601      	adds	r6, #1
 800a7ca:	e7f2      	b.n	800a7b2 <__libc_init_array+0x1e>
 800a7cc:	080137e0 	.word	0x080137e0
 800a7d0:	080137e0 	.word	0x080137e0
 800a7d4:	080137e0 	.word	0x080137e0
 800a7d8:	080137e4 	.word	0x080137e4

0800a7dc <memcpy>:
 800a7dc:	440a      	add	r2, r1
 800a7de:	4291      	cmp	r1, r2
 800a7e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7e4:	d100      	bne.n	800a7e8 <memcpy+0xc>
 800a7e6:	4770      	bx	lr
 800a7e8:	b510      	push	{r4, lr}
 800a7ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7f2:	4291      	cmp	r1, r2
 800a7f4:	d1f9      	bne.n	800a7ea <memcpy+0xe>
 800a7f6:	bd10      	pop	{r4, pc}

0800a7f8 <memset>:
 800a7f8:	4402      	add	r2, r0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d100      	bne.n	800a802 <memset+0xa>
 800a800:	4770      	bx	lr
 800a802:	f803 1b01 	strb.w	r1, [r3], #1
 800a806:	e7f9      	b.n	800a7fc <memset+0x4>

0800a808 <_free_r>:
 800a808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a80a:	2900      	cmp	r1, #0
 800a80c:	d044      	beq.n	800a898 <_free_r+0x90>
 800a80e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a812:	9001      	str	r0, [sp, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	f1a1 0404 	sub.w	r4, r1, #4
 800a81a:	bfb8      	it	lt
 800a81c:	18e4      	addlt	r4, r4, r3
 800a81e:	f000 fc51 	bl	800b0c4 <__malloc_lock>
 800a822:	4a1e      	ldr	r2, [pc, #120]	; (800a89c <_free_r+0x94>)
 800a824:	9801      	ldr	r0, [sp, #4]
 800a826:	6813      	ldr	r3, [r2, #0]
 800a828:	b933      	cbnz	r3, 800a838 <_free_r+0x30>
 800a82a:	6063      	str	r3, [r4, #4]
 800a82c:	6014      	str	r4, [r2, #0]
 800a82e:	b003      	add	sp, #12
 800a830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a834:	f000 bc4c 	b.w	800b0d0 <__malloc_unlock>
 800a838:	42a3      	cmp	r3, r4
 800a83a:	d908      	bls.n	800a84e <_free_r+0x46>
 800a83c:	6825      	ldr	r5, [r4, #0]
 800a83e:	1961      	adds	r1, r4, r5
 800a840:	428b      	cmp	r3, r1
 800a842:	bf01      	itttt	eq
 800a844:	6819      	ldreq	r1, [r3, #0]
 800a846:	685b      	ldreq	r3, [r3, #4]
 800a848:	1949      	addeq	r1, r1, r5
 800a84a:	6021      	streq	r1, [r4, #0]
 800a84c:	e7ed      	b.n	800a82a <_free_r+0x22>
 800a84e:	461a      	mov	r2, r3
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	b10b      	cbz	r3, 800a858 <_free_r+0x50>
 800a854:	42a3      	cmp	r3, r4
 800a856:	d9fa      	bls.n	800a84e <_free_r+0x46>
 800a858:	6811      	ldr	r1, [r2, #0]
 800a85a:	1855      	adds	r5, r2, r1
 800a85c:	42a5      	cmp	r5, r4
 800a85e:	d10b      	bne.n	800a878 <_free_r+0x70>
 800a860:	6824      	ldr	r4, [r4, #0]
 800a862:	4421      	add	r1, r4
 800a864:	1854      	adds	r4, r2, r1
 800a866:	42a3      	cmp	r3, r4
 800a868:	6011      	str	r1, [r2, #0]
 800a86a:	d1e0      	bne.n	800a82e <_free_r+0x26>
 800a86c:	681c      	ldr	r4, [r3, #0]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	6053      	str	r3, [r2, #4]
 800a872:	4421      	add	r1, r4
 800a874:	6011      	str	r1, [r2, #0]
 800a876:	e7da      	b.n	800a82e <_free_r+0x26>
 800a878:	d902      	bls.n	800a880 <_free_r+0x78>
 800a87a:	230c      	movs	r3, #12
 800a87c:	6003      	str	r3, [r0, #0]
 800a87e:	e7d6      	b.n	800a82e <_free_r+0x26>
 800a880:	6825      	ldr	r5, [r4, #0]
 800a882:	1961      	adds	r1, r4, r5
 800a884:	428b      	cmp	r3, r1
 800a886:	bf04      	itt	eq
 800a888:	6819      	ldreq	r1, [r3, #0]
 800a88a:	685b      	ldreq	r3, [r3, #4]
 800a88c:	6063      	str	r3, [r4, #4]
 800a88e:	bf04      	itt	eq
 800a890:	1949      	addeq	r1, r1, r5
 800a892:	6021      	streq	r1, [r4, #0]
 800a894:	6054      	str	r4, [r2, #4]
 800a896:	e7ca      	b.n	800a82e <_free_r+0x26>
 800a898:	b003      	add	sp, #12
 800a89a:	bd30      	pop	{r4, r5, pc}
 800a89c:	20003248 	.word	0x20003248

0800a8a0 <sbrk_aligned>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	4e0e      	ldr	r6, [pc, #56]	; (800a8dc <sbrk_aligned+0x3c>)
 800a8a4:	460c      	mov	r4, r1
 800a8a6:	6831      	ldr	r1, [r6, #0]
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	b911      	cbnz	r1, 800a8b2 <sbrk_aligned+0x12>
 800a8ac:	f000 f91a 	bl	800aae4 <_sbrk_r>
 800a8b0:	6030      	str	r0, [r6, #0]
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	f000 f915 	bl	800aae4 <_sbrk_r>
 800a8ba:	1c43      	adds	r3, r0, #1
 800a8bc:	d00a      	beq.n	800a8d4 <sbrk_aligned+0x34>
 800a8be:	1cc4      	adds	r4, r0, #3
 800a8c0:	f024 0403 	bic.w	r4, r4, #3
 800a8c4:	42a0      	cmp	r0, r4
 800a8c6:	d007      	beq.n	800a8d8 <sbrk_aligned+0x38>
 800a8c8:	1a21      	subs	r1, r4, r0
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f000 f90a 	bl	800aae4 <_sbrk_r>
 800a8d0:	3001      	adds	r0, #1
 800a8d2:	d101      	bne.n	800a8d8 <sbrk_aligned+0x38>
 800a8d4:	f04f 34ff 	mov.w	r4, #4294967295
 800a8d8:	4620      	mov	r0, r4
 800a8da:	bd70      	pop	{r4, r5, r6, pc}
 800a8dc:	2000324c 	.word	0x2000324c

0800a8e0 <_malloc_r>:
 800a8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e4:	1ccd      	adds	r5, r1, #3
 800a8e6:	f025 0503 	bic.w	r5, r5, #3
 800a8ea:	3508      	adds	r5, #8
 800a8ec:	2d0c      	cmp	r5, #12
 800a8ee:	bf38      	it	cc
 800a8f0:	250c      	movcc	r5, #12
 800a8f2:	2d00      	cmp	r5, #0
 800a8f4:	4607      	mov	r7, r0
 800a8f6:	db01      	blt.n	800a8fc <_malloc_r+0x1c>
 800a8f8:	42a9      	cmp	r1, r5
 800a8fa:	d905      	bls.n	800a908 <_malloc_r+0x28>
 800a8fc:	230c      	movs	r3, #12
 800a8fe:	603b      	str	r3, [r7, #0]
 800a900:	2600      	movs	r6, #0
 800a902:	4630      	mov	r0, r6
 800a904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a908:	4e2e      	ldr	r6, [pc, #184]	; (800a9c4 <_malloc_r+0xe4>)
 800a90a:	f000 fbdb 	bl	800b0c4 <__malloc_lock>
 800a90e:	6833      	ldr	r3, [r6, #0]
 800a910:	461c      	mov	r4, r3
 800a912:	bb34      	cbnz	r4, 800a962 <_malloc_r+0x82>
 800a914:	4629      	mov	r1, r5
 800a916:	4638      	mov	r0, r7
 800a918:	f7ff ffc2 	bl	800a8a0 <sbrk_aligned>
 800a91c:	1c43      	adds	r3, r0, #1
 800a91e:	4604      	mov	r4, r0
 800a920:	d14d      	bne.n	800a9be <_malloc_r+0xde>
 800a922:	6834      	ldr	r4, [r6, #0]
 800a924:	4626      	mov	r6, r4
 800a926:	2e00      	cmp	r6, #0
 800a928:	d140      	bne.n	800a9ac <_malloc_r+0xcc>
 800a92a:	6823      	ldr	r3, [r4, #0]
 800a92c:	4631      	mov	r1, r6
 800a92e:	4638      	mov	r0, r7
 800a930:	eb04 0803 	add.w	r8, r4, r3
 800a934:	f000 f8d6 	bl	800aae4 <_sbrk_r>
 800a938:	4580      	cmp	r8, r0
 800a93a:	d13a      	bne.n	800a9b2 <_malloc_r+0xd2>
 800a93c:	6821      	ldr	r1, [r4, #0]
 800a93e:	3503      	adds	r5, #3
 800a940:	1a6d      	subs	r5, r5, r1
 800a942:	f025 0503 	bic.w	r5, r5, #3
 800a946:	3508      	adds	r5, #8
 800a948:	2d0c      	cmp	r5, #12
 800a94a:	bf38      	it	cc
 800a94c:	250c      	movcc	r5, #12
 800a94e:	4629      	mov	r1, r5
 800a950:	4638      	mov	r0, r7
 800a952:	f7ff ffa5 	bl	800a8a0 <sbrk_aligned>
 800a956:	3001      	adds	r0, #1
 800a958:	d02b      	beq.n	800a9b2 <_malloc_r+0xd2>
 800a95a:	6823      	ldr	r3, [r4, #0]
 800a95c:	442b      	add	r3, r5
 800a95e:	6023      	str	r3, [r4, #0]
 800a960:	e00e      	b.n	800a980 <_malloc_r+0xa0>
 800a962:	6822      	ldr	r2, [r4, #0]
 800a964:	1b52      	subs	r2, r2, r5
 800a966:	d41e      	bmi.n	800a9a6 <_malloc_r+0xc6>
 800a968:	2a0b      	cmp	r2, #11
 800a96a:	d916      	bls.n	800a99a <_malloc_r+0xba>
 800a96c:	1961      	adds	r1, r4, r5
 800a96e:	42a3      	cmp	r3, r4
 800a970:	6025      	str	r5, [r4, #0]
 800a972:	bf18      	it	ne
 800a974:	6059      	strne	r1, [r3, #4]
 800a976:	6863      	ldr	r3, [r4, #4]
 800a978:	bf08      	it	eq
 800a97a:	6031      	streq	r1, [r6, #0]
 800a97c:	5162      	str	r2, [r4, r5]
 800a97e:	604b      	str	r3, [r1, #4]
 800a980:	4638      	mov	r0, r7
 800a982:	f104 060b 	add.w	r6, r4, #11
 800a986:	f000 fba3 	bl	800b0d0 <__malloc_unlock>
 800a98a:	f026 0607 	bic.w	r6, r6, #7
 800a98e:	1d23      	adds	r3, r4, #4
 800a990:	1af2      	subs	r2, r6, r3
 800a992:	d0b6      	beq.n	800a902 <_malloc_r+0x22>
 800a994:	1b9b      	subs	r3, r3, r6
 800a996:	50a3      	str	r3, [r4, r2]
 800a998:	e7b3      	b.n	800a902 <_malloc_r+0x22>
 800a99a:	6862      	ldr	r2, [r4, #4]
 800a99c:	42a3      	cmp	r3, r4
 800a99e:	bf0c      	ite	eq
 800a9a0:	6032      	streq	r2, [r6, #0]
 800a9a2:	605a      	strne	r2, [r3, #4]
 800a9a4:	e7ec      	b.n	800a980 <_malloc_r+0xa0>
 800a9a6:	4623      	mov	r3, r4
 800a9a8:	6864      	ldr	r4, [r4, #4]
 800a9aa:	e7b2      	b.n	800a912 <_malloc_r+0x32>
 800a9ac:	4634      	mov	r4, r6
 800a9ae:	6876      	ldr	r6, [r6, #4]
 800a9b0:	e7b9      	b.n	800a926 <_malloc_r+0x46>
 800a9b2:	230c      	movs	r3, #12
 800a9b4:	603b      	str	r3, [r7, #0]
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	f000 fb8a 	bl	800b0d0 <__malloc_unlock>
 800a9bc:	e7a1      	b.n	800a902 <_malloc_r+0x22>
 800a9be:	6025      	str	r5, [r4, #0]
 800a9c0:	e7de      	b.n	800a980 <_malloc_r+0xa0>
 800a9c2:	bf00      	nop
 800a9c4:	20003248 	.word	0x20003248

0800a9c8 <iprintf>:
 800a9c8:	b40f      	push	{r0, r1, r2, r3}
 800a9ca:	4b0a      	ldr	r3, [pc, #40]	; (800a9f4 <iprintf+0x2c>)
 800a9cc:	b513      	push	{r0, r1, r4, lr}
 800a9ce:	681c      	ldr	r4, [r3, #0]
 800a9d0:	b124      	cbz	r4, 800a9dc <iprintf+0x14>
 800a9d2:	69a3      	ldr	r3, [r4, #24]
 800a9d4:	b913      	cbnz	r3, 800a9dc <iprintf+0x14>
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f000 fa6e 	bl	800aeb8 <__sinit>
 800a9dc:	ab05      	add	r3, sp, #20
 800a9de:	9a04      	ldr	r2, [sp, #16]
 800a9e0:	68a1      	ldr	r1, [r4, #8]
 800a9e2:	9301      	str	r3, [sp, #4]
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f000 fba3 	bl	800b130 <_vfiprintf_r>
 800a9ea:	b002      	add	sp, #8
 800a9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9f0:	b004      	add	sp, #16
 800a9f2:	4770      	bx	lr
 800a9f4:	20000468 	.word	0x20000468

0800a9f8 <_puts_r>:
 800a9f8:	b570      	push	{r4, r5, r6, lr}
 800a9fa:	460e      	mov	r6, r1
 800a9fc:	4605      	mov	r5, r0
 800a9fe:	b118      	cbz	r0, 800aa08 <_puts_r+0x10>
 800aa00:	6983      	ldr	r3, [r0, #24]
 800aa02:	b90b      	cbnz	r3, 800aa08 <_puts_r+0x10>
 800aa04:	f000 fa58 	bl	800aeb8 <__sinit>
 800aa08:	69ab      	ldr	r3, [r5, #24]
 800aa0a:	68ac      	ldr	r4, [r5, #8]
 800aa0c:	b913      	cbnz	r3, 800aa14 <_puts_r+0x1c>
 800aa0e:	4628      	mov	r0, r5
 800aa10:	f000 fa52 	bl	800aeb8 <__sinit>
 800aa14:	4b2c      	ldr	r3, [pc, #176]	; (800aac8 <_puts_r+0xd0>)
 800aa16:	429c      	cmp	r4, r3
 800aa18:	d120      	bne.n	800aa5c <_puts_r+0x64>
 800aa1a:	686c      	ldr	r4, [r5, #4]
 800aa1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa1e:	07db      	lsls	r3, r3, #31
 800aa20:	d405      	bmi.n	800aa2e <_puts_r+0x36>
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	0598      	lsls	r0, r3, #22
 800aa26:	d402      	bmi.n	800aa2e <_puts_r+0x36>
 800aa28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa2a:	f000 fae3 	bl	800aff4 <__retarget_lock_acquire_recursive>
 800aa2e:	89a3      	ldrh	r3, [r4, #12]
 800aa30:	0719      	lsls	r1, r3, #28
 800aa32:	d51d      	bpl.n	800aa70 <_puts_r+0x78>
 800aa34:	6923      	ldr	r3, [r4, #16]
 800aa36:	b1db      	cbz	r3, 800aa70 <_puts_r+0x78>
 800aa38:	3e01      	subs	r6, #1
 800aa3a:	68a3      	ldr	r3, [r4, #8]
 800aa3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa40:	3b01      	subs	r3, #1
 800aa42:	60a3      	str	r3, [r4, #8]
 800aa44:	bb39      	cbnz	r1, 800aa96 <_puts_r+0x9e>
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	da38      	bge.n	800aabc <_puts_r+0xc4>
 800aa4a:	4622      	mov	r2, r4
 800aa4c:	210a      	movs	r1, #10
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f000 f858 	bl	800ab04 <__swbuf_r>
 800aa54:	3001      	adds	r0, #1
 800aa56:	d011      	beq.n	800aa7c <_puts_r+0x84>
 800aa58:	250a      	movs	r5, #10
 800aa5a:	e011      	b.n	800aa80 <_puts_r+0x88>
 800aa5c:	4b1b      	ldr	r3, [pc, #108]	; (800aacc <_puts_r+0xd4>)
 800aa5e:	429c      	cmp	r4, r3
 800aa60:	d101      	bne.n	800aa66 <_puts_r+0x6e>
 800aa62:	68ac      	ldr	r4, [r5, #8]
 800aa64:	e7da      	b.n	800aa1c <_puts_r+0x24>
 800aa66:	4b1a      	ldr	r3, [pc, #104]	; (800aad0 <_puts_r+0xd8>)
 800aa68:	429c      	cmp	r4, r3
 800aa6a:	bf08      	it	eq
 800aa6c:	68ec      	ldreq	r4, [r5, #12]
 800aa6e:	e7d5      	b.n	800aa1c <_puts_r+0x24>
 800aa70:	4621      	mov	r1, r4
 800aa72:	4628      	mov	r0, r5
 800aa74:	f000 f898 	bl	800aba8 <__swsetup_r>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	d0dd      	beq.n	800aa38 <_puts_r+0x40>
 800aa7c:	f04f 35ff 	mov.w	r5, #4294967295
 800aa80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa82:	07da      	lsls	r2, r3, #31
 800aa84:	d405      	bmi.n	800aa92 <_puts_r+0x9a>
 800aa86:	89a3      	ldrh	r3, [r4, #12]
 800aa88:	059b      	lsls	r3, r3, #22
 800aa8a:	d402      	bmi.n	800aa92 <_puts_r+0x9a>
 800aa8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa8e:	f000 fab2 	bl	800aff6 <__retarget_lock_release_recursive>
 800aa92:	4628      	mov	r0, r5
 800aa94:	bd70      	pop	{r4, r5, r6, pc}
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	da04      	bge.n	800aaa4 <_puts_r+0xac>
 800aa9a:	69a2      	ldr	r2, [r4, #24]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	dc06      	bgt.n	800aaae <_puts_r+0xb6>
 800aaa0:	290a      	cmp	r1, #10
 800aaa2:	d004      	beq.n	800aaae <_puts_r+0xb6>
 800aaa4:	6823      	ldr	r3, [r4, #0]
 800aaa6:	1c5a      	adds	r2, r3, #1
 800aaa8:	6022      	str	r2, [r4, #0]
 800aaaa:	7019      	strb	r1, [r3, #0]
 800aaac:	e7c5      	b.n	800aa3a <_puts_r+0x42>
 800aaae:	4622      	mov	r2, r4
 800aab0:	4628      	mov	r0, r5
 800aab2:	f000 f827 	bl	800ab04 <__swbuf_r>
 800aab6:	3001      	adds	r0, #1
 800aab8:	d1bf      	bne.n	800aa3a <_puts_r+0x42>
 800aaba:	e7df      	b.n	800aa7c <_puts_r+0x84>
 800aabc:	6823      	ldr	r3, [r4, #0]
 800aabe:	250a      	movs	r5, #10
 800aac0:	1c5a      	adds	r2, r3, #1
 800aac2:	6022      	str	r2, [r4, #0]
 800aac4:	701d      	strb	r5, [r3, #0]
 800aac6:	e7db      	b.n	800aa80 <_puts_r+0x88>
 800aac8:	0801374c 	.word	0x0801374c
 800aacc:	0801376c 	.word	0x0801376c
 800aad0:	0801372c 	.word	0x0801372c

0800aad4 <puts>:
 800aad4:	4b02      	ldr	r3, [pc, #8]	; (800aae0 <puts+0xc>)
 800aad6:	4601      	mov	r1, r0
 800aad8:	6818      	ldr	r0, [r3, #0]
 800aada:	f7ff bf8d 	b.w	800a9f8 <_puts_r>
 800aade:	bf00      	nop
 800aae0:	20000468 	.word	0x20000468

0800aae4 <_sbrk_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	4d06      	ldr	r5, [pc, #24]	; (800ab00 <_sbrk_r+0x1c>)
 800aae8:	2300      	movs	r3, #0
 800aaea:	4604      	mov	r4, r0
 800aaec:	4608      	mov	r0, r1
 800aaee:	602b      	str	r3, [r5, #0]
 800aaf0:	f7f6 f91e 	bl	8000d30 <_sbrk>
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	d102      	bne.n	800aafe <_sbrk_r+0x1a>
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	b103      	cbz	r3, 800aafe <_sbrk_r+0x1a>
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	20003254 	.word	0x20003254

0800ab04 <__swbuf_r>:
 800ab04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab06:	460e      	mov	r6, r1
 800ab08:	4614      	mov	r4, r2
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	b118      	cbz	r0, 800ab16 <__swbuf_r+0x12>
 800ab0e:	6983      	ldr	r3, [r0, #24]
 800ab10:	b90b      	cbnz	r3, 800ab16 <__swbuf_r+0x12>
 800ab12:	f000 f9d1 	bl	800aeb8 <__sinit>
 800ab16:	4b21      	ldr	r3, [pc, #132]	; (800ab9c <__swbuf_r+0x98>)
 800ab18:	429c      	cmp	r4, r3
 800ab1a:	d12b      	bne.n	800ab74 <__swbuf_r+0x70>
 800ab1c:	686c      	ldr	r4, [r5, #4]
 800ab1e:	69a3      	ldr	r3, [r4, #24]
 800ab20:	60a3      	str	r3, [r4, #8]
 800ab22:	89a3      	ldrh	r3, [r4, #12]
 800ab24:	071a      	lsls	r2, r3, #28
 800ab26:	d52f      	bpl.n	800ab88 <__swbuf_r+0x84>
 800ab28:	6923      	ldr	r3, [r4, #16]
 800ab2a:	b36b      	cbz	r3, 800ab88 <__swbuf_r+0x84>
 800ab2c:	6923      	ldr	r3, [r4, #16]
 800ab2e:	6820      	ldr	r0, [r4, #0]
 800ab30:	1ac0      	subs	r0, r0, r3
 800ab32:	6963      	ldr	r3, [r4, #20]
 800ab34:	b2f6      	uxtb	r6, r6
 800ab36:	4283      	cmp	r3, r0
 800ab38:	4637      	mov	r7, r6
 800ab3a:	dc04      	bgt.n	800ab46 <__swbuf_r+0x42>
 800ab3c:	4621      	mov	r1, r4
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f000 f926 	bl	800ad90 <_fflush_r>
 800ab44:	bb30      	cbnz	r0, 800ab94 <__swbuf_r+0x90>
 800ab46:	68a3      	ldr	r3, [r4, #8]
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	60a3      	str	r3, [r4, #8]
 800ab4c:	6823      	ldr	r3, [r4, #0]
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	6022      	str	r2, [r4, #0]
 800ab52:	701e      	strb	r6, [r3, #0]
 800ab54:	6963      	ldr	r3, [r4, #20]
 800ab56:	3001      	adds	r0, #1
 800ab58:	4283      	cmp	r3, r0
 800ab5a:	d004      	beq.n	800ab66 <__swbuf_r+0x62>
 800ab5c:	89a3      	ldrh	r3, [r4, #12]
 800ab5e:	07db      	lsls	r3, r3, #31
 800ab60:	d506      	bpl.n	800ab70 <__swbuf_r+0x6c>
 800ab62:	2e0a      	cmp	r6, #10
 800ab64:	d104      	bne.n	800ab70 <__swbuf_r+0x6c>
 800ab66:	4621      	mov	r1, r4
 800ab68:	4628      	mov	r0, r5
 800ab6a:	f000 f911 	bl	800ad90 <_fflush_r>
 800ab6e:	b988      	cbnz	r0, 800ab94 <__swbuf_r+0x90>
 800ab70:	4638      	mov	r0, r7
 800ab72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab74:	4b0a      	ldr	r3, [pc, #40]	; (800aba0 <__swbuf_r+0x9c>)
 800ab76:	429c      	cmp	r4, r3
 800ab78:	d101      	bne.n	800ab7e <__swbuf_r+0x7a>
 800ab7a:	68ac      	ldr	r4, [r5, #8]
 800ab7c:	e7cf      	b.n	800ab1e <__swbuf_r+0x1a>
 800ab7e:	4b09      	ldr	r3, [pc, #36]	; (800aba4 <__swbuf_r+0xa0>)
 800ab80:	429c      	cmp	r4, r3
 800ab82:	bf08      	it	eq
 800ab84:	68ec      	ldreq	r4, [r5, #12]
 800ab86:	e7ca      	b.n	800ab1e <__swbuf_r+0x1a>
 800ab88:	4621      	mov	r1, r4
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	f000 f80c 	bl	800aba8 <__swsetup_r>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d0cb      	beq.n	800ab2c <__swbuf_r+0x28>
 800ab94:	f04f 37ff 	mov.w	r7, #4294967295
 800ab98:	e7ea      	b.n	800ab70 <__swbuf_r+0x6c>
 800ab9a:	bf00      	nop
 800ab9c:	0801374c 	.word	0x0801374c
 800aba0:	0801376c 	.word	0x0801376c
 800aba4:	0801372c 	.word	0x0801372c

0800aba8 <__swsetup_r>:
 800aba8:	4b32      	ldr	r3, [pc, #200]	; (800ac74 <__swsetup_r+0xcc>)
 800abaa:	b570      	push	{r4, r5, r6, lr}
 800abac:	681d      	ldr	r5, [r3, #0]
 800abae:	4606      	mov	r6, r0
 800abb0:	460c      	mov	r4, r1
 800abb2:	b125      	cbz	r5, 800abbe <__swsetup_r+0x16>
 800abb4:	69ab      	ldr	r3, [r5, #24]
 800abb6:	b913      	cbnz	r3, 800abbe <__swsetup_r+0x16>
 800abb8:	4628      	mov	r0, r5
 800abba:	f000 f97d 	bl	800aeb8 <__sinit>
 800abbe:	4b2e      	ldr	r3, [pc, #184]	; (800ac78 <__swsetup_r+0xd0>)
 800abc0:	429c      	cmp	r4, r3
 800abc2:	d10f      	bne.n	800abe4 <__swsetup_r+0x3c>
 800abc4:	686c      	ldr	r4, [r5, #4]
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abcc:	0719      	lsls	r1, r3, #28
 800abce:	d42c      	bmi.n	800ac2a <__swsetup_r+0x82>
 800abd0:	06dd      	lsls	r5, r3, #27
 800abd2:	d411      	bmi.n	800abf8 <__swsetup_r+0x50>
 800abd4:	2309      	movs	r3, #9
 800abd6:	6033      	str	r3, [r6, #0]
 800abd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abdc:	81a3      	strh	r3, [r4, #12]
 800abde:	f04f 30ff 	mov.w	r0, #4294967295
 800abe2:	e03e      	b.n	800ac62 <__swsetup_r+0xba>
 800abe4:	4b25      	ldr	r3, [pc, #148]	; (800ac7c <__swsetup_r+0xd4>)
 800abe6:	429c      	cmp	r4, r3
 800abe8:	d101      	bne.n	800abee <__swsetup_r+0x46>
 800abea:	68ac      	ldr	r4, [r5, #8]
 800abec:	e7eb      	b.n	800abc6 <__swsetup_r+0x1e>
 800abee:	4b24      	ldr	r3, [pc, #144]	; (800ac80 <__swsetup_r+0xd8>)
 800abf0:	429c      	cmp	r4, r3
 800abf2:	bf08      	it	eq
 800abf4:	68ec      	ldreq	r4, [r5, #12]
 800abf6:	e7e6      	b.n	800abc6 <__swsetup_r+0x1e>
 800abf8:	0758      	lsls	r0, r3, #29
 800abfa:	d512      	bpl.n	800ac22 <__swsetup_r+0x7a>
 800abfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abfe:	b141      	cbz	r1, 800ac12 <__swsetup_r+0x6a>
 800ac00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac04:	4299      	cmp	r1, r3
 800ac06:	d002      	beq.n	800ac0e <__swsetup_r+0x66>
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f7ff fdfd 	bl	800a808 <_free_r>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	6363      	str	r3, [r4, #52]	; 0x34
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac18:	81a3      	strh	r3, [r4, #12]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	6063      	str	r3, [r4, #4]
 800ac1e:	6923      	ldr	r3, [r4, #16]
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	89a3      	ldrh	r3, [r4, #12]
 800ac24:	f043 0308 	orr.w	r3, r3, #8
 800ac28:	81a3      	strh	r3, [r4, #12]
 800ac2a:	6923      	ldr	r3, [r4, #16]
 800ac2c:	b94b      	cbnz	r3, 800ac42 <__swsetup_r+0x9a>
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac38:	d003      	beq.n	800ac42 <__swsetup_r+0x9a>
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	f000 fa01 	bl	800b044 <__smakebuf_r>
 800ac42:	89a0      	ldrh	r0, [r4, #12]
 800ac44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac48:	f010 0301 	ands.w	r3, r0, #1
 800ac4c:	d00a      	beq.n	800ac64 <__swsetup_r+0xbc>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	60a3      	str	r3, [r4, #8]
 800ac52:	6963      	ldr	r3, [r4, #20]
 800ac54:	425b      	negs	r3, r3
 800ac56:	61a3      	str	r3, [r4, #24]
 800ac58:	6923      	ldr	r3, [r4, #16]
 800ac5a:	b943      	cbnz	r3, 800ac6e <__swsetup_r+0xc6>
 800ac5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac60:	d1ba      	bne.n	800abd8 <__swsetup_r+0x30>
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	0781      	lsls	r1, r0, #30
 800ac66:	bf58      	it	pl
 800ac68:	6963      	ldrpl	r3, [r4, #20]
 800ac6a:	60a3      	str	r3, [r4, #8]
 800ac6c:	e7f4      	b.n	800ac58 <__swsetup_r+0xb0>
 800ac6e:	2000      	movs	r0, #0
 800ac70:	e7f7      	b.n	800ac62 <__swsetup_r+0xba>
 800ac72:	bf00      	nop
 800ac74:	20000468 	.word	0x20000468
 800ac78:	0801374c 	.word	0x0801374c
 800ac7c:	0801376c 	.word	0x0801376c
 800ac80:	0801372c 	.word	0x0801372c

0800ac84 <__sflush_r>:
 800ac84:	898a      	ldrh	r2, [r1, #12]
 800ac86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	0710      	lsls	r0, r2, #28
 800ac8e:	460c      	mov	r4, r1
 800ac90:	d458      	bmi.n	800ad44 <__sflush_r+0xc0>
 800ac92:	684b      	ldr	r3, [r1, #4]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	dc05      	bgt.n	800aca4 <__sflush_r+0x20>
 800ac98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	dc02      	bgt.n	800aca4 <__sflush_r+0x20>
 800ac9e:	2000      	movs	r0, #0
 800aca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aca6:	2e00      	cmp	r6, #0
 800aca8:	d0f9      	beq.n	800ac9e <__sflush_r+0x1a>
 800acaa:	2300      	movs	r3, #0
 800acac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acb0:	682f      	ldr	r7, [r5, #0]
 800acb2:	602b      	str	r3, [r5, #0]
 800acb4:	d032      	beq.n	800ad1c <__sflush_r+0x98>
 800acb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acb8:	89a3      	ldrh	r3, [r4, #12]
 800acba:	075a      	lsls	r2, r3, #29
 800acbc:	d505      	bpl.n	800acca <__sflush_r+0x46>
 800acbe:	6863      	ldr	r3, [r4, #4]
 800acc0:	1ac0      	subs	r0, r0, r3
 800acc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acc4:	b10b      	cbz	r3, 800acca <__sflush_r+0x46>
 800acc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acc8:	1ac0      	subs	r0, r0, r3
 800acca:	2300      	movs	r3, #0
 800accc:	4602      	mov	r2, r0
 800acce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acd0:	6a21      	ldr	r1, [r4, #32]
 800acd2:	4628      	mov	r0, r5
 800acd4:	47b0      	blx	r6
 800acd6:	1c43      	adds	r3, r0, #1
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	d106      	bne.n	800acea <__sflush_r+0x66>
 800acdc:	6829      	ldr	r1, [r5, #0]
 800acde:	291d      	cmp	r1, #29
 800ace0:	d82c      	bhi.n	800ad3c <__sflush_r+0xb8>
 800ace2:	4a2a      	ldr	r2, [pc, #168]	; (800ad8c <__sflush_r+0x108>)
 800ace4:	40ca      	lsrs	r2, r1
 800ace6:	07d6      	lsls	r6, r2, #31
 800ace8:	d528      	bpl.n	800ad3c <__sflush_r+0xb8>
 800acea:	2200      	movs	r2, #0
 800acec:	6062      	str	r2, [r4, #4]
 800acee:	04d9      	lsls	r1, r3, #19
 800acf0:	6922      	ldr	r2, [r4, #16]
 800acf2:	6022      	str	r2, [r4, #0]
 800acf4:	d504      	bpl.n	800ad00 <__sflush_r+0x7c>
 800acf6:	1c42      	adds	r2, r0, #1
 800acf8:	d101      	bne.n	800acfe <__sflush_r+0x7a>
 800acfa:	682b      	ldr	r3, [r5, #0]
 800acfc:	b903      	cbnz	r3, 800ad00 <__sflush_r+0x7c>
 800acfe:	6560      	str	r0, [r4, #84]	; 0x54
 800ad00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad02:	602f      	str	r7, [r5, #0]
 800ad04:	2900      	cmp	r1, #0
 800ad06:	d0ca      	beq.n	800ac9e <__sflush_r+0x1a>
 800ad08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad0c:	4299      	cmp	r1, r3
 800ad0e:	d002      	beq.n	800ad16 <__sflush_r+0x92>
 800ad10:	4628      	mov	r0, r5
 800ad12:	f7ff fd79 	bl	800a808 <_free_r>
 800ad16:	2000      	movs	r0, #0
 800ad18:	6360      	str	r0, [r4, #52]	; 0x34
 800ad1a:	e7c1      	b.n	800aca0 <__sflush_r+0x1c>
 800ad1c:	6a21      	ldr	r1, [r4, #32]
 800ad1e:	2301      	movs	r3, #1
 800ad20:	4628      	mov	r0, r5
 800ad22:	47b0      	blx	r6
 800ad24:	1c41      	adds	r1, r0, #1
 800ad26:	d1c7      	bne.n	800acb8 <__sflush_r+0x34>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d0c4      	beq.n	800acb8 <__sflush_r+0x34>
 800ad2e:	2b1d      	cmp	r3, #29
 800ad30:	d001      	beq.n	800ad36 <__sflush_r+0xb2>
 800ad32:	2b16      	cmp	r3, #22
 800ad34:	d101      	bne.n	800ad3a <__sflush_r+0xb6>
 800ad36:	602f      	str	r7, [r5, #0]
 800ad38:	e7b1      	b.n	800ac9e <__sflush_r+0x1a>
 800ad3a:	89a3      	ldrh	r3, [r4, #12]
 800ad3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad40:	81a3      	strh	r3, [r4, #12]
 800ad42:	e7ad      	b.n	800aca0 <__sflush_r+0x1c>
 800ad44:	690f      	ldr	r7, [r1, #16]
 800ad46:	2f00      	cmp	r7, #0
 800ad48:	d0a9      	beq.n	800ac9e <__sflush_r+0x1a>
 800ad4a:	0793      	lsls	r3, r2, #30
 800ad4c:	680e      	ldr	r6, [r1, #0]
 800ad4e:	bf08      	it	eq
 800ad50:	694b      	ldreq	r3, [r1, #20]
 800ad52:	600f      	str	r7, [r1, #0]
 800ad54:	bf18      	it	ne
 800ad56:	2300      	movne	r3, #0
 800ad58:	eba6 0807 	sub.w	r8, r6, r7
 800ad5c:	608b      	str	r3, [r1, #8]
 800ad5e:	f1b8 0f00 	cmp.w	r8, #0
 800ad62:	dd9c      	ble.n	800ac9e <__sflush_r+0x1a>
 800ad64:	6a21      	ldr	r1, [r4, #32]
 800ad66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad68:	4643      	mov	r3, r8
 800ad6a:	463a      	mov	r2, r7
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	47b0      	blx	r6
 800ad70:	2800      	cmp	r0, #0
 800ad72:	dc06      	bgt.n	800ad82 <__sflush_r+0xfe>
 800ad74:	89a3      	ldrh	r3, [r4, #12]
 800ad76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad7a:	81a3      	strh	r3, [r4, #12]
 800ad7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad80:	e78e      	b.n	800aca0 <__sflush_r+0x1c>
 800ad82:	4407      	add	r7, r0
 800ad84:	eba8 0800 	sub.w	r8, r8, r0
 800ad88:	e7e9      	b.n	800ad5e <__sflush_r+0xda>
 800ad8a:	bf00      	nop
 800ad8c:	20400001 	.word	0x20400001

0800ad90 <_fflush_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	690b      	ldr	r3, [r1, #16]
 800ad94:	4605      	mov	r5, r0
 800ad96:	460c      	mov	r4, r1
 800ad98:	b913      	cbnz	r3, 800ada0 <_fflush_r+0x10>
 800ad9a:	2500      	movs	r5, #0
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	b118      	cbz	r0, 800adaa <_fflush_r+0x1a>
 800ada2:	6983      	ldr	r3, [r0, #24]
 800ada4:	b90b      	cbnz	r3, 800adaa <_fflush_r+0x1a>
 800ada6:	f000 f887 	bl	800aeb8 <__sinit>
 800adaa:	4b14      	ldr	r3, [pc, #80]	; (800adfc <_fflush_r+0x6c>)
 800adac:	429c      	cmp	r4, r3
 800adae:	d11b      	bne.n	800ade8 <_fflush_r+0x58>
 800adb0:	686c      	ldr	r4, [r5, #4]
 800adb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d0ef      	beq.n	800ad9a <_fflush_r+0xa>
 800adba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adbc:	07d0      	lsls	r0, r2, #31
 800adbe:	d404      	bmi.n	800adca <_fflush_r+0x3a>
 800adc0:	0599      	lsls	r1, r3, #22
 800adc2:	d402      	bmi.n	800adca <_fflush_r+0x3a>
 800adc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adc6:	f000 f915 	bl	800aff4 <__retarget_lock_acquire_recursive>
 800adca:	4628      	mov	r0, r5
 800adcc:	4621      	mov	r1, r4
 800adce:	f7ff ff59 	bl	800ac84 <__sflush_r>
 800add2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800add4:	07da      	lsls	r2, r3, #31
 800add6:	4605      	mov	r5, r0
 800add8:	d4e0      	bmi.n	800ad9c <_fflush_r+0xc>
 800adda:	89a3      	ldrh	r3, [r4, #12]
 800addc:	059b      	lsls	r3, r3, #22
 800adde:	d4dd      	bmi.n	800ad9c <_fflush_r+0xc>
 800ade0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ade2:	f000 f908 	bl	800aff6 <__retarget_lock_release_recursive>
 800ade6:	e7d9      	b.n	800ad9c <_fflush_r+0xc>
 800ade8:	4b05      	ldr	r3, [pc, #20]	; (800ae00 <_fflush_r+0x70>)
 800adea:	429c      	cmp	r4, r3
 800adec:	d101      	bne.n	800adf2 <_fflush_r+0x62>
 800adee:	68ac      	ldr	r4, [r5, #8]
 800adf0:	e7df      	b.n	800adb2 <_fflush_r+0x22>
 800adf2:	4b04      	ldr	r3, [pc, #16]	; (800ae04 <_fflush_r+0x74>)
 800adf4:	429c      	cmp	r4, r3
 800adf6:	bf08      	it	eq
 800adf8:	68ec      	ldreq	r4, [r5, #12]
 800adfa:	e7da      	b.n	800adb2 <_fflush_r+0x22>
 800adfc:	0801374c 	.word	0x0801374c
 800ae00:	0801376c 	.word	0x0801376c
 800ae04:	0801372c 	.word	0x0801372c

0800ae08 <std>:
 800ae08:	2300      	movs	r3, #0
 800ae0a:	b510      	push	{r4, lr}
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	e9c0 3300 	strd	r3, r3, [r0]
 800ae12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae16:	6083      	str	r3, [r0, #8]
 800ae18:	8181      	strh	r1, [r0, #12]
 800ae1a:	6643      	str	r3, [r0, #100]	; 0x64
 800ae1c:	81c2      	strh	r2, [r0, #14]
 800ae1e:	6183      	str	r3, [r0, #24]
 800ae20:	4619      	mov	r1, r3
 800ae22:	2208      	movs	r2, #8
 800ae24:	305c      	adds	r0, #92	; 0x5c
 800ae26:	f7ff fce7 	bl	800a7f8 <memset>
 800ae2a:	4b05      	ldr	r3, [pc, #20]	; (800ae40 <std+0x38>)
 800ae2c:	6263      	str	r3, [r4, #36]	; 0x24
 800ae2e:	4b05      	ldr	r3, [pc, #20]	; (800ae44 <std+0x3c>)
 800ae30:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae32:	4b05      	ldr	r3, [pc, #20]	; (800ae48 <std+0x40>)
 800ae34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae36:	4b05      	ldr	r3, [pc, #20]	; (800ae4c <std+0x44>)
 800ae38:	6224      	str	r4, [r4, #32]
 800ae3a:	6323      	str	r3, [r4, #48]	; 0x30
 800ae3c:	bd10      	pop	{r4, pc}
 800ae3e:	bf00      	nop
 800ae40:	0800b6b9 	.word	0x0800b6b9
 800ae44:	0800b6db 	.word	0x0800b6db
 800ae48:	0800b713 	.word	0x0800b713
 800ae4c:	0800b737 	.word	0x0800b737

0800ae50 <_cleanup_r>:
 800ae50:	4901      	ldr	r1, [pc, #4]	; (800ae58 <_cleanup_r+0x8>)
 800ae52:	f000 b8af 	b.w	800afb4 <_fwalk_reent>
 800ae56:	bf00      	nop
 800ae58:	0800ad91 	.word	0x0800ad91

0800ae5c <__sfmoreglue>:
 800ae5c:	b570      	push	{r4, r5, r6, lr}
 800ae5e:	2268      	movs	r2, #104	; 0x68
 800ae60:	1e4d      	subs	r5, r1, #1
 800ae62:	4355      	muls	r5, r2
 800ae64:	460e      	mov	r6, r1
 800ae66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae6a:	f7ff fd39 	bl	800a8e0 <_malloc_r>
 800ae6e:	4604      	mov	r4, r0
 800ae70:	b140      	cbz	r0, 800ae84 <__sfmoreglue+0x28>
 800ae72:	2100      	movs	r1, #0
 800ae74:	e9c0 1600 	strd	r1, r6, [r0]
 800ae78:	300c      	adds	r0, #12
 800ae7a:	60a0      	str	r0, [r4, #8]
 800ae7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae80:	f7ff fcba 	bl	800a7f8 <memset>
 800ae84:	4620      	mov	r0, r4
 800ae86:	bd70      	pop	{r4, r5, r6, pc}

0800ae88 <__sfp_lock_acquire>:
 800ae88:	4801      	ldr	r0, [pc, #4]	; (800ae90 <__sfp_lock_acquire+0x8>)
 800ae8a:	f000 b8b3 	b.w	800aff4 <__retarget_lock_acquire_recursive>
 800ae8e:	bf00      	nop
 800ae90:	20003251 	.word	0x20003251

0800ae94 <__sfp_lock_release>:
 800ae94:	4801      	ldr	r0, [pc, #4]	; (800ae9c <__sfp_lock_release+0x8>)
 800ae96:	f000 b8ae 	b.w	800aff6 <__retarget_lock_release_recursive>
 800ae9a:	bf00      	nop
 800ae9c:	20003251 	.word	0x20003251

0800aea0 <__sinit_lock_acquire>:
 800aea0:	4801      	ldr	r0, [pc, #4]	; (800aea8 <__sinit_lock_acquire+0x8>)
 800aea2:	f000 b8a7 	b.w	800aff4 <__retarget_lock_acquire_recursive>
 800aea6:	bf00      	nop
 800aea8:	20003252 	.word	0x20003252

0800aeac <__sinit_lock_release>:
 800aeac:	4801      	ldr	r0, [pc, #4]	; (800aeb4 <__sinit_lock_release+0x8>)
 800aeae:	f000 b8a2 	b.w	800aff6 <__retarget_lock_release_recursive>
 800aeb2:	bf00      	nop
 800aeb4:	20003252 	.word	0x20003252

0800aeb8 <__sinit>:
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	4604      	mov	r4, r0
 800aebc:	f7ff fff0 	bl	800aea0 <__sinit_lock_acquire>
 800aec0:	69a3      	ldr	r3, [r4, #24]
 800aec2:	b11b      	cbz	r3, 800aecc <__sinit+0x14>
 800aec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aec8:	f7ff bff0 	b.w	800aeac <__sinit_lock_release>
 800aecc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aed0:	6523      	str	r3, [r4, #80]	; 0x50
 800aed2:	4b13      	ldr	r3, [pc, #76]	; (800af20 <__sinit+0x68>)
 800aed4:	4a13      	ldr	r2, [pc, #76]	; (800af24 <__sinit+0x6c>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	62a2      	str	r2, [r4, #40]	; 0x28
 800aeda:	42a3      	cmp	r3, r4
 800aedc:	bf04      	itt	eq
 800aede:	2301      	moveq	r3, #1
 800aee0:	61a3      	streq	r3, [r4, #24]
 800aee2:	4620      	mov	r0, r4
 800aee4:	f000 f820 	bl	800af28 <__sfp>
 800aee8:	6060      	str	r0, [r4, #4]
 800aeea:	4620      	mov	r0, r4
 800aeec:	f000 f81c 	bl	800af28 <__sfp>
 800aef0:	60a0      	str	r0, [r4, #8]
 800aef2:	4620      	mov	r0, r4
 800aef4:	f000 f818 	bl	800af28 <__sfp>
 800aef8:	2200      	movs	r2, #0
 800aefa:	60e0      	str	r0, [r4, #12]
 800aefc:	2104      	movs	r1, #4
 800aefe:	6860      	ldr	r0, [r4, #4]
 800af00:	f7ff ff82 	bl	800ae08 <std>
 800af04:	68a0      	ldr	r0, [r4, #8]
 800af06:	2201      	movs	r2, #1
 800af08:	2109      	movs	r1, #9
 800af0a:	f7ff ff7d 	bl	800ae08 <std>
 800af0e:	68e0      	ldr	r0, [r4, #12]
 800af10:	2202      	movs	r2, #2
 800af12:	2112      	movs	r1, #18
 800af14:	f7ff ff78 	bl	800ae08 <std>
 800af18:	2301      	movs	r3, #1
 800af1a:	61a3      	str	r3, [r4, #24]
 800af1c:	e7d2      	b.n	800aec4 <__sinit+0xc>
 800af1e:	bf00      	nop
 800af20:	08013728 	.word	0x08013728
 800af24:	0800ae51 	.word	0x0800ae51

0800af28 <__sfp>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	4607      	mov	r7, r0
 800af2c:	f7ff ffac 	bl	800ae88 <__sfp_lock_acquire>
 800af30:	4b1e      	ldr	r3, [pc, #120]	; (800afac <__sfp+0x84>)
 800af32:	681e      	ldr	r6, [r3, #0]
 800af34:	69b3      	ldr	r3, [r6, #24]
 800af36:	b913      	cbnz	r3, 800af3e <__sfp+0x16>
 800af38:	4630      	mov	r0, r6
 800af3a:	f7ff ffbd 	bl	800aeb8 <__sinit>
 800af3e:	3648      	adds	r6, #72	; 0x48
 800af40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af44:	3b01      	subs	r3, #1
 800af46:	d503      	bpl.n	800af50 <__sfp+0x28>
 800af48:	6833      	ldr	r3, [r6, #0]
 800af4a:	b30b      	cbz	r3, 800af90 <__sfp+0x68>
 800af4c:	6836      	ldr	r6, [r6, #0]
 800af4e:	e7f7      	b.n	800af40 <__sfp+0x18>
 800af50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af54:	b9d5      	cbnz	r5, 800af8c <__sfp+0x64>
 800af56:	4b16      	ldr	r3, [pc, #88]	; (800afb0 <__sfp+0x88>)
 800af58:	60e3      	str	r3, [r4, #12]
 800af5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af5e:	6665      	str	r5, [r4, #100]	; 0x64
 800af60:	f000 f847 	bl	800aff2 <__retarget_lock_init_recursive>
 800af64:	f7ff ff96 	bl	800ae94 <__sfp_lock_release>
 800af68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af70:	6025      	str	r5, [r4, #0]
 800af72:	61a5      	str	r5, [r4, #24]
 800af74:	2208      	movs	r2, #8
 800af76:	4629      	mov	r1, r5
 800af78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af7c:	f7ff fc3c 	bl	800a7f8 <memset>
 800af80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af88:	4620      	mov	r0, r4
 800af8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af8c:	3468      	adds	r4, #104	; 0x68
 800af8e:	e7d9      	b.n	800af44 <__sfp+0x1c>
 800af90:	2104      	movs	r1, #4
 800af92:	4638      	mov	r0, r7
 800af94:	f7ff ff62 	bl	800ae5c <__sfmoreglue>
 800af98:	4604      	mov	r4, r0
 800af9a:	6030      	str	r0, [r6, #0]
 800af9c:	2800      	cmp	r0, #0
 800af9e:	d1d5      	bne.n	800af4c <__sfp+0x24>
 800afa0:	f7ff ff78 	bl	800ae94 <__sfp_lock_release>
 800afa4:	230c      	movs	r3, #12
 800afa6:	603b      	str	r3, [r7, #0]
 800afa8:	e7ee      	b.n	800af88 <__sfp+0x60>
 800afaa:	bf00      	nop
 800afac:	08013728 	.word	0x08013728
 800afb0:	ffff0001 	.word	0xffff0001

0800afb4 <_fwalk_reent>:
 800afb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afb8:	4606      	mov	r6, r0
 800afba:	4688      	mov	r8, r1
 800afbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afc0:	2700      	movs	r7, #0
 800afc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afc6:	f1b9 0901 	subs.w	r9, r9, #1
 800afca:	d505      	bpl.n	800afd8 <_fwalk_reent+0x24>
 800afcc:	6824      	ldr	r4, [r4, #0]
 800afce:	2c00      	cmp	r4, #0
 800afd0:	d1f7      	bne.n	800afc2 <_fwalk_reent+0xe>
 800afd2:	4638      	mov	r0, r7
 800afd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afd8:	89ab      	ldrh	r3, [r5, #12]
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d907      	bls.n	800afee <_fwalk_reent+0x3a>
 800afde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afe2:	3301      	adds	r3, #1
 800afe4:	d003      	beq.n	800afee <_fwalk_reent+0x3a>
 800afe6:	4629      	mov	r1, r5
 800afe8:	4630      	mov	r0, r6
 800afea:	47c0      	blx	r8
 800afec:	4307      	orrs	r7, r0
 800afee:	3568      	adds	r5, #104	; 0x68
 800aff0:	e7e9      	b.n	800afc6 <_fwalk_reent+0x12>

0800aff2 <__retarget_lock_init_recursive>:
 800aff2:	4770      	bx	lr

0800aff4 <__retarget_lock_acquire_recursive>:
 800aff4:	4770      	bx	lr

0800aff6 <__retarget_lock_release_recursive>:
 800aff6:	4770      	bx	lr

0800aff8 <__swhatbuf_r>:
 800aff8:	b570      	push	{r4, r5, r6, lr}
 800affa:	460e      	mov	r6, r1
 800affc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b000:	2900      	cmp	r1, #0
 800b002:	b096      	sub	sp, #88	; 0x58
 800b004:	4614      	mov	r4, r2
 800b006:	461d      	mov	r5, r3
 800b008:	da08      	bge.n	800b01c <__swhatbuf_r+0x24>
 800b00a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	602a      	str	r2, [r5, #0]
 800b012:	061a      	lsls	r2, r3, #24
 800b014:	d410      	bmi.n	800b038 <__swhatbuf_r+0x40>
 800b016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b01a:	e00e      	b.n	800b03a <__swhatbuf_r+0x42>
 800b01c:	466a      	mov	r2, sp
 800b01e:	f000 fbb1 	bl	800b784 <_fstat_r>
 800b022:	2800      	cmp	r0, #0
 800b024:	dbf1      	blt.n	800b00a <__swhatbuf_r+0x12>
 800b026:	9a01      	ldr	r2, [sp, #4]
 800b028:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b02c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b030:	425a      	negs	r2, r3
 800b032:	415a      	adcs	r2, r3
 800b034:	602a      	str	r2, [r5, #0]
 800b036:	e7ee      	b.n	800b016 <__swhatbuf_r+0x1e>
 800b038:	2340      	movs	r3, #64	; 0x40
 800b03a:	2000      	movs	r0, #0
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	b016      	add	sp, #88	; 0x58
 800b040:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b044 <__smakebuf_r>:
 800b044:	898b      	ldrh	r3, [r1, #12]
 800b046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b048:	079d      	lsls	r5, r3, #30
 800b04a:	4606      	mov	r6, r0
 800b04c:	460c      	mov	r4, r1
 800b04e:	d507      	bpl.n	800b060 <__smakebuf_r+0x1c>
 800b050:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b054:	6023      	str	r3, [r4, #0]
 800b056:	6123      	str	r3, [r4, #16]
 800b058:	2301      	movs	r3, #1
 800b05a:	6163      	str	r3, [r4, #20]
 800b05c:	b002      	add	sp, #8
 800b05e:	bd70      	pop	{r4, r5, r6, pc}
 800b060:	ab01      	add	r3, sp, #4
 800b062:	466a      	mov	r2, sp
 800b064:	f7ff ffc8 	bl	800aff8 <__swhatbuf_r>
 800b068:	9900      	ldr	r1, [sp, #0]
 800b06a:	4605      	mov	r5, r0
 800b06c:	4630      	mov	r0, r6
 800b06e:	f7ff fc37 	bl	800a8e0 <_malloc_r>
 800b072:	b948      	cbnz	r0, 800b088 <__smakebuf_r+0x44>
 800b074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b078:	059a      	lsls	r2, r3, #22
 800b07a:	d4ef      	bmi.n	800b05c <__smakebuf_r+0x18>
 800b07c:	f023 0303 	bic.w	r3, r3, #3
 800b080:	f043 0302 	orr.w	r3, r3, #2
 800b084:	81a3      	strh	r3, [r4, #12]
 800b086:	e7e3      	b.n	800b050 <__smakebuf_r+0xc>
 800b088:	4b0d      	ldr	r3, [pc, #52]	; (800b0c0 <__smakebuf_r+0x7c>)
 800b08a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b08c:	89a3      	ldrh	r3, [r4, #12]
 800b08e:	6020      	str	r0, [r4, #0]
 800b090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b094:	81a3      	strh	r3, [r4, #12]
 800b096:	9b00      	ldr	r3, [sp, #0]
 800b098:	6163      	str	r3, [r4, #20]
 800b09a:	9b01      	ldr	r3, [sp, #4]
 800b09c:	6120      	str	r0, [r4, #16]
 800b09e:	b15b      	cbz	r3, 800b0b8 <__smakebuf_r+0x74>
 800b0a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	f000 fb7f 	bl	800b7a8 <_isatty_r>
 800b0aa:	b128      	cbz	r0, 800b0b8 <__smakebuf_r+0x74>
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	f023 0303 	bic.w	r3, r3, #3
 800b0b2:	f043 0301 	orr.w	r3, r3, #1
 800b0b6:	81a3      	strh	r3, [r4, #12]
 800b0b8:	89a0      	ldrh	r0, [r4, #12]
 800b0ba:	4305      	orrs	r5, r0
 800b0bc:	81a5      	strh	r5, [r4, #12]
 800b0be:	e7cd      	b.n	800b05c <__smakebuf_r+0x18>
 800b0c0:	0800ae51 	.word	0x0800ae51

0800b0c4 <__malloc_lock>:
 800b0c4:	4801      	ldr	r0, [pc, #4]	; (800b0cc <__malloc_lock+0x8>)
 800b0c6:	f7ff bf95 	b.w	800aff4 <__retarget_lock_acquire_recursive>
 800b0ca:	bf00      	nop
 800b0cc:	20003250 	.word	0x20003250

0800b0d0 <__malloc_unlock>:
 800b0d0:	4801      	ldr	r0, [pc, #4]	; (800b0d8 <__malloc_unlock+0x8>)
 800b0d2:	f7ff bf90 	b.w	800aff6 <__retarget_lock_release_recursive>
 800b0d6:	bf00      	nop
 800b0d8:	20003250 	.word	0x20003250

0800b0dc <__sfputc_r>:
 800b0dc:	6893      	ldr	r3, [r2, #8]
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	b410      	push	{r4}
 800b0e4:	6093      	str	r3, [r2, #8]
 800b0e6:	da08      	bge.n	800b0fa <__sfputc_r+0x1e>
 800b0e8:	6994      	ldr	r4, [r2, #24]
 800b0ea:	42a3      	cmp	r3, r4
 800b0ec:	db01      	blt.n	800b0f2 <__sfputc_r+0x16>
 800b0ee:	290a      	cmp	r1, #10
 800b0f0:	d103      	bne.n	800b0fa <__sfputc_r+0x1e>
 800b0f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0f6:	f7ff bd05 	b.w	800ab04 <__swbuf_r>
 800b0fa:	6813      	ldr	r3, [r2, #0]
 800b0fc:	1c58      	adds	r0, r3, #1
 800b0fe:	6010      	str	r0, [r2, #0]
 800b100:	7019      	strb	r1, [r3, #0]
 800b102:	4608      	mov	r0, r1
 800b104:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <__sfputs_r>:
 800b10a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10c:	4606      	mov	r6, r0
 800b10e:	460f      	mov	r7, r1
 800b110:	4614      	mov	r4, r2
 800b112:	18d5      	adds	r5, r2, r3
 800b114:	42ac      	cmp	r4, r5
 800b116:	d101      	bne.n	800b11c <__sfputs_r+0x12>
 800b118:	2000      	movs	r0, #0
 800b11a:	e007      	b.n	800b12c <__sfputs_r+0x22>
 800b11c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b120:	463a      	mov	r2, r7
 800b122:	4630      	mov	r0, r6
 800b124:	f7ff ffda 	bl	800b0dc <__sfputc_r>
 800b128:	1c43      	adds	r3, r0, #1
 800b12a:	d1f3      	bne.n	800b114 <__sfputs_r+0xa>
 800b12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b130 <_vfiprintf_r>:
 800b130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	460d      	mov	r5, r1
 800b136:	b09d      	sub	sp, #116	; 0x74
 800b138:	4614      	mov	r4, r2
 800b13a:	4698      	mov	r8, r3
 800b13c:	4606      	mov	r6, r0
 800b13e:	b118      	cbz	r0, 800b148 <_vfiprintf_r+0x18>
 800b140:	6983      	ldr	r3, [r0, #24]
 800b142:	b90b      	cbnz	r3, 800b148 <_vfiprintf_r+0x18>
 800b144:	f7ff feb8 	bl	800aeb8 <__sinit>
 800b148:	4b89      	ldr	r3, [pc, #548]	; (800b370 <_vfiprintf_r+0x240>)
 800b14a:	429d      	cmp	r5, r3
 800b14c:	d11b      	bne.n	800b186 <_vfiprintf_r+0x56>
 800b14e:	6875      	ldr	r5, [r6, #4]
 800b150:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b152:	07d9      	lsls	r1, r3, #31
 800b154:	d405      	bmi.n	800b162 <_vfiprintf_r+0x32>
 800b156:	89ab      	ldrh	r3, [r5, #12]
 800b158:	059a      	lsls	r2, r3, #22
 800b15a:	d402      	bmi.n	800b162 <_vfiprintf_r+0x32>
 800b15c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b15e:	f7ff ff49 	bl	800aff4 <__retarget_lock_acquire_recursive>
 800b162:	89ab      	ldrh	r3, [r5, #12]
 800b164:	071b      	lsls	r3, r3, #28
 800b166:	d501      	bpl.n	800b16c <_vfiprintf_r+0x3c>
 800b168:	692b      	ldr	r3, [r5, #16]
 800b16a:	b9eb      	cbnz	r3, 800b1a8 <_vfiprintf_r+0x78>
 800b16c:	4629      	mov	r1, r5
 800b16e:	4630      	mov	r0, r6
 800b170:	f7ff fd1a 	bl	800aba8 <__swsetup_r>
 800b174:	b1c0      	cbz	r0, 800b1a8 <_vfiprintf_r+0x78>
 800b176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b178:	07dc      	lsls	r4, r3, #31
 800b17a:	d50e      	bpl.n	800b19a <_vfiprintf_r+0x6a>
 800b17c:	f04f 30ff 	mov.w	r0, #4294967295
 800b180:	b01d      	add	sp, #116	; 0x74
 800b182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b186:	4b7b      	ldr	r3, [pc, #492]	; (800b374 <_vfiprintf_r+0x244>)
 800b188:	429d      	cmp	r5, r3
 800b18a:	d101      	bne.n	800b190 <_vfiprintf_r+0x60>
 800b18c:	68b5      	ldr	r5, [r6, #8]
 800b18e:	e7df      	b.n	800b150 <_vfiprintf_r+0x20>
 800b190:	4b79      	ldr	r3, [pc, #484]	; (800b378 <_vfiprintf_r+0x248>)
 800b192:	429d      	cmp	r5, r3
 800b194:	bf08      	it	eq
 800b196:	68f5      	ldreq	r5, [r6, #12]
 800b198:	e7da      	b.n	800b150 <_vfiprintf_r+0x20>
 800b19a:	89ab      	ldrh	r3, [r5, #12]
 800b19c:	0598      	lsls	r0, r3, #22
 800b19e:	d4ed      	bmi.n	800b17c <_vfiprintf_r+0x4c>
 800b1a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1a2:	f7ff ff28 	bl	800aff6 <__retarget_lock_release_recursive>
 800b1a6:	e7e9      	b.n	800b17c <_vfiprintf_r+0x4c>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ac:	2320      	movs	r3, #32
 800b1ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1b6:	2330      	movs	r3, #48	; 0x30
 800b1b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b37c <_vfiprintf_r+0x24c>
 800b1bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1c0:	f04f 0901 	mov.w	r9, #1
 800b1c4:	4623      	mov	r3, r4
 800b1c6:	469a      	mov	sl, r3
 800b1c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1cc:	b10a      	cbz	r2, 800b1d2 <_vfiprintf_r+0xa2>
 800b1ce:	2a25      	cmp	r2, #37	; 0x25
 800b1d0:	d1f9      	bne.n	800b1c6 <_vfiprintf_r+0x96>
 800b1d2:	ebba 0b04 	subs.w	fp, sl, r4
 800b1d6:	d00b      	beq.n	800b1f0 <_vfiprintf_r+0xc0>
 800b1d8:	465b      	mov	r3, fp
 800b1da:	4622      	mov	r2, r4
 800b1dc:	4629      	mov	r1, r5
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f7ff ff93 	bl	800b10a <__sfputs_r>
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	f000 80aa 	beq.w	800b33e <_vfiprintf_r+0x20e>
 800b1ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1ec:	445a      	add	r2, fp
 800b1ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b1f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f000 80a2 	beq.w	800b33e <_vfiprintf_r+0x20e>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b204:	f10a 0a01 	add.w	sl, sl, #1
 800b208:	9304      	str	r3, [sp, #16]
 800b20a:	9307      	str	r3, [sp, #28]
 800b20c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b210:	931a      	str	r3, [sp, #104]	; 0x68
 800b212:	4654      	mov	r4, sl
 800b214:	2205      	movs	r2, #5
 800b216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21a:	4858      	ldr	r0, [pc, #352]	; (800b37c <_vfiprintf_r+0x24c>)
 800b21c:	f7f4 ffd8 	bl	80001d0 <memchr>
 800b220:	9a04      	ldr	r2, [sp, #16]
 800b222:	b9d8      	cbnz	r0, 800b25c <_vfiprintf_r+0x12c>
 800b224:	06d1      	lsls	r1, r2, #27
 800b226:	bf44      	itt	mi
 800b228:	2320      	movmi	r3, #32
 800b22a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b22e:	0713      	lsls	r3, r2, #28
 800b230:	bf44      	itt	mi
 800b232:	232b      	movmi	r3, #43	; 0x2b
 800b234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b238:	f89a 3000 	ldrb.w	r3, [sl]
 800b23c:	2b2a      	cmp	r3, #42	; 0x2a
 800b23e:	d015      	beq.n	800b26c <_vfiprintf_r+0x13c>
 800b240:	9a07      	ldr	r2, [sp, #28]
 800b242:	4654      	mov	r4, sl
 800b244:	2000      	movs	r0, #0
 800b246:	f04f 0c0a 	mov.w	ip, #10
 800b24a:	4621      	mov	r1, r4
 800b24c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b250:	3b30      	subs	r3, #48	; 0x30
 800b252:	2b09      	cmp	r3, #9
 800b254:	d94e      	bls.n	800b2f4 <_vfiprintf_r+0x1c4>
 800b256:	b1b0      	cbz	r0, 800b286 <_vfiprintf_r+0x156>
 800b258:	9207      	str	r2, [sp, #28]
 800b25a:	e014      	b.n	800b286 <_vfiprintf_r+0x156>
 800b25c:	eba0 0308 	sub.w	r3, r0, r8
 800b260:	fa09 f303 	lsl.w	r3, r9, r3
 800b264:	4313      	orrs	r3, r2
 800b266:	9304      	str	r3, [sp, #16]
 800b268:	46a2      	mov	sl, r4
 800b26a:	e7d2      	b.n	800b212 <_vfiprintf_r+0xe2>
 800b26c:	9b03      	ldr	r3, [sp, #12]
 800b26e:	1d19      	adds	r1, r3, #4
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	9103      	str	r1, [sp, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	bfbb      	ittet	lt
 800b278:	425b      	neglt	r3, r3
 800b27a:	f042 0202 	orrlt.w	r2, r2, #2
 800b27e:	9307      	strge	r3, [sp, #28]
 800b280:	9307      	strlt	r3, [sp, #28]
 800b282:	bfb8      	it	lt
 800b284:	9204      	strlt	r2, [sp, #16]
 800b286:	7823      	ldrb	r3, [r4, #0]
 800b288:	2b2e      	cmp	r3, #46	; 0x2e
 800b28a:	d10c      	bne.n	800b2a6 <_vfiprintf_r+0x176>
 800b28c:	7863      	ldrb	r3, [r4, #1]
 800b28e:	2b2a      	cmp	r3, #42	; 0x2a
 800b290:	d135      	bne.n	800b2fe <_vfiprintf_r+0x1ce>
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	1d1a      	adds	r2, r3, #4
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	9203      	str	r2, [sp, #12]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	bfb8      	it	lt
 800b29e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2a2:	3402      	adds	r4, #2
 800b2a4:	9305      	str	r3, [sp, #20]
 800b2a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b38c <_vfiprintf_r+0x25c>
 800b2aa:	7821      	ldrb	r1, [r4, #0]
 800b2ac:	2203      	movs	r2, #3
 800b2ae:	4650      	mov	r0, sl
 800b2b0:	f7f4 ff8e 	bl	80001d0 <memchr>
 800b2b4:	b140      	cbz	r0, 800b2c8 <_vfiprintf_r+0x198>
 800b2b6:	2340      	movs	r3, #64	; 0x40
 800b2b8:	eba0 000a 	sub.w	r0, r0, sl
 800b2bc:	fa03 f000 	lsl.w	r0, r3, r0
 800b2c0:	9b04      	ldr	r3, [sp, #16]
 800b2c2:	4303      	orrs	r3, r0
 800b2c4:	3401      	adds	r4, #1
 800b2c6:	9304      	str	r3, [sp, #16]
 800b2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2cc:	482c      	ldr	r0, [pc, #176]	; (800b380 <_vfiprintf_r+0x250>)
 800b2ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2d2:	2206      	movs	r2, #6
 800b2d4:	f7f4 ff7c 	bl	80001d0 <memchr>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d03f      	beq.n	800b35c <_vfiprintf_r+0x22c>
 800b2dc:	4b29      	ldr	r3, [pc, #164]	; (800b384 <_vfiprintf_r+0x254>)
 800b2de:	bb1b      	cbnz	r3, 800b328 <_vfiprintf_r+0x1f8>
 800b2e0:	9b03      	ldr	r3, [sp, #12]
 800b2e2:	3307      	adds	r3, #7
 800b2e4:	f023 0307 	bic.w	r3, r3, #7
 800b2e8:	3308      	adds	r3, #8
 800b2ea:	9303      	str	r3, [sp, #12]
 800b2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ee:	443b      	add	r3, r7
 800b2f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f2:	e767      	b.n	800b1c4 <_vfiprintf_r+0x94>
 800b2f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	2001      	movs	r0, #1
 800b2fc:	e7a5      	b.n	800b24a <_vfiprintf_r+0x11a>
 800b2fe:	2300      	movs	r3, #0
 800b300:	3401      	adds	r4, #1
 800b302:	9305      	str	r3, [sp, #20]
 800b304:	4619      	mov	r1, r3
 800b306:	f04f 0c0a 	mov.w	ip, #10
 800b30a:	4620      	mov	r0, r4
 800b30c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b310:	3a30      	subs	r2, #48	; 0x30
 800b312:	2a09      	cmp	r2, #9
 800b314:	d903      	bls.n	800b31e <_vfiprintf_r+0x1ee>
 800b316:	2b00      	cmp	r3, #0
 800b318:	d0c5      	beq.n	800b2a6 <_vfiprintf_r+0x176>
 800b31a:	9105      	str	r1, [sp, #20]
 800b31c:	e7c3      	b.n	800b2a6 <_vfiprintf_r+0x176>
 800b31e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b322:	4604      	mov	r4, r0
 800b324:	2301      	movs	r3, #1
 800b326:	e7f0      	b.n	800b30a <_vfiprintf_r+0x1da>
 800b328:	ab03      	add	r3, sp, #12
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	462a      	mov	r2, r5
 800b32e:	4b16      	ldr	r3, [pc, #88]	; (800b388 <_vfiprintf_r+0x258>)
 800b330:	a904      	add	r1, sp, #16
 800b332:	4630      	mov	r0, r6
 800b334:	f3af 8000 	nop.w
 800b338:	4607      	mov	r7, r0
 800b33a:	1c78      	adds	r0, r7, #1
 800b33c:	d1d6      	bne.n	800b2ec <_vfiprintf_r+0x1bc>
 800b33e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b340:	07d9      	lsls	r1, r3, #31
 800b342:	d405      	bmi.n	800b350 <_vfiprintf_r+0x220>
 800b344:	89ab      	ldrh	r3, [r5, #12]
 800b346:	059a      	lsls	r2, r3, #22
 800b348:	d402      	bmi.n	800b350 <_vfiprintf_r+0x220>
 800b34a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b34c:	f7ff fe53 	bl	800aff6 <__retarget_lock_release_recursive>
 800b350:	89ab      	ldrh	r3, [r5, #12]
 800b352:	065b      	lsls	r3, r3, #25
 800b354:	f53f af12 	bmi.w	800b17c <_vfiprintf_r+0x4c>
 800b358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b35a:	e711      	b.n	800b180 <_vfiprintf_r+0x50>
 800b35c:	ab03      	add	r3, sp, #12
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	462a      	mov	r2, r5
 800b362:	4b09      	ldr	r3, [pc, #36]	; (800b388 <_vfiprintf_r+0x258>)
 800b364:	a904      	add	r1, sp, #16
 800b366:	4630      	mov	r0, r6
 800b368:	f000 f880 	bl	800b46c <_printf_i>
 800b36c:	e7e4      	b.n	800b338 <_vfiprintf_r+0x208>
 800b36e:	bf00      	nop
 800b370:	0801374c 	.word	0x0801374c
 800b374:	0801376c 	.word	0x0801376c
 800b378:	0801372c 	.word	0x0801372c
 800b37c:	0801378c 	.word	0x0801378c
 800b380:	08013796 	.word	0x08013796
 800b384:	00000000 	.word	0x00000000
 800b388:	0800b10b 	.word	0x0800b10b
 800b38c:	08013792 	.word	0x08013792

0800b390 <_printf_common>:
 800b390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b394:	4616      	mov	r6, r2
 800b396:	4699      	mov	r9, r3
 800b398:	688a      	ldr	r2, [r1, #8]
 800b39a:	690b      	ldr	r3, [r1, #16]
 800b39c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	bfb8      	it	lt
 800b3a4:	4613      	movlt	r3, r2
 800b3a6:	6033      	str	r3, [r6, #0]
 800b3a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3ac:	4607      	mov	r7, r0
 800b3ae:	460c      	mov	r4, r1
 800b3b0:	b10a      	cbz	r2, 800b3b6 <_printf_common+0x26>
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	6033      	str	r3, [r6, #0]
 800b3b6:	6823      	ldr	r3, [r4, #0]
 800b3b8:	0699      	lsls	r1, r3, #26
 800b3ba:	bf42      	ittt	mi
 800b3bc:	6833      	ldrmi	r3, [r6, #0]
 800b3be:	3302      	addmi	r3, #2
 800b3c0:	6033      	strmi	r3, [r6, #0]
 800b3c2:	6825      	ldr	r5, [r4, #0]
 800b3c4:	f015 0506 	ands.w	r5, r5, #6
 800b3c8:	d106      	bne.n	800b3d8 <_printf_common+0x48>
 800b3ca:	f104 0a19 	add.w	sl, r4, #25
 800b3ce:	68e3      	ldr	r3, [r4, #12]
 800b3d0:	6832      	ldr	r2, [r6, #0]
 800b3d2:	1a9b      	subs	r3, r3, r2
 800b3d4:	42ab      	cmp	r3, r5
 800b3d6:	dc26      	bgt.n	800b426 <_printf_common+0x96>
 800b3d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3dc:	1e13      	subs	r3, r2, #0
 800b3de:	6822      	ldr	r2, [r4, #0]
 800b3e0:	bf18      	it	ne
 800b3e2:	2301      	movne	r3, #1
 800b3e4:	0692      	lsls	r2, r2, #26
 800b3e6:	d42b      	bmi.n	800b440 <_printf_common+0xb0>
 800b3e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3ec:	4649      	mov	r1, r9
 800b3ee:	4638      	mov	r0, r7
 800b3f0:	47c0      	blx	r8
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	d01e      	beq.n	800b434 <_printf_common+0xa4>
 800b3f6:	6823      	ldr	r3, [r4, #0]
 800b3f8:	68e5      	ldr	r5, [r4, #12]
 800b3fa:	6832      	ldr	r2, [r6, #0]
 800b3fc:	f003 0306 	and.w	r3, r3, #6
 800b400:	2b04      	cmp	r3, #4
 800b402:	bf08      	it	eq
 800b404:	1aad      	subeq	r5, r5, r2
 800b406:	68a3      	ldr	r3, [r4, #8]
 800b408:	6922      	ldr	r2, [r4, #16]
 800b40a:	bf0c      	ite	eq
 800b40c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b410:	2500      	movne	r5, #0
 800b412:	4293      	cmp	r3, r2
 800b414:	bfc4      	itt	gt
 800b416:	1a9b      	subgt	r3, r3, r2
 800b418:	18ed      	addgt	r5, r5, r3
 800b41a:	2600      	movs	r6, #0
 800b41c:	341a      	adds	r4, #26
 800b41e:	42b5      	cmp	r5, r6
 800b420:	d11a      	bne.n	800b458 <_printf_common+0xc8>
 800b422:	2000      	movs	r0, #0
 800b424:	e008      	b.n	800b438 <_printf_common+0xa8>
 800b426:	2301      	movs	r3, #1
 800b428:	4652      	mov	r2, sl
 800b42a:	4649      	mov	r1, r9
 800b42c:	4638      	mov	r0, r7
 800b42e:	47c0      	blx	r8
 800b430:	3001      	adds	r0, #1
 800b432:	d103      	bne.n	800b43c <_printf_common+0xac>
 800b434:	f04f 30ff 	mov.w	r0, #4294967295
 800b438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b43c:	3501      	adds	r5, #1
 800b43e:	e7c6      	b.n	800b3ce <_printf_common+0x3e>
 800b440:	18e1      	adds	r1, r4, r3
 800b442:	1c5a      	adds	r2, r3, #1
 800b444:	2030      	movs	r0, #48	; 0x30
 800b446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b44a:	4422      	add	r2, r4
 800b44c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b454:	3302      	adds	r3, #2
 800b456:	e7c7      	b.n	800b3e8 <_printf_common+0x58>
 800b458:	2301      	movs	r3, #1
 800b45a:	4622      	mov	r2, r4
 800b45c:	4649      	mov	r1, r9
 800b45e:	4638      	mov	r0, r7
 800b460:	47c0      	blx	r8
 800b462:	3001      	adds	r0, #1
 800b464:	d0e6      	beq.n	800b434 <_printf_common+0xa4>
 800b466:	3601      	adds	r6, #1
 800b468:	e7d9      	b.n	800b41e <_printf_common+0x8e>
	...

0800b46c <_printf_i>:
 800b46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b470:	7e0f      	ldrb	r7, [r1, #24]
 800b472:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b474:	2f78      	cmp	r7, #120	; 0x78
 800b476:	4691      	mov	r9, r2
 800b478:	4680      	mov	r8, r0
 800b47a:	460c      	mov	r4, r1
 800b47c:	469a      	mov	sl, r3
 800b47e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b482:	d807      	bhi.n	800b494 <_printf_i+0x28>
 800b484:	2f62      	cmp	r7, #98	; 0x62
 800b486:	d80a      	bhi.n	800b49e <_printf_i+0x32>
 800b488:	2f00      	cmp	r7, #0
 800b48a:	f000 80d8 	beq.w	800b63e <_printf_i+0x1d2>
 800b48e:	2f58      	cmp	r7, #88	; 0x58
 800b490:	f000 80a3 	beq.w	800b5da <_printf_i+0x16e>
 800b494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b49c:	e03a      	b.n	800b514 <_printf_i+0xa8>
 800b49e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4a2:	2b15      	cmp	r3, #21
 800b4a4:	d8f6      	bhi.n	800b494 <_printf_i+0x28>
 800b4a6:	a101      	add	r1, pc, #4	; (adr r1, 800b4ac <_printf_i+0x40>)
 800b4a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4ac:	0800b505 	.word	0x0800b505
 800b4b0:	0800b519 	.word	0x0800b519
 800b4b4:	0800b495 	.word	0x0800b495
 800b4b8:	0800b495 	.word	0x0800b495
 800b4bc:	0800b495 	.word	0x0800b495
 800b4c0:	0800b495 	.word	0x0800b495
 800b4c4:	0800b519 	.word	0x0800b519
 800b4c8:	0800b495 	.word	0x0800b495
 800b4cc:	0800b495 	.word	0x0800b495
 800b4d0:	0800b495 	.word	0x0800b495
 800b4d4:	0800b495 	.word	0x0800b495
 800b4d8:	0800b625 	.word	0x0800b625
 800b4dc:	0800b549 	.word	0x0800b549
 800b4e0:	0800b607 	.word	0x0800b607
 800b4e4:	0800b495 	.word	0x0800b495
 800b4e8:	0800b495 	.word	0x0800b495
 800b4ec:	0800b647 	.word	0x0800b647
 800b4f0:	0800b495 	.word	0x0800b495
 800b4f4:	0800b549 	.word	0x0800b549
 800b4f8:	0800b495 	.word	0x0800b495
 800b4fc:	0800b495 	.word	0x0800b495
 800b500:	0800b60f 	.word	0x0800b60f
 800b504:	682b      	ldr	r3, [r5, #0]
 800b506:	1d1a      	adds	r2, r3, #4
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	602a      	str	r2, [r5, #0]
 800b50c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b514:	2301      	movs	r3, #1
 800b516:	e0a3      	b.n	800b660 <_printf_i+0x1f4>
 800b518:	6820      	ldr	r0, [r4, #0]
 800b51a:	6829      	ldr	r1, [r5, #0]
 800b51c:	0606      	lsls	r6, r0, #24
 800b51e:	f101 0304 	add.w	r3, r1, #4
 800b522:	d50a      	bpl.n	800b53a <_printf_i+0xce>
 800b524:	680e      	ldr	r6, [r1, #0]
 800b526:	602b      	str	r3, [r5, #0]
 800b528:	2e00      	cmp	r6, #0
 800b52a:	da03      	bge.n	800b534 <_printf_i+0xc8>
 800b52c:	232d      	movs	r3, #45	; 0x2d
 800b52e:	4276      	negs	r6, r6
 800b530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b534:	485e      	ldr	r0, [pc, #376]	; (800b6b0 <_printf_i+0x244>)
 800b536:	230a      	movs	r3, #10
 800b538:	e019      	b.n	800b56e <_printf_i+0x102>
 800b53a:	680e      	ldr	r6, [r1, #0]
 800b53c:	602b      	str	r3, [r5, #0]
 800b53e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b542:	bf18      	it	ne
 800b544:	b236      	sxthne	r6, r6
 800b546:	e7ef      	b.n	800b528 <_printf_i+0xbc>
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	6820      	ldr	r0, [r4, #0]
 800b54c:	1d19      	adds	r1, r3, #4
 800b54e:	6029      	str	r1, [r5, #0]
 800b550:	0601      	lsls	r1, r0, #24
 800b552:	d501      	bpl.n	800b558 <_printf_i+0xec>
 800b554:	681e      	ldr	r6, [r3, #0]
 800b556:	e002      	b.n	800b55e <_printf_i+0xf2>
 800b558:	0646      	lsls	r6, r0, #25
 800b55a:	d5fb      	bpl.n	800b554 <_printf_i+0xe8>
 800b55c:	881e      	ldrh	r6, [r3, #0]
 800b55e:	4854      	ldr	r0, [pc, #336]	; (800b6b0 <_printf_i+0x244>)
 800b560:	2f6f      	cmp	r7, #111	; 0x6f
 800b562:	bf0c      	ite	eq
 800b564:	2308      	moveq	r3, #8
 800b566:	230a      	movne	r3, #10
 800b568:	2100      	movs	r1, #0
 800b56a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b56e:	6865      	ldr	r5, [r4, #4]
 800b570:	60a5      	str	r5, [r4, #8]
 800b572:	2d00      	cmp	r5, #0
 800b574:	bfa2      	ittt	ge
 800b576:	6821      	ldrge	r1, [r4, #0]
 800b578:	f021 0104 	bicge.w	r1, r1, #4
 800b57c:	6021      	strge	r1, [r4, #0]
 800b57e:	b90e      	cbnz	r6, 800b584 <_printf_i+0x118>
 800b580:	2d00      	cmp	r5, #0
 800b582:	d04d      	beq.n	800b620 <_printf_i+0x1b4>
 800b584:	4615      	mov	r5, r2
 800b586:	fbb6 f1f3 	udiv	r1, r6, r3
 800b58a:	fb03 6711 	mls	r7, r3, r1, r6
 800b58e:	5dc7      	ldrb	r7, [r0, r7]
 800b590:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b594:	4637      	mov	r7, r6
 800b596:	42bb      	cmp	r3, r7
 800b598:	460e      	mov	r6, r1
 800b59a:	d9f4      	bls.n	800b586 <_printf_i+0x11a>
 800b59c:	2b08      	cmp	r3, #8
 800b59e:	d10b      	bne.n	800b5b8 <_printf_i+0x14c>
 800b5a0:	6823      	ldr	r3, [r4, #0]
 800b5a2:	07de      	lsls	r6, r3, #31
 800b5a4:	d508      	bpl.n	800b5b8 <_printf_i+0x14c>
 800b5a6:	6923      	ldr	r3, [r4, #16]
 800b5a8:	6861      	ldr	r1, [r4, #4]
 800b5aa:	4299      	cmp	r1, r3
 800b5ac:	bfde      	ittt	le
 800b5ae:	2330      	movle	r3, #48	; 0x30
 800b5b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b5b8:	1b52      	subs	r2, r2, r5
 800b5ba:	6122      	str	r2, [r4, #16]
 800b5bc:	f8cd a000 	str.w	sl, [sp]
 800b5c0:	464b      	mov	r3, r9
 800b5c2:	aa03      	add	r2, sp, #12
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	4640      	mov	r0, r8
 800b5c8:	f7ff fee2 	bl	800b390 <_printf_common>
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	d14c      	bne.n	800b66a <_printf_i+0x1fe>
 800b5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d4:	b004      	add	sp, #16
 800b5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5da:	4835      	ldr	r0, [pc, #212]	; (800b6b0 <_printf_i+0x244>)
 800b5dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b5e0:	6829      	ldr	r1, [r5, #0]
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5e8:	6029      	str	r1, [r5, #0]
 800b5ea:	061d      	lsls	r5, r3, #24
 800b5ec:	d514      	bpl.n	800b618 <_printf_i+0x1ac>
 800b5ee:	07df      	lsls	r7, r3, #31
 800b5f0:	bf44      	itt	mi
 800b5f2:	f043 0320 	orrmi.w	r3, r3, #32
 800b5f6:	6023      	strmi	r3, [r4, #0]
 800b5f8:	b91e      	cbnz	r6, 800b602 <_printf_i+0x196>
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	f023 0320 	bic.w	r3, r3, #32
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	2310      	movs	r3, #16
 800b604:	e7b0      	b.n	800b568 <_printf_i+0xfc>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	f043 0320 	orr.w	r3, r3, #32
 800b60c:	6023      	str	r3, [r4, #0]
 800b60e:	2378      	movs	r3, #120	; 0x78
 800b610:	4828      	ldr	r0, [pc, #160]	; (800b6b4 <_printf_i+0x248>)
 800b612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b616:	e7e3      	b.n	800b5e0 <_printf_i+0x174>
 800b618:	0659      	lsls	r1, r3, #25
 800b61a:	bf48      	it	mi
 800b61c:	b2b6      	uxthmi	r6, r6
 800b61e:	e7e6      	b.n	800b5ee <_printf_i+0x182>
 800b620:	4615      	mov	r5, r2
 800b622:	e7bb      	b.n	800b59c <_printf_i+0x130>
 800b624:	682b      	ldr	r3, [r5, #0]
 800b626:	6826      	ldr	r6, [r4, #0]
 800b628:	6961      	ldr	r1, [r4, #20]
 800b62a:	1d18      	adds	r0, r3, #4
 800b62c:	6028      	str	r0, [r5, #0]
 800b62e:	0635      	lsls	r5, r6, #24
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	d501      	bpl.n	800b638 <_printf_i+0x1cc>
 800b634:	6019      	str	r1, [r3, #0]
 800b636:	e002      	b.n	800b63e <_printf_i+0x1d2>
 800b638:	0670      	lsls	r0, r6, #25
 800b63a:	d5fb      	bpl.n	800b634 <_printf_i+0x1c8>
 800b63c:	8019      	strh	r1, [r3, #0]
 800b63e:	2300      	movs	r3, #0
 800b640:	6123      	str	r3, [r4, #16]
 800b642:	4615      	mov	r5, r2
 800b644:	e7ba      	b.n	800b5bc <_printf_i+0x150>
 800b646:	682b      	ldr	r3, [r5, #0]
 800b648:	1d1a      	adds	r2, r3, #4
 800b64a:	602a      	str	r2, [r5, #0]
 800b64c:	681d      	ldr	r5, [r3, #0]
 800b64e:	6862      	ldr	r2, [r4, #4]
 800b650:	2100      	movs	r1, #0
 800b652:	4628      	mov	r0, r5
 800b654:	f7f4 fdbc 	bl	80001d0 <memchr>
 800b658:	b108      	cbz	r0, 800b65e <_printf_i+0x1f2>
 800b65a:	1b40      	subs	r0, r0, r5
 800b65c:	6060      	str	r0, [r4, #4]
 800b65e:	6863      	ldr	r3, [r4, #4]
 800b660:	6123      	str	r3, [r4, #16]
 800b662:	2300      	movs	r3, #0
 800b664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b668:	e7a8      	b.n	800b5bc <_printf_i+0x150>
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	462a      	mov	r2, r5
 800b66e:	4649      	mov	r1, r9
 800b670:	4640      	mov	r0, r8
 800b672:	47d0      	blx	sl
 800b674:	3001      	adds	r0, #1
 800b676:	d0ab      	beq.n	800b5d0 <_printf_i+0x164>
 800b678:	6823      	ldr	r3, [r4, #0]
 800b67a:	079b      	lsls	r3, r3, #30
 800b67c:	d413      	bmi.n	800b6a6 <_printf_i+0x23a>
 800b67e:	68e0      	ldr	r0, [r4, #12]
 800b680:	9b03      	ldr	r3, [sp, #12]
 800b682:	4298      	cmp	r0, r3
 800b684:	bfb8      	it	lt
 800b686:	4618      	movlt	r0, r3
 800b688:	e7a4      	b.n	800b5d4 <_printf_i+0x168>
 800b68a:	2301      	movs	r3, #1
 800b68c:	4632      	mov	r2, r6
 800b68e:	4649      	mov	r1, r9
 800b690:	4640      	mov	r0, r8
 800b692:	47d0      	blx	sl
 800b694:	3001      	adds	r0, #1
 800b696:	d09b      	beq.n	800b5d0 <_printf_i+0x164>
 800b698:	3501      	adds	r5, #1
 800b69a:	68e3      	ldr	r3, [r4, #12]
 800b69c:	9903      	ldr	r1, [sp, #12]
 800b69e:	1a5b      	subs	r3, r3, r1
 800b6a0:	42ab      	cmp	r3, r5
 800b6a2:	dcf2      	bgt.n	800b68a <_printf_i+0x21e>
 800b6a4:	e7eb      	b.n	800b67e <_printf_i+0x212>
 800b6a6:	2500      	movs	r5, #0
 800b6a8:	f104 0619 	add.w	r6, r4, #25
 800b6ac:	e7f5      	b.n	800b69a <_printf_i+0x22e>
 800b6ae:	bf00      	nop
 800b6b0:	0801379d 	.word	0x0801379d
 800b6b4:	080137ae 	.word	0x080137ae

0800b6b8 <__sread>:
 800b6b8:	b510      	push	{r4, lr}
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c0:	f000 f894 	bl	800b7ec <_read_r>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	bfab      	itete	ge
 800b6c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b6cc:	181b      	addge	r3, r3, r0
 800b6ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6d2:	bfac      	ite	ge
 800b6d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6d6:	81a3      	strhlt	r3, [r4, #12]
 800b6d8:	bd10      	pop	{r4, pc}

0800b6da <__swrite>:
 800b6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6de:	461f      	mov	r7, r3
 800b6e0:	898b      	ldrh	r3, [r1, #12]
 800b6e2:	05db      	lsls	r3, r3, #23
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	4616      	mov	r6, r2
 800b6ea:	d505      	bpl.n	800b6f8 <__swrite+0x1e>
 800b6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f0:	2302      	movs	r3, #2
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f000 f868 	bl	800b7c8 <_lseek_r>
 800b6f8:	89a3      	ldrh	r3, [r4, #12]
 800b6fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b702:	81a3      	strh	r3, [r4, #12]
 800b704:	4632      	mov	r2, r6
 800b706:	463b      	mov	r3, r7
 800b708:	4628      	mov	r0, r5
 800b70a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b70e:	f000 b817 	b.w	800b740 <_write_r>

0800b712 <__sseek>:
 800b712:	b510      	push	{r4, lr}
 800b714:	460c      	mov	r4, r1
 800b716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b71a:	f000 f855 	bl	800b7c8 <_lseek_r>
 800b71e:	1c43      	adds	r3, r0, #1
 800b720:	89a3      	ldrh	r3, [r4, #12]
 800b722:	bf15      	itete	ne
 800b724:	6560      	strne	r0, [r4, #84]	; 0x54
 800b726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b72a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b72e:	81a3      	strheq	r3, [r4, #12]
 800b730:	bf18      	it	ne
 800b732:	81a3      	strhne	r3, [r4, #12]
 800b734:	bd10      	pop	{r4, pc}

0800b736 <__sclose>:
 800b736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b73a:	f000 b813 	b.w	800b764 <_close_r>
	...

0800b740 <_write_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4d07      	ldr	r5, [pc, #28]	; (800b760 <_write_r+0x20>)
 800b744:	4604      	mov	r4, r0
 800b746:	4608      	mov	r0, r1
 800b748:	4611      	mov	r1, r2
 800b74a:	2200      	movs	r2, #0
 800b74c:	602a      	str	r2, [r5, #0]
 800b74e:	461a      	mov	r2, r3
 800b750:	f000 f9ba 	bl	800bac8 <_write>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d102      	bne.n	800b75e <_write_r+0x1e>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	b103      	cbz	r3, 800b75e <_write_r+0x1e>
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	20003254 	.word	0x20003254

0800b764 <_close_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	4d06      	ldr	r5, [pc, #24]	; (800b780 <_close_r+0x1c>)
 800b768:	2300      	movs	r3, #0
 800b76a:	4604      	mov	r4, r0
 800b76c:	4608      	mov	r0, r1
 800b76e:	602b      	str	r3, [r5, #0]
 800b770:	f000 f982 	bl	800ba78 <_close>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	d102      	bne.n	800b77e <_close_r+0x1a>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	b103      	cbz	r3, 800b77e <_close_r+0x1a>
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	bd38      	pop	{r3, r4, r5, pc}
 800b780:	20003254 	.word	0x20003254

0800b784 <_fstat_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4d07      	ldr	r5, [pc, #28]	; (800b7a4 <_fstat_r+0x20>)
 800b788:	2300      	movs	r3, #0
 800b78a:	4604      	mov	r4, r0
 800b78c:	4608      	mov	r0, r1
 800b78e:	4611      	mov	r1, r2
 800b790:	602b      	str	r3, [r5, #0]
 800b792:	f000 f979 	bl	800ba88 <_fstat>
 800b796:	1c43      	adds	r3, r0, #1
 800b798:	d102      	bne.n	800b7a0 <_fstat_r+0x1c>
 800b79a:	682b      	ldr	r3, [r5, #0]
 800b79c:	b103      	cbz	r3, 800b7a0 <_fstat_r+0x1c>
 800b79e:	6023      	str	r3, [r4, #0]
 800b7a0:	bd38      	pop	{r3, r4, r5, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20003254 	.word	0x20003254

0800b7a8 <_isatty_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4d06      	ldr	r5, [pc, #24]	; (800b7c4 <_isatty_r+0x1c>)
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	4608      	mov	r0, r1
 800b7b2:	602b      	str	r3, [r5, #0]
 800b7b4:	f000 f970 	bl	800ba98 <_isatty>
 800b7b8:	1c43      	adds	r3, r0, #1
 800b7ba:	d102      	bne.n	800b7c2 <_isatty_r+0x1a>
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	b103      	cbz	r3, 800b7c2 <_isatty_r+0x1a>
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	bd38      	pop	{r3, r4, r5, pc}
 800b7c4:	20003254 	.word	0x20003254

0800b7c8 <_lseek_r>:
 800b7c8:	b538      	push	{r3, r4, r5, lr}
 800b7ca:	4d07      	ldr	r5, [pc, #28]	; (800b7e8 <_lseek_r+0x20>)
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	4608      	mov	r0, r1
 800b7d0:	4611      	mov	r1, r2
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	602a      	str	r2, [r5, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	f000 f966 	bl	800baa8 <_lseek>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	d102      	bne.n	800b7e6 <_lseek_r+0x1e>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	b103      	cbz	r3, 800b7e6 <_lseek_r+0x1e>
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	20003254 	.word	0x20003254

0800b7ec <_read_r>:
 800b7ec:	b538      	push	{r3, r4, r5, lr}
 800b7ee:	4d07      	ldr	r5, [pc, #28]	; (800b80c <_read_r+0x20>)
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	4608      	mov	r0, r1
 800b7f4:	4611      	mov	r1, r2
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	602a      	str	r2, [r5, #0]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	f000 f95c 	bl	800bab8 <_read>
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	d102      	bne.n	800b80a <_read_r+0x1e>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	b103      	cbz	r3, 800b80a <_read_r+0x1e>
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	20003254 	.word	0x20003254

0800b810 <expf>:
 800b810:	b508      	push	{r3, lr}
 800b812:	ed2d 8b02 	vpush	{d8}
 800b816:	eef0 8a40 	vmov.f32	s17, s0
 800b81a:	f000 f82f 	bl	800b87c <__ieee754_expf>
 800b81e:	eeb0 8a40 	vmov.f32	s16, s0
 800b822:	eeb0 0a68 	vmov.f32	s0, s17
 800b826:	f000 f919 	bl	800ba5c <finitef>
 800b82a:	b160      	cbz	r0, 800b846 <expf+0x36>
 800b82c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800b86c <expf+0x5c>
 800b830:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b838:	dd0a      	ble.n	800b850 <expf+0x40>
 800b83a:	f7fe ffa5 	bl	800a788 <__errno>
 800b83e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800b870 <expf+0x60>
 800b842:	2322      	movs	r3, #34	; 0x22
 800b844:	6003      	str	r3, [r0, #0]
 800b846:	eeb0 0a48 	vmov.f32	s0, s16
 800b84a:	ecbd 8b02 	vpop	{d8}
 800b84e:	bd08      	pop	{r3, pc}
 800b850:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b874 <expf+0x64>
 800b854:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b85c:	d5f3      	bpl.n	800b846 <expf+0x36>
 800b85e:	f7fe ff93 	bl	800a788 <__errno>
 800b862:	2322      	movs	r3, #34	; 0x22
 800b864:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800b878 <expf+0x68>
 800b868:	6003      	str	r3, [r0, #0]
 800b86a:	e7ec      	b.n	800b846 <expf+0x36>
 800b86c:	42b17180 	.word	0x42b17180
 800b870:	7f800000 	.word	0x7f800000
 800b874:	c2cff1b5 	.word	0xc2cff1b5
 800b878:	00000000 	.word	0x00000000

0800b87c <__ieee754_expf>:
 800b87c:	ee10 2a10 	vmov	r2, s0
 800b880:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b884:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b888:	d902      	bls.n	800b890 <__ieee754_expf+0x14>
 800b88a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b88e:	4770      	bx	lr
 800b890:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800b894:	d106      	bne.n	800b8a4 <__ieee754_expf+0x28>
 800b896:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800b9d0 <__ieee754_expf+0x154>
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	bf18      	it	ne
 800b89e:	eeb0 0a67 	vmovne.f32	s0, s15
 800b8a2:	4770      	bx	lr
 800b8a4:	484b      	ldr	r0, [pc, #300]	; (800b9d4 <__ieee754_expf+0x158>)
 800b8a6:	4282      	cmp	r2, r0
 800b8a8:	dd02      	ble.n	800b8b0 <__ieee754_expf+0x34>
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	f000 b8d0 	b.w	800ba50 <__math_oflowf>
 800b8b0:	2a00      	cmp	r2, #0
 800b8b2:	da05      	bge.n	800b8c0 <__ieee754_expf+0x44>
 800b8b4:	4a48      	ldr	r2, [pc, #288]	; (800b9d8 <__ieee754_expf+0x15c>)
 800b8b6:	4291      	cmp	r1, r2
 800b8b8:	d902      	bls.n	800b8c0 <__ieee754_expf+0x44>
 800b8ba:	2000      	movs	r0, #0
 800b8bc:	f000 b8c2 	b.w	800ba44 <__math_uflowf>
 800b8c0:	4a46      	ldr	r2, [pc, #280]	; (800b9dc <__ieee754_expf+0x160>)
 800b8c2:	4291      	cmp	r1, r2
 800b8c4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b8c8:	d952      	bls.n	800b970 <__ieee754_expf+0xf4>
 800b8ca:	4a45      	ldr	r2, [pc, #276]	; (800b9e0 <__ieee754_expf+0x164>)
 800b8cc:	4291      	cmp	r1, r2
 800b8ce:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800b8d2:	d834      	bhi.n	800b93e <__ieee754_expf+0xc2>
 800b8d4:	4943      	ldr	r1, [pc, #268]	; (800b9e4 <__ieee754_expf+0x168>)
 800b8d6:	4411      	add	r1, r2
 800b8d8:	ed91 7a00 	vldr	s14, [r1]
 800b8dc:	4942      	ldr	r1, [pc, #264]	; (800b9e8 <__ieee754_expf+0x16c>)
 800b8de:	440a      	add	r2, r1
 800b8e0:	edd2 7a00 	vldr	s15, [r2]
 800b8e4:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b8e8:	f1c3 0201 	rsb	r2, r3, #1
 800b8ec:	1ad2      	subs	r2, r2, r3
 800b8ee:	ee37 0a67 	vsub.f32	s0, s14, s15
 800b8f2:	ee20 6a00 	vmul.f32	s12, s0, s0
 800b8f6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800b9ec <__ieee754_expf+0x170>
 800b8fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b9f0 <__ieee754_expf+0x174>
 800b8fe:	eee6 6a05 	vfma.f32	s13, s12, s10
 800b902:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800b9f4 <__ieee754_expf+0x178>
 800b906:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b90a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b9f8 <__ieee754_expf+0x17c>
 800b90e:	eee5 6a06 	vfma.f32	s13, s10, s12
 800b912:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800b9fc <__ieee754_expf+0x180>
 800b916:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b91a:	eef0 6a40 	vmov.f32	s13, s0
 800b91e:	eee5 6a46 	vfms.f32	s13, s10, s12
 800b922:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800b926:	ee20 5a26 	vmul.f32	s10, s0, s13
 800b92a:	bb92      	cbnz	r2, 800b992 <__ieee754_expf+0x116>
 800b92c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800b930:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800b934:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b938:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800b93c:	4770      	bx	lr
 800b93e:	4b30      	ldr	r3, [pc, #192]	; (800ba00 <__ieee754_expf+0x184>)
 800b940:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800ba04 <__ieee754_expf+0x188>
 800b944:	eddf 6a30 	vldr	s13, [pc, #192]	; 800ba08 <__ieee754_expf+0x18c>
 800b948:	4413      	add	r3, r2
 800b94a:	edd3 7a00 	vldr	s15, [r3]
 800b94e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b952:	eeb0 7a40 	vmov.f32	s14, s0
 800b956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b95a:	ee17 2a90 	vmov	r2, s15
 800b95e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b962:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b966:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ba0c <__ieee754_expf+0x190>
 800b96a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b96e:	e7be      	b.n	800b8ee <__ieee754_expf+0x72>
 800b970:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800b974:	d20b      	bcs.n	800b98e <__ieee754_expf+0x112>
 800b976:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ba10 <__ieee754_expf+0x194>
 800b97a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800b97e:	eef4 6ae5 	vcmpe.f32	s13, s11
 800b982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b986:	dd02      	ble.n	800b98e <__ieee754_expf+0x112>
 800b988:	ee30 0a25 	vadd.f32	s0, s0, s11
 800b98c:	4770      	bx	lr
 800b98e:	2200      	movs	r2, #0
 800b990:	e7af      	b.n	800b8f2 <__ieee754_expf+0x76>
 800b992:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b996:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800b99a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800b99e:	bfb8      	it	lt
 800b9a0:	3264      	addlt	r2, #100	; 0x64
 800b9a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b9a6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b9aa:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800b9ae:	ee17 3a90 	vmov	r3, s15
 800b9b2:	bfab      	itete	ge
 800b9b4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b9b8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b9bc:	ee00 3a10 	vmovge	s0, r3
 800b9c0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800ba14 <__ieee754_expf+0x198>
 800b9c4:	bfbc      	itt	lt
 800b9c6:	ee00 3a10 	vmovlt	s0, r3
 800b9ca:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b9ce:	4770      	bx	lr
 800b9d0:	00000000 	.word	0x00000000
 800b9d4:	42b17217 	.word	0x42b17217
 800b9d8:	42cff1b5 	.word	0x42cff1b5
 800b9dc:	3eb17218 	.word	0x3eb17218
 800b9e0:	3f851591 	.word	0x3f851591
 800b9e4:	080137c8 	.word	0x080137c8
 800b9e8:	080137d0 	.word	0x080137d0
 800b9ec:	3331bb4c 	.word	0x3331bb4c
 800b9f0:	b5ddea0e 	.word	0xb5ddea0e
 800b9f4:	388ab355 	.word	0x388ab355
 800b9f8:	bb360b61 	.word	0xbb360b61
 800b9fc:	3e2aaaab 	.word	0x3e2aaaab
 800ba00:	080137c0 	.word	0x080137c0
 800ba04:	3fb8aa3b 	.word	0x3fb8aa3b
 800ba08:	3f317180 	.word	0x3f317180
 800ba0c:	3717f7d1 	.word	0x3717f7d1
 800ba10:	7149f2ca 	.word	0x7149f2ca
 800ba14:	0d800000 	.word	0x0d800000

0800ba18 <with_errnof>:
 800ba18:	b513      	push	{r0, r1, r4, lr}
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ba20:	f7fe feb2 	bl	800a788 <__errno>
 800ba24:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ba28:	6004      	str	r4, [r0, #0]
 800ba2a:	b002      	add	sp, #8
 800ba2c:	bd10      	pop	{r4, pc}

0800ba2e <xflowf>:
 800ba2e:	b130      	cbz	r0, 800ba3e <xflowf+0x10>
 800ba30:	eef1 7a40 	vneg.f32	s15, s0
 800ba34:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ba38:	2022      	movs	r0, #34	; 0x22
 800ba3a:	f7ff bfed 	b.w	800ba18 <with_errnof>
 800ba3e:	eef0 7a40 	vmov.f32	s15, s0
 800ba42:	e7f7      	b.n	800ba34 <xflowf+0x6>

0800ba44 <__math_uflowf>:
 800ba44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ba4c <__math_uflowf+0x8>
 800ba48:	f7ff bff1 	b.w	800ba2e <xflowf>
 800ba4c:	10000000 	.word	0x10000000

0800ba50 <__math_oflowf>:
 800ba50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ba58 <__math_oflowf+0x8>
 800ba54:	f7ff bfeb 	b.w	800ba2e <xflowf>
 800ba58:	70000000 	.word	0x70000000

0800ba5c <finitef>:
 800ba5c:	b082      	sub	sp, #8
 800ba5e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ba62:	9801      	ldr	r0, [sp, #4]
 800ba64:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ba68:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ba6c:	bfac      	ite	ge
 800ba6e:	2000      	movge	r0, #0
 800ba70:	2001      	movlt	r0, #1
 800ba72:	b002      	add	sp, #8
 800ba74:	4770      	bx	lr
	...

0800ba78 <_close>:
 800ba78:	4b02      	ldr	r3, [pc, #8]	; (800ba84 <_close+0xc>)
 800ba7a:	2258      	movs	r2, #88	; 0x58
 800ba7c:	601a      	str	r2, [r3, #0]
 800ba7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba82:	4770      	bx	lr
 800ba84:	20003254 	.word	0x20003254

0800ba88 <_fstat>:
 800ba88:	4b02      	ldr	r3, [pc, #8]	; (800ba94 <_fstat+0xc>)
 800ba8a:	2258      	movs	r2, #88	; 0x58
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba92:	4770      	bx	lr
 800ba94:	20003254 	.word	0x20003254

0800ba98 <_isatty>:
 800ba98:	4b02      	ldr	r3, [pc, #8]	; (800baa4 <_isatty+0xc>)
 800ba9a:	2258      	movs	r2, #88	; 0x58
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	2000      	movs	r0, #0
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	20003254 	.word	0x20003254

0800baa8 <_lseek>:
 800baa8:	4b02      	ldr	r3, [pc, #8]	; (800bab4 <_lseek+0xc>)
 800baaa:	2258      	movs	r2, #88	; 0x58
 800baac:	601a      	str	r2, [r3, #0]
 800baae:	f04f 30ff 	mov.w	r0, #4294967295
 800bab2:	4770      	bx	lr
 800bab4:	20003254 	.word	0x20003254

0800bab8 <_read>:
 800bab8:	4b02      	ldr	r3, [pc, #8]	; (800bac4 <_read+0xc>)
 800baba:	2258      	movs	r2, #88	; 0x58
 800babc:	601a      	str	r2, [r3, #0]
 800babe:	f04f 30ff 	mov.w	r0, #4294967295
 800bac2:	4770      	bx	lr
 800bac4:	20003254 	.word	0x20003254

0800bac8 <_write>:
 800bac8:	4b02      	ldr	r3, [pc, #8]	; (800bad4 <_write+0xc>)
 800baca:	2258      	movs	r2, #88	; 0x58
 800bacc:	601a      	str	r2, [r3, #0]
 800bace:	f04f 30ff 	mov.w	r0, #4294967295
 800bad2:	4770      	bx	lr
 800bad4:	20003254 	.word	0x20003254

0800bad8 <_init>:
 800bad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bada:	bf00      	nop
 800badc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bade:	bc08      	pop	{r3}
 800bae0:	469e      	mov	lr, r3
 800bae2:	4770      	bx	lr

0800bae4 <_fini>:
 800bae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae6:	bf00      	nop
 800bae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baea:	bc08      	pop	{r3}
 800baec:	469e      	mov	lr, r3
 800baee:	4770      	bx	lr
