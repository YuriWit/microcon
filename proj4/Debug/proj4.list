
proj4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b988  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007cd8  0800bb20  0800bb20  0001bb20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080137f8  080137f8  000304cc  2**0
                  CONTENTS
  4 .ARM          00000008  080137f8  080137f8  000237f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013800  08013800  000304cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013800  08013800  00023800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013804  08013804  00023804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004cc  20000000  08013808  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000304cc  2**0
                  CONTENTS
 10 .bss          000036b8  200004e0  200004e0  000304e0  2**5
                  ALLOC
 11 ._user_heap_stack 00001000  20003b98  20003b98  000304e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001836a  00000000  00000000  000304fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fbe  00000000  00000000  00048866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  0004c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001198  00000000  00000000  0004db80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026daf  00000000  00000000  0004ed18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ae60  00000000  00000000  00075ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d660c  00000000  00000000  00090927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cb  00000000  00000000  00166f33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058fc  00000000  00000000  00167000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000009c  00000000  00000000  0016c8fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000014d  00000000  00000000  0016c998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004e0 	.word	0x200004e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb00 	.word	0x0800bb00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004e4 	.word	0x200004e4
 80001cc:	0800bb00 	.word	0x0800bb00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fc28 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f810 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f920 	bl	80007c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000584:	f000 f88a 	bl	800069c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000588:	f000 f8b6 	bl	80006f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 800058c:	f000 f8e4 	bl	8000758 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000590:	f007 fa74 	bl	8007a7c <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000594:	f000 f86e 	bl	8000674 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8000598:	f008 f8da 	bl	8008750 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059c:	e7fe      	b.n	800059c <main+0x28>
	...

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f00a f936 	bl	800a820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a27      	ldr	r2, [pc, #156]	; (800066c <SystemClock_Config+0xcc>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <SystemClock_Config+0xd0>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000610:	2308      	movs	r3, #8
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000614:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000618:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061e:	2307      	movs	r3, #7
 8000620:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	4618      	mov	r0, r3
 8000628:	f002 ffc6 	bl	80035b8 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000632:	f000 f9c5 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000642:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000646:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	2105      	movs	r1, #5
 8000654:	4618      	mov	r0, r3
 8000656:	f003 fa27 	bl	8003aa8 <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000660:	f000 f9ae 	bl	80009c0 <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3750      	adds	r7, #80	; 0x50
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_CRC_Init+0x20>)
 800067a:	4a07      	ldr	r2, [pc, #28]	; (8000698 <MX_CRC_Init+0x24>)
 800067c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_CRC_Init+0x20>)
 8000680:	f000 fd4b 	bl	800111a <HAL_CRC_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800068a:	f000 f999 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200004fc 	.word	0x200004fc
 8000698:	40023000 	.word	0x40023000

0800069c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <MX_I2C1_Init+0x54>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a8:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x58>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_I2C1_Init+0x50>)
 80006da:	f000 ff0b 	bl	80014f4 <HAL_I2C_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e4:	f000 f96c 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000504 	.word	0x20000504
 80006f0:	40005400 	.word	0x40005400
 80006f4:	000186a0 	.word	0x000186a0

080006f8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_I2S3_Init+0x54>)
 80006fe:	4a14      	ldr	r2, [pc, #80]	; (8000750 <MX_I2S3_Init+0x58>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2S3_Init+0x54>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_I2S3_Init+0x54>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2S3_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_I2S3_Init+0x54>)
 8000718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_I2S3_Init+0x54>)
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <MX_I2S3_Init+0x5c>)
 8000722:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2S3_Init+0x54>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_I2S3_Init+0x54>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2S3_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_I2S3_Init+0x54>)
 8000738:	f001 f820 	bl	800177c <HAL_I2S_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000742:	f000 f93d 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000558 	.word	0x20000558
 8000750:	40003c00 	.word	0x40003c00
 8000754:	00017700 	.word	0x00017700

08000758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_SPI1_Init+0x64>)
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <MX_SPI1_Init+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_SPI1_Init+0x64>)
 8000764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_SPI1_Init+0x64>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_SPI1_Init+0x64>)
 80007a4:	220a      	movs	r2, #10
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_SPI1_Init+0x64>)
 80007aa:	f003 fcc9 	bl	8004140 <HAL_SPI_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b4:	f000 f904 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200005a0 	.word	0x200005a0
 80007c0:	40013000 	.word	0x40013000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4b72      	ldr	r3, [pc, #456]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a71      	ldr	r2, [pc, #452]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b6f      	ldr	r3, [pc, #444]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	4b6b      	ldr	r3, [pc, #428]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a6a      	ldr	r2, [pc, #424]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b68      	ldr	r3, [pc, #416]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b64      	ldr	r3, [pc, #400]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a63      	ldr	r2, [pc, #396]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b61      	ldr	r3, [pc, #388]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b5d      	ldr	r3, [pc, #372]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a5c      	ldr	r2, [pc, #368]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b5a      	ldr	r3, [pc, #360]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b56      	ldr	r3, [pc, #344]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a55      	ldr	r2, [pc, #340]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b53      	ldr	r3, [pc, #332]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b4f      	ldr	r3, [pc, #316]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a4e      	ldr	r2, [pc, #312]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b4c      	ldr	r3, [pc, #304]	; (80009a8 <MX_GPIO_Init+0x1e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2108      	movs	r1, #8
 8000886:	4849      	ldr	r0, [pc, #292]	; (80009ac <MX_GPIO_Init+0x1e8>)
 8000888:	f000 fe00 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2101      	movs	r1, #1
 8000890:	4847      	ldr	r0, [pc, #284]	; (80009b0 <MX_GPIO_Init+0x1ec>)
 8000892:	f000 fdfb 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000896:	2200      	movs	r2, #0
 8000898:	f24f 0110 	movw	r1, #61456	; 0xf010
 800089c:	4845      	ldr	r0, [pc, #276]	; (80009b4 <MX_GPIO_Init+0x1f0>)
 800089e:	f000 fdf5 	bl	800148c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008a2:	2308      	movs	r3, #8
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	483c      	ldr	r0, [pc, #240]	; (80009ac <MX_GPIO_Init+0x1e8>)
 80008ba:	f000 fc4b 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008be:	2301      	movs	r3, #1
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4836      	ldr	r0, [pc, #216]	; (80009b0 <MX_GPIO_Init+0x1ec>)
 80008d6:	f000 fc3d 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008da:	2308      	movs	r3, #8
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ea:	2305      	movs	r3, #5
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	482e      	ldr	r0, [pc, #184]	; (80009b0 <MX_GPIO_Init+0x1ec>)
 80008f6:	f000 fc2d 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	482a      	ldr	r0, [pc, #168]	; (80009b8 <MX_GPIO_Init+0x1f4>)
 8000910:	f000 fc20 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000914:	2304      	movs	r3, #4
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4825      	ldr	r0, [pc, #148]	; (80009bc <MX_GPIO_Init+0x1f8>)
 8000928:	f000 fc14 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800092c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093e:	2305      	movs	r3, #5
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	481c      	ldr	r0, [pc, #112]	; (80009bc <MX_GPIO_Init+0x1f8>)
 800094a:	f000 fc03 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800094e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000952:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4813      	ldr	r0, [pc, #76]	; (80009b4 <MX_GPIO_Init+0x1f0>)
 8000968:	f000 fbf4 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800096c:	2320      	movs	r3, #32
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <MX_GPIO_Init+0x1f0>)
 8000980:	f000 fbe8 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000984:	2302      	movs	r3, #2
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000988:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_GPIO_Init+0x1e8>)
 800099a:	f000 fbdb 	bl	8001154 <HAL_GPIO_Init>

}
 800099e:	bf00      	nop
 80009a0:	3730      	adds	r7, #48	; 0x30
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020c00 	.word	0x40020c00
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40020400 	.word	0x40020400

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <Error_Handler+0x8>
	...

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <HAL_MspInit+0x4c>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e0:	6453      	str	r3, [r2, #68]	; 0x44
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <HAL_MspInit+0x4c>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a0a:	2007      	movs	r0, #7
 8000a0c:	f000 fb44 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800

08000a1c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <HAL_CRC_MspInit+0x3c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d10d      	bne.n	8000a4a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <HAL_CRC_MspInit+0x40>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <HAL_CRC_MspInit+0x40>)
 8000a38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <HAL_CRC_MspInit+0x40>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40023000 	.word	0x40023000
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <HAL_I2C_MspInit+0x84>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d12c      	bne.n	8000adc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_I2C_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <HAL_I2C_MspInit+0x88>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_I2C_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a9e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa4:	2312      	movs	r3, #18
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <HAL_I2C_MspInit+0x8c>)
 8000abc:	f000 fb4a 	bl	8001154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_I2C_MspInit+0x88>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_I2C_MspInit+0x88>)
 8000aca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_I2C_MspInit+0x88>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40005400 	.word	0x40005400
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020400 	.word	0x40020400

08000af0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08e      	sub	sp, #56	; 0x38
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a31      	ldr	r2, [pc, #196]	; (8000be0 <HAL_I2S_MspInit+0xf0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d15a      	bne.n	8000bd6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b20:	2301      	movs	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b24:	23c0      	movs	r3, #192	; 0xc0
 8000b26:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 f9c5 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b3c:	f7ff ff40 	bl	80009c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <HAL_I2S_MspInit+0xf4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a26      	ldr	r2, [pc, #152]	; (8000be4 <HAL_I2S_MspInit+0xf4>)
 8000b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <HAL_I2S_MspInit+0xf4>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <HAL_I2S_MspInit+0xf4>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	4a1f      	ldr	r2, [pc, #124]	; (8000be4 <HAL_I2S_MspInit+0xf4>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <HAL_I2S_MspInit+0xf4>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <HAL_I2S_MspInit+0xf4>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	4a18      	ldr	r2, [pc, #96]	; (8000be4 <HAL_I2S_MspInit+0xf4>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	6313      	str	r3, [r2, #48]	; 0x30
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <HAL_I2S_MspInit+0xf4>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b94:	2310      	movs	r3, #16
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba4:	2306      	movs	r3, #6
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	480e      	ldr	r0, [pc, #56]	; (8000be8 <HAL_I2S_MspInit+0xf8>)
 8000bb0:	f000 fad0 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bb4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bc6:	2306      	movs	r3, #6
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <HAL_I2S_MspInit+0xfc>)
 8000bd2:	f000 fabf 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3738      	adds	r7, #56	; 0x38
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40003c00 	.word	0x40003c00
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000
 8000bec:	40020800 	.word	0x40020800

08000bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_SPI_MspInit+0x84>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d12b      	bne.n	8000c6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c4a:	23e0      	movs	r3, #224	; 0xe0
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5a:	2305      	movs	r3, #5
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_SPI_MspInit+0x8c>)
 8000c66:	f000 fa75 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40013000 	.word	0x40013000
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <NMI_Handler+0x4>

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 f8d0 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <OTG_FS_IRQHandler+0x10>)
 8000cda:	f001 fb3f 	bl	800235c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000274c 	.word	0x2000274c

08000ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d18:	f009 fd4a 	bl	800a7b0 <__errno>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e009      	b.n	8000d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <_sbrk+0x64>)
 8000d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2001c000 	.word	0x2001c000
 8000d48:	00000800 	.word	0x00000800
 8000d4c:	200005f8 	.word	0x200005f8
 8000d50:	20003b98 	.word	0x20003b98

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d7e:	490e      	ldr	r1, [pc, #56]	; (8000db8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d80:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d94:	4c0b      	ldr	r4, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da2:	f7ff ffd7 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da6:	f009 fd09 	bl	800a7bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fbe3 	bl	8000574 <main>
  bx  lr    
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	200004cc 	.word	0x200004cc
  ldr r2, =_sidata
 8000dbc:	08013808 	.word	0x08013808
  ldr r2, =_sbss
 8000dc0:	200004e0 	.word	0x200004e0
  ldr r4, =_ebss
 8000dc4:	20003b98 	.word	0x20003b98

08000dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_Init+0x40>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_Init+0x40>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_Init+0x40>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 f94f 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f808 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fde4 	bl	80009cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x54>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f967 	bl	8001102 <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 f92f 	bl	80010ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <HAL_InitTick+0x5c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	200005fc 	.word	0x200005fc

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200005fc 	.word	0x200005fc

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff ffee 	bl	8000e98 <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d005      	beq.n	8000ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_Delay+0x44>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff ffde 	bl	8000e98 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8f7      	bhi.n	8000ed8 <HAL_Delay+0x28>
  {
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <__NVIC_EnableIRQ+0x38>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff8e 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff29 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff3e 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff8e 	bl	8000fec <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff31 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffa2 	bl	8001054 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e00e      	b.n	800114a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	795b      	ldrb	r3, [r3, #5]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d105      	bne.n	8001142 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fc6d 	bl	8000a1c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	e16b      	b.n	8001448 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	429a      	cmp	r2, r3
 800118a:	f040 815a 	bne.w	8001442 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2b01      	cmp	r3, #1
 8001198:	d005      	beq.n	80011a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d130      	bne.n	8001208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011dc:	2201      	movs	r2, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	f003 0201 	and.w	r2, r3, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b03      	cmp	r3, #3
 8001212:	d017      	beq.n	8001244 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d123      	bne.n	8001298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	08da      	lsrs	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3208      	adds	r2, #8
 8001258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	08da      	lsrs	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3208      	adds	r2, #8
 8001292:	69b9      	ldr	r1, [r7, #24]
 8001294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0203 	and.w	r2, r3, #3
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80b4 	beq.w	8001442 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b60      	ldr	r3, [pc, #384]	; (8001460 <HAL_GPIO_Init+0x30c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a5f      	ldr	r2, [pc, #380]	; (8001460 <HAL_GPIO_Init+0x30c>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b5d      	ldr	r3, [pc, #372]	; (8001460 <HAL_GPIO_Init+0x30c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f6:	4a5b      	ldr	r2, [pc, #364]	; (8001464 <HAL_GPIO_Init+0x310>)
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a52      	ldr	r2, [pc, #328]	; (8001468 <HAL_GPIO_Init+0x314>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d02b      	beq.n	800137a <HAL_GPIO_Init+0x226>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a51      	ldr	r2, [pc, #324]	; (800146c <HAL_GPIO_Init+0x318>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d025      	beq.n	8001376 <HAL_GPIO_Init+0x222>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a50      	ldr	r2, [pc, #320]	; (8001470 <HAL_GPIO_Init+0x31c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d01f      	beq.n	8001372 <HAL_GPIO_Init+0x21e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x320>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d019      	beq.n	800136e <HAL_GPIO_Init+0x21a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4e      	ldr	r2, [pc, #312]	; (8001478 <HAL_GPIO_Init+0x324>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_GPIO_Init+0x216>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4d      	ldr	r2, [pc, #308]	; (800147c <HAL_GPIO_Init+0x328>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00d      	beq.n	8001366 <HAL_GPIO_Init+0x212>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4c      	ldr	r2, [pc, #304]	; (8001480 <HAL_GPIO_Init+0x32c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d007      	beq.n	8001362 <HAL_GPIO_Init+0x20e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4b      	ldr	r2, [pc, #300]	; (8001484 <HAL_GPIO_Init+0x330>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_GPIO_Init+0x20a>
 800135a:	2307      	movs	r3, #7
 800135c:	e00e      	b.n	800137c <HAL_GPIO_Init+0x228>
 800135e:	2308      	movs	r3, #8
 8001360:	e00c      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001362:	2306      	movs	r3, #6
 8001364:	e00a      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001366:	2305      	movs	r3, #5
 8001368:	e008      	b.n	800137c <HAL_GPIO_Init+0x228>
 800136a:	2304      	movs	r3, #4
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x228>
 800136e:	2303      	movs	r3, #3
 8001370:	e004      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001372:	2302      	movs	r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x228>
 800137a:	2300      	movs	r3, #0
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f002 0203 	and.w	r2, r2, #3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4093      	lsls	r3, r2
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800138c:	4935      	ldr	r1, [pc, #212]	; (8001464 <HAL_GPIO_Init+0x310>)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139a:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <HAL_GPIO_Init+0x334>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013be:	4a32      	ldr	r2, [pc, #200]	; (8001488 <HAL_GPIO_Init+0x334>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c4:	4b30      	ldr	r3, [pc, #192]	; (8001488 <HAL_GPIO_Init+0x334>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e8:	4a27      	ldr	r2, [pc, #156]	; (8001488 <HAL_GPIO_Init+0x334>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <HAL_GPIO_Init+0x334>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001412:	4a1d      	ldr	r2, [pc, #116]	; (8001488 <HAL_GPIO_Init+0x334>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HAL_GPIO_Init+0x334>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800143c:	4a12      	ldr	r2, [pc, #72]	; (8001488 <HAL_GPIO_Init+0x334>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	f67f ae90 	bls.w	8001170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40013800 	.word	0x40013800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400
 8001470:	40020800 	.word	0x40020800
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021000 	.word	0x40021000
 800147c:	40021400 	.word	0x40021400
 8001480:	40021800 	.word	0x40021800
 8001484:	40021c00 	.word	0x40021c00
 8001488:	40013c00 	.word	0x40013c00

0800148c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
 8001498:	4613      	mov	r3, r2
 800149a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800149c:	787b      	ldrb	r3, [r7, #1]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a8:	e003      	b.n	80014b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	041a      	lsls	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	619a      	str	r2, [r3, #24]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014be:	b480      	push	{r7}
 80014c0:	b085      	sub	sp, #20
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	460b      	mov	r3, r1
 80014c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014d0:	887a      	ldrh	r2, [r7, #2]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4013      	ands	r3, r2
 80014d6:	041a      	lsls	r2, r3, #16
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	43d9      	mvns	r1, r3
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	400b      	ands	r3, r1
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	619a      	str	r2, [r3, #24]
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e12b      	b.n	800175e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d106      	bne.n	8001520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff faa0 	bl	8000a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2224      	movs	r2, #36	; 0x24
 8001524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0201 	bic.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001546:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001556:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001558:	f002 fc9e 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 800155c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a81      	ldr	r2, [pc, #516]	; (8001768 <HAL_I2C_Init+0x274>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d807      	bhi.n	8001578 <HAL_I2C_Init+0x84>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4a80      	ldr	r2, [pc, #512]	; (800176c <HAL_I2C_Init+0x278>)
 800156c:	4293      	cmp	r3, r2
 800156e:	bf94      	ite	ls
 8001570:	2301      	movls	r3, #1
 8001572:	2300      	movhi	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	e006      	b.n	8001586 <HAL_I2C_Init+0x92>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4a7d      	ldr	r2, [pc, #500]	; (8001770 <HAL_I2C_Init+0x27c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	bf94      	ite	ls
 8001580:	2301      	movls	r3, #1
 8001582:	2300      	movhi	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e0e7      	b.n	800175e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4a78      	ldr	r2, [pc, #480]	; (8001774 <HAL_I2C_Init+0x280>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	0c9b      	lsrs	r3, r3, #18
 8001598:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4a6a      	ldr	r2, [pc, #424]	; (8001768 <HAL_I2C_Init+0x274>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d802      	bhi.n	80015c8 <HAL_I2C_Init+0xd4>
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	3301      	adds	r3, #1
 80015c6:	e009      	b.n	80015dc <HAL_I2C_Init+0xe8>
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	4a69      	ldr	r2, [pc, #420]	; (8001778 <HAL_I2C_Init+0x284>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	3301      	adds	r3, #1
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	430b      	orrs	r3, r1
 80015e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	495c      	ldr	r1, [pc, #368]	; (8001768 <HAL_I2C_Init+0x274>)
 80015f8:	428b      	cmp	r3, r1
 80015fa:	d819      	bhi.n	8001630 <HAL_I2C_Init+0x13c>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1e59      	subs	r1, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fbb1 f3f3 	udiv	r3, r1, r3
 800160a:	1c59      	adds	r1, r3, #1
 800160c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001610:	400b      	ands	r3, r1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00a      	beq.n	800162c <HAL_I2C_Init+0x138>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1e59      	subs	r1, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fbb1 f3f3 	udiv	r3, r1, r3
 8001624:	3301      	adds	r3, #1
 8001626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162a:	e051      	b.n	80016d0 <HAL_I2C_Init+0x1dc>
 800162c:	2304      	movs	r3, #4
 800162e:	e04f      	b.n	80016d0 <HAL_I2C_Init+0x1dc>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d111      	bne.n	800165c <HAL_I2C_Init+0x168>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	1e58      	subs	r0, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6859      	ldr	r1, [r3, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	440b      	add	r3, r1
 8001646:	fbb0 f3f3 	udiv	r3, r0, r3
 800164a:	3301      	adds	r3, #1
 800164c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	e012      	b.n	8001682 <HAL_I2C_Init+0x18e>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1e58      	subs	r0, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	0099      	lsls	r1, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001672:	3301      	adds	r3, #1
 8001674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001678:	2b00      	cmp	r3, #0
 800167a:	bf0c      	ite	eq
 800167c:	2301      	moveq	r3, #1
 800167e:	2300      	movne	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_I2C_Init+0x196>
 8001686:	2301      	movs	r3, #1
 8001688:	e022      	b.n	80016d0 <HAL_I2C_Init+0x1dc>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10e      	bne.n	80016b0 <HAL_I2C_Init+0x1bc>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1e58      	subs	r0, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6859      	ldr	r1, [r3, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	440b      	add	r3, r1
 80016a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ae:	e00f      	b.n	80016d0 <HAL_I2C_Init+0x1dc>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1e58      	subs	r0, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6859      	ldr	r1, [r3, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	0099      	lsls	r1, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c6:	3301      	adds	r3, #1
 80016c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	6809      	ldr	r1, [r1, #0]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69da      	ldr	r2, [r3, #28]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6911      	ldr	r1, [r2, #16]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68d2      	ldr	r2, [r2, #12]
 800170a:	4311      	orrs	r1, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	430b      	orrs	r3, r1
 8001712:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2220      	movs	r2, #32
 800174a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	000186a0 	.word	0x000186a0
 800176c:	001e847f 	.word	0x001e847f
 8001770:	003d08ff 	.word	0x003d08ff
 8001774:	431bde83 	.word	0x431bde83
 8001778:	10624dd3 	.word	0x10624dd3

0800177c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e128      	b.n	80019e0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a90      	ldr	r2, [pc, #576]	; (80019e8 <HAL_I2S_Init+0x26c>)
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff f9a1 	bl	8000af0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2202      	movs	r2, #2
 80017b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80017c4:	f023 030f 	bic.w	r3, r3, #15
 80017c8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2202      	movs	r2, #2
 80017d0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d060      	beq.n	800189c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80017e2:	2310      	movs	r3, #16
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e001      	b.n	80017ec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80017e8:	2320      	movs	r3, #32
 80017ea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b20      	cmp	r3, #32
 80017f2:	d802      	bhi.n	80017fa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f002 fc42 	bl	8004084 <HAL_RCCEx_GetPeriphCLKFreq>
 8001800:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800180a:	d125      	bne.n	8001858 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d010      	beq.n	8001836 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	fbb2 f2f3 	udiv	r2, r2, r3
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	461a      	mov	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001830:	3305      	adds	r3, #5
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	e01f      	b.n	8001876 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	461a      	mov	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	3305      	adds	r3, #5
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	e00e      	b.n	8001876 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	461a      	mov	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	3305      	adds	r3, #5
 8001874:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4a5c      	ldr	r2, [pc, #368]	; (80019ec <HAL_I2S_Init+0x270>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	08db      	lsrs	r3, r3, #3
 8001880:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	085b      	lsrs	r3, r3, #1
 8001892:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	e003      	b.n	80018a4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800189c:	2302      	movs	r3, #2
 800189e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d902      	bls.n	80018b0 <HAL_I2S_Init+0x134>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	2bff      	cmp	r3, #255	; 0xff
 80018ae:	d907      	bls.n	80018c0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b4:	f043 0210 	orr.w	r2, r3, #16
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e08f      	b.n	80019e0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	ea42 0103 	orr.w	r1, r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018de:	f023 030f 	bic.w	r3, r3, #15
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6851      	ldr	r1, [r2, #4]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6892      	ldr	r2, [r2, #8]
 80018ea:	4311      	orrs	r1, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	68d2      	ldr	r2, [r2, #12]
 80018f0:	4311      	orrs	r1, r2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6992      	ldr	r2, [r2, #24]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001902:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d161      	bne.n	80019d0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a38      	ldr	r2, [pc, #224]	; (80019f0 <HAL_I2S_Init+0x274>)
 8001910:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a37      	ldr	r2, [pc, #220]	; (80019f4 <HAL_I2S_Init+0x278>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d101      	bne.n	8001920 <HAL_I2S_Init+0x1a4>
 800191c:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_I2S_Init+0x27c>)
 800191e:	e001      	b.n	8001924 <HAL_I2S_Init+0x1a8>
 8001920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	4932      	ldr	r1, [pc, #200]	; (80019f4 <HAL_I2S_Init+0x278>)
 800192c:	428a      	cmp	r2, r1
 800192e:	d101      	bne.n	8001934 <HAL_I2S_Init+0x1b8>
 8001930:	4a31      	ldr	r2, [pc, #196]	; (80019f8 <HAL_I2S_Init+0x27c>)
 8001932:	e001      	b.n	8001938 <HAL_I2S_Init+0x1bc>
 8001934:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001938:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800193c:	f023 030f 	bic.w	r3, r3, #15
 8001940:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a2b      	ldr	r2, [pc, #172]	; (80019f4 <HAL_I2S_Init+0x278>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d101      	bne.n	8001950 <HAL_I2S_Init+0x1d4>
 800194c:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <HAL_I2S_Init+0x27c>)
 800194e:	e001      	b.n	8001954 <HAL_I2S_Init+0x1d8>
 8001950:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001954:	2202      	movs	r2, #2
 8001956:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <HAL_I2S_Init+0x278>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_I2S_Init+0x1ea>
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_I2S_Init+0x27c>)
 8001964:	e001      	b.n	800196a <HAL_I2S_Init+0x1ee>
 8001966:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001976:	d003      	beq.n	8001980 <HAL_I2S_Init+0x204>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d103      	bne.n	8001988 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	e001      	b.n	800198c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001996:	4313      	orrs	r3, r2
 8001998:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019a0:	4313      	orrs	r3, r2
 80019a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	897b      	ldrh	r3, [r7, #10]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019b8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <HAL_I2S_Init+0x278>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d101      	bne.n	80019c8 <HAL_I2S_Init+0x24c>
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_I2S_Init+0x27c>)
 80019c6:	e001      	b.n	80019cc <HAL_I2S_Init+0x250>
 80019c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019cc:	897a      	ldrh	r2, [r7, #10]
 80019ce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	08001af3 	.word	0x08001af3
 80019ec:	cccccccd 	.word	0xcccccccd
 80019f0:	08001c09 	.word	0x08001c09
 80019f4:	40003800 	.word	0x40003800
 80019f8:	40003400 	.word	0x40003400

080019fc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	881a      	ldrh	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	1c9a      	adds	r2, r3, #2
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10e      	bne.n	8001a8c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a7c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffb8 	bl	80019fc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	b292      	uxth	r2, r2
 8001aa8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	1c9a      	adds	r2, r3, #2
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10e      	bne.n	8001aea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ada:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff93 	bl	8001a10 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d13a      	bne.n	8001b84 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d109      	bne.n	8001b2c <I2S_IRQHandler+0x3a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b22:	2b40      	cmp	r3, #64	; 0x40
 8001b24:	d102      	bne.n	8001b2c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffb4 	bl	8001a94 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b32:	2b40      	cmp	r3, #64	; 0x40
 8001b34:	d126      	bne.n	8001b84 <I2S_IRQHandler+0x92>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d11f      	bne.n	8001b84 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f043 0202 	orr.w	r2, r3, #2
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ff50 	bl	8001a24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d136      	bne.n	8001bfe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d109      	bne.n	8001bae <I2S_IRQHandler+0xbc>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba4:	2b80      	cmp	r3, #128	; 0x80
 8001ba6:	d102      	bne.n	8001bae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff45 	bl	8001a38 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d122      	bne.n	8001bfe <I2S_IRQHandler+0x10c>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0320 	and.w	r3, r3, #32
 8001bc2:	2b20      	cmp	r3, #32
 8001bc4:	d11b      	bne.n	8001bfe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bd4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	f043 0204 	orr.w	r2, r3, #4
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff13 	bl	8001a24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a92      	ldr	r2, [pc, #584]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001c22:	4b92      	ldr	r3, [pc, #584]	; (8001e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c24:	e001      	b.n	8001c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001c26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a8b      	ldr	r2, [pc, #556]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001c40:	4b8a      	ldr	r3, [pc, #552]	; (8001e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c42:	e001      	b.n	8001c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001c44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c54:	d004      	beq.n	8001c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 8099 	bne.w	8001d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d107      	bne.n	8001c7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f925 	bl	8001ec4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d107      	bne.n	8001c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f9c8 	bl	8002024 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9a:	2b40      	cmp	r3, #64	; 0x40
 8001c9c:	d13a      	bne.n	8001d14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d035      	beq.n	8001d14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a6e      	ldr	r2, [pc, #440]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d101      	bne.n	8001cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001cb2:	4b6e      	ldr	r3, [pc, #440]	; (8001e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001cb4:	e001      	b.n	8001cba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001cb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4969      	ldr	r1, [pc, #420]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001cc2:	428b      	cmp	r3, r1
 8001cc4:	d101      	bne.n	8001cca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001cc6:	4b69      	ldr	r3, [pc, #420]	; (8001e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001cc8:	e001      	b.n	8001cce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001cca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cd2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ce2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f043 0202 	orr.w	r2, r3, #2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff fe88 	bl	8001a24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	f040 80c3 	bne.w	8001ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 80bd 	beq.w	8001ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d3a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a49      	ldr	r2, [pc, #292]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d101      	bne.n	8001d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001d46:	4b49      	ldr	r3, [pc, #292]	; (8001e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d48:	e001      	b.n	8001d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001d4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4944      	ldr	r1, [pc, #272]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d56:	428b      	cmp	r3, r1
 8001d58:	d101      	bne.n	8001d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001d5a:	4b44      	ldr	r3, [pc, #272]	; (8001e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d5c:	e001      	b.n	8001d62 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001d5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d66:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f043 0204 	orr.w	r2, r3, #4
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fe4a 	bl	8001a24 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d90:	e089      	b.n	8001ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d107      	bne.n	8001dac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8be 	bl	8001f28 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d107      	bne.n	8001dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f8fd 	bl	8001fc0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d12f      	bne.n	8001e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f003 0320 	and.w	r3, r3, #32
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d02a      	beq.n	8001e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001de8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d101      	bne.n	8001df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001df6:	e001      	b.n	8001dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001df8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4919      	ldr	r1, [pc, #100]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e04:	428b      	cmp	r3, r1
 8001e06:	d101      	bne.n	8001e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001e08:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e0a:	e001      	b.n	8001e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001e0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e14:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f043 0202 	orr.w	r2, r3, #2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff fdfa 	bl	8001a24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d136      	bne.n	8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d031      	beq.n	8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e50:	e001      	b.n	8001e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001e52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4902      	ldr	r1, [pc, #8]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e5e:	428b      	cmp	r3, r1
 8001e60:	d106      	bne.n	8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001e62:	4b02      	ldr	r3, [pc, #8]	; (8001e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e64:	e006      	b.n	8001e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001e66:	bf00      	nop
 8001e68:	40003800 	.word	0x40003800
 8001e6c:	40003400 	.word	0x40003400
 8001e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e78:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e88:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f043 0204 	orr.w	r2, r3, #4
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fdc0 	bl	8001a24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ea4:	e000      	b.n	8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ea6:	bf00      	nop
}
 8001ea8:	bf00      	nop
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	1c99      	adds	r1, r3, #2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6251      	str	r1, [r2, #36]	; 0x24
 8001ed6:	881a      	ldrh	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d113      	bne.n	8001f1e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f04:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d106      	bne.n	8001f1e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ffc9 	bl	8001eb0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	1c99      	adds	r1, r3, #2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6251      	str	r1, [r2, #36]	; 0x24
 8001f3a:	8819      	ldrh	r1, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1d      	ldr	r2, [pc, #116]	; (8001fb8 <I2SEx_TxISR_I2SExt+0x90>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d101      	bne.n	8001f4a <I2SEx_TxISR_I2SExt+0x22>
 8001f46:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <I2SEx_TxISR_I2SExt+0x94>)
 8001f48:	e001      	b.n	8001f4e <I2SEx_TxISR_I2SExt+0x26>
 8001f4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f4e:	460a      	mov	r2, r1
 8001f50:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d121      	bne.n	8001fae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <I2SEx_TxISR_I2SExt+0x90>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d101      	bne.n	8001f78 <I2SEx_TxISR_I2SExt+0x50>
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <I2SEx_TxISR_I2SExt+0x94>)
 8001f76:	e001      	b.n	8001f7c <I2SEx_TxISR_I2SExt+0x54>
 8001f78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	490d      	ldr	r1, [pc, #52]	; (8001fb8 <I2SEx_TxISR_I2SExt+0x90>)
 8001f84:	428b      	cmp	r3, r1
 8001f86:	d101      	bne.n	8001f8c <I2SEx_TxISR_I2SExt+0x64>
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <I2SEx_TxISR_I2SExt+0x94>)
 8001f8a:	e001      	b.n	8001f90 <I2SEx_TxISR_I2SExt+0x68>
 8001f8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f94:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d106      	bne.n	8001fae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ff81 	bl	8001eb0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40003800 	.word	0x40003800
 8001fbc:	40003400 	.word	0x40003400

08001fc0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68d8      	ldr	r0, [r3, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	1c99      	adds	r1, r3, #2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001fd8:	b282      	uxth	r2, r0
 8001fda:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d113      	bne.n	800201c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002002:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ff4a 	bl	8001eb0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a20      	ldr	r2, [pc, #128]	; (80020b4 <I2SEx_RxISR_I2SExt+0x90>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <I2SEx_RxISR_I2SExt+0x16>
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <I2SEx_RxISR_I2SExt+0x94>)
 8002038:	e001      	b.n	800203e <I2SEx_RxISR_I2SExt+0x1a>
 800203a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800203e:	68d8      	ldr	r0, [r3, #12]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	1c99      	adds	r1, r3, #2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	62d1      	str	r1, [r2, #44]	; 0x2c
 800204a:	b282      	uxth	r2, r0
 800204c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d121      	bne.n	80020aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <I2SEx_RxISR_I2SExt+0x90>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d101      	bne.n	8002074 <I2SEx_RxISR_I2SExt+0x50>
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <I2SEx_RxISR_I2SExt+0x94>)
 8002072:	e001      	b.n	8002078 <I2SEx_RxISR_I2SExt+0x54>
 8002074:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	490d      	ldr	r1, [pc, #52]	; (80020b4 <I2SEx_RxISR_I2SExt+0x90>)
 8002080:	428b      	cmp	r3, r1
 8002082:	d101      	bne.n	8002088 <I2SEx_RxISR_I2SExt+0x64>
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <I2SEx_RxISR_I2SExt+0x94>)
 8002086:	e001      	b.n	800208c <I2SEx_RxISR_I2SExt+0x68>
 8002088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800208c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002090:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d106      	bne.n	80020aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff03 	bl	8001eb0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40003800 	.word	0x40003800
 80020b8:	40003400 	.word	0x40003400

080020bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	b08f      	sub	sp, #60	; 0x3c
 80020c0:	af0a      	add	r7, sp, #40	; 0x28
 80020c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e10f      	b.n	80022ee <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d106      	bne.n	80020ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f005 ff05 	bl	8007ef8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2203      	movs	r2, #3
 80020f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f002 f9b4 	bl	800447a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	687e      	ldr	r6, [r7, #4]
 800211a:	466d      	mov	r5, sp
 800211c:	f106 0410 	add.w	r4, r6, #16
 8002120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002128:	e894 0003 	ldmia.w	r4, {r0, r1}
 800212c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002130:	1d33      	adds	r3, r6, #4
 8002132:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002134:	6838      	ldr	r0, [r7, #0]
 8002136:	f002 f88c 	bl	8004252 <USB_CoreInit>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0d0      	b.n	80022ee <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f002 f9a2 	bl	800449c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	e04a      	b.n	80021f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	333d      	adds	r3, #61	; 0x3d
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	333c      	adds	r3, #60	; 0x3c
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	b298      	uxth	r0, r3
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	3344      	adds	r3, #68	; 0x44
 800219a:	4602      	mov	r2, r0
 800219c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	3340      	adds	r3, #64	; 0x40
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	3348      	adds	r3, #72	; 0x48
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	334c      	adds	r3, #76	; 0x4c
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	3354      	adds	r3, #84	; 0x54
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	3301      	adds	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d3af      	bcc.n	800215e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	e044      	b.n	800228e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002246:	7bfa      	ldrb	r2, [r7, #15]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800225c:	7bfa      	ldrb	r2, [r7, #15]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	3301      	adds	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	d3b5      	bcc.n	8002204 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	687e      	ldr	r6, [r7, #4]
 80022a0:	466d      	mov	r5, sp
 80022a2:	f106 0410 	add.w	r4, r6, #16
 80022a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022b6:	1d33      	adds	r3, r6, #4
 80022b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ba:	6838      	ldr	r0, [r7, #0]
 80022bc:	f002 f93a 	bl	8004534 <USB_DevInit>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00d      	b.n	80022ee <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 fa89 	bl	80057fe <USB_DevDisconnect>

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_PCD_Start+0x1c>
 800230e:	2302      	movs	r3, #2
 8002310:	e020      	b.n	8002354 <HAL_PCD_Start+0x5e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	2b01      	cmp	r3, #1
 8002320:	d109      	bne.n	8002336 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002326:	2b01      	cmp	r3, #1
 8002328:	d005      	beq.n	8002336 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f002 f88c 	bl	8004458 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f003 fa39 	bl	80057bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b08d      	sub	sp, #52	; 0x34
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f003 faf7 	bl	8005966 <USB_GetMode>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	f040 848a 	bne.w	8002c94 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f003 fa5b 	bl	8005840 <USB_ReadInterrupts>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8480 	beq.w	8002c92 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 fa48 	bl	8005840 <USB_ReadInterrupts>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d107      	bne.n	80023ca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f002 0202 	and.w	r2, r2, #2
 80023c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 fa36 	bl	8005840 <USB_ReadInterrupts>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	2b10      	cmp	r3, #16
 80023dc:	d161      	bne.n	80024a2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699a      	ldr	r2, [r3, #24]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0210 	bic.w	r2, r2, #16
 80023ec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	f003 020f 	and.w	r2, r3, #15
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	3304      	adds	r3, #4
 800240c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	0c5b      	lsrs	r3, r3, #17
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	2b02      	cmp	r3, #2
 8002418:	d124      	bne.n	8002464 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d035      	beq.n	8002492 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002430:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002434:	b29b      	uxth	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	6a38      	ldr	r0, [r7, #32]
 800243a:	f003 f86d 	bl	8005518 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800244a:	441a      	add	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	6a1a      	ldr	r2, [r3, #32]
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800245c:	441a      	add	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	621a      	str	r2, [r3, #32]
 8002462:	e016      	b.n	8002492 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	0c5b      	lsrs	r3, r3, #17
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	2b06      	cmp	r3, #6
 800246e:	d110      	bne.n	8002492 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002476:	2208      	movs	r2, #8
 8002478:	4619      	mov	r1, r3
 800247a:	6a38      	ldr	r0, [r7, #32]
 800247c:	f003 f84c 	bl	8005518 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	6a1a      	ldr	r2, [r3, #32]
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800248c:	441a      	add	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699a      	ldr	r2, [r3, #24]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0210 	orr.w	r2, r2, #16
 80024a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f003 f9ca 	bl	8005840 <USB_ReadInterrupts>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024b6:	f040 80a7 	bne.w	8002608 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 f9cf 	bl	8005866 <USB_ReadDevAllOutEpInterrupt>
 80024c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80024ca:	e099      	b.n	8002600 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 808e 	beq.w	80025f4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f003 f9f3 	bl	80058ce <USB_ReadDevOutEPInterrupt>
 80024e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00c      	beq.n	800250e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002500:	461a      	mov	r2, r3
 8002502:	2301      	movs	r3, #1
 8002504:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fec3 	bl	8003294 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00c      	beq.n	8002532 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	4413      	add	r3, r2
 8002520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002524:	461a      	mov	r2, r3
 8002526:	2308      	movs	r3, #8
 8002528:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800252a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 ff99 	bl	8003464 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002548:	461a      	mov	r2, r3
 800254a:	2310      	movs	r3, #16
 800254c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d030      	beq.n	80025ba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d109      	bne.n	8002578 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002576:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	78db      	ldrb	r3, [r3, #3]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d108      	bne.n	80025a8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2200      	movs	r2, #0
 800259a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	4619      	mov	r1, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f005 fdbc 	bl	8008120 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b4:	461a      	mov	r2, r3
 80025b6:	2302      	movs	r3, #2
 80025b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d0:	461a      	mov	r2, r3
 80025d2:	2320      	movs	r3, #32
 80025d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d009      	beq.n	80025f4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ec:	461a      	mov	r2, r3
 80025ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	3301      	adds	r3, #1
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	085b      	lsrs	r3, r3, #1
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	2b00      	cmp	r3, #0
 8002604:	f47f af62 	bne.w	80024cc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f003 f917 	bl	8005840 <USB_ReadInterrupts>
 8002612:	4603      	mov	r3, r0
 8002614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002618:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800261c:	f040 80db 	bne.w	80027d6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f003 f938 	bl	800589a <USB_ReadDevAllInEpInterrupt>
 800262a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002630:	e0cd      	b.n	80027ce <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80c2 	beq.w	80027c2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f003 f95e 	bl	800590a <USB_ReadDevInEPInterrupt>
 800264e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d057      	beq.n	800270a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	2201      	movs	r2, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	43db      	mvns	r3, r3
 8002674:	69f9      	ldr	r1, [r7, #28]
 8002676:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800267a:	4013      	ands	r3, r2
 800267c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	4413      	add	r3, r2
 8002686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800268a:	461a      	mov	r2, r3
 800268c:	2301      	movs	r3, #1
 800268e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d132      	bne.n	80026fe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	334c      	adds	r3, #76	; 0x4c
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4403      	add	r3, r0
 80026b8:	3348      	adds	r3, #72	; 0x48
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4419      	add	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4403      	add	r3, r0
 80026cc:	334c      	adds	r3, #76	; 0x4c
 80026ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d113      	bne.n	80026fe <HAL_PCD_IRQHandler+0x3a2>
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	3354      	adds	r3, #84	; 0x54
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d108      	bne.n	80026fe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026f6:	461a      	mov	r2, r3
 80026f8:	2101      	movs	r1, #1
 80026fa:	f003 f965 	bl	80059c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	b2db      	uxtb	r3, r3
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f005 fc86 	bl	8008016 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002720:	461a      	mov	r2, r3
 8002722:	2308      	movs	r3, #8
 8002724:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	4413      	add	r3, r2
 8002738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800273c:	461a      	mov	r2, r3
 800273e:	2310      	movs	r3, #16
 8002740:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	4413      	add	r3, r2
 8002754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002758:	461a      	mov	r2, r3
 800275a:	2340      	movs	r3, #64	; 0x40
 800275c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d023      	beq.n	80027b0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800276a:	6a38      	ldr	r0, [r7, #32]
 800276c:	f002 f846 	bl	80047fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	3338      	adds	r3, #56	; 0x38
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4413      	add	r3, r2
 8002780:	3304      	adds	r3, #4
 8002782:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	78db      	ldrb	r3, [r3, #3]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d108      	bne.n	800279e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2200      	movs	r2, #0
 8002790:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	b2db      	uxtb	r3, r3
 8002796:	4619      	mov	r1, r3
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f005 fcd3 	bl	8008144 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027aa:	461a      	mov	r2, r3
 80027ac:	2302      	movs	r3, #2
 80027ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 fcdb 	bl	8003178 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	3301      	adds	r3, #1
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f47f af2e 	bne.w	8002632 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f003 f830 	bl	8005840 <USB_ReadInterrupts>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027ea:	d122      	bne.n	8002832 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002806:	2b01      	cmp	r3, #1
 8002808:	d108      	bne.n	800281c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002812:	2100      	movs	r1, #0
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fec3 	bl	80035a0 <HAL_PCDEx_LPM_Callback>
 800281a:	e002      	b.n	8002822 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f005 fc71 	bl	8008104 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002830:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f003 f802 	bl	8005840 <USB_ReadInterrupts>
 800283c:	4603      	mov	r3, r0
 800283e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002846:	d112      	bne.n	800286e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b01      	cmp	r3, #1
 8002856:	d102      	bne.n	800285e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f005 fc2d 	bl	80080b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800286c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f002 ffe4 	bl	8005840 <USB_ReadInterrupts>
 8002878:	4603      	mov	r3, r0
 800287a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002882:	f040 80b7 	bne.w	80029f4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2110      	movs	r1, #16
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 ffab 	bl	80047fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028aa:	e046      	b.n	800293a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b8:	461a      	mov	r2, r3
 80028ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d0:	0151      	lsls	r1, r2, #5
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	440a      	add	r2, r1
 80028d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ec:	461a      	mov	r2, r3
 80028ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002904:	0151      	lsls	r1, r2, #5
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	440a      	add	r2, r1
 800290a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800290e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002912:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	4413      	add	r3, r2
 800291c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002924:	0151      	lsls	r1, r2, #5
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	440a      	add	r2, r1
 800292a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800292e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002932:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	3301      	adds	r3, #1
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002940:	429a      	cmp	r2, r3
 8002942:	d3b3      	bcc.n	80028ac <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002952:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002956:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	2b00      	cmp	r3, #0
 800295e:	d016      	beq.n	800298e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002970:	f043 030b 	orr.w	r3, r3, #11
 8002974:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002986:	f043 030b 	orr.w	r3, r3, #11
 800298a:	6453      	str	r3, [r2, #68]	; 0x44
 800298c:	e015      	b.n	80029ba <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800299c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029a0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80029a4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029b4:	f043 030b 	orr.w	r3, r3, #11
 80029b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80029cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029de:	461a      	mov	r2, r3
 80029e0:	f002 fff2 	bl	80059c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f002 ff21 	bl	8005840 <USB_ReadInterrupts>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a08:	d124      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f002 ffb7 	bl	8005982 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f001 ff6c 	bl	80048f6 <USB_GetDevSpeed>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	461a      	mov	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681c      	ldr	r4, [r3, #0]
 8002a2a:	f001 fa29 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8002a2e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f001 fc6b 	bl	8004314 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f005 fb11 	bl	8008066 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 fef1 	bl	8005840 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d10a      	bne.n	8002a7e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f005 faee 	bl	800804a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f002 0208 	and.w	r2, r2, #8
 8002a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 fedc 	bl	8005840 <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8e:	2b80      	cmp	r3, #128	; 0x80
 8002a90:	d122      	bne.n	8002ad8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa2:	e014      	b.n	8002ace <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fb27 	bl	8003116 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	3301      	adds	r3, #1
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d3e5      	bcc.n	8002aa4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f002 feaf 	bl	8005840 <USB_ReadInterrupts>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aec:	d13b      	bne.n	8002b66 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aee:	2301      	movs	r3, #1
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
 8002af2:	e02b      	b.n	8002b4c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	3340      	adds	r3, #64	; 0x40
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d115      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	da12      	bge.n	8002b46 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	333f      	adds	r3, #63	; 0x3f
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fae8 	bl	8003116 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	3301      	adds	r3, #1
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d3ce      	bcc.n	8002af4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f002 fe68 	bl	8005840 <USB_ReadInterrupts>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b7a:	d155      	bne.n	8002c28 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b80:	e045      	b.n	8002c0e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d12e      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002baa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	da2b      	bge.n	8002c08 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002bbc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d121      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c04:	6053      	str	r3, [r2, #4]
            break;
 8002c06:	e007      	b.n	8002c18 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d3b4      	bcc.n	8002b82 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f002 fe07 	bl	8005840 <USB_ReadInterrupts>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d10a      	bne.n	8002c54 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f005 fa92 	bl	8008168 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f002 fdf1 	bl	8005840 <USB_ReadInterrupts>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d115      	bne.n	8002c94 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f005 fa82 	bl	8008184 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	e000      	b.n	8002c94 <HAL_PCD_IRQHandler+0x938>
      return;
 8002c92:	bf00      	nop
    }
  }
}
 8002c94:	3734      	adds	r7, #52	; 0x34
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd90      	pop	{r4, r7, pc}

08002c9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_PCD_SetAddress+0x1a>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e013      	b.n	8002cdc <HAL_PCD_SetAddress+0x42>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f002 fd4f 	bl	8005770 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	4608      	mov	r0, r1
 8002cee:	4611      	mov	r1, r2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	70fb      	strb	r3, [r7, #3]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	803b      	strh	r3, [r7, #0]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	da0f      	bge.n	8002d2a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	f003 020f 	and.w	r2, r3, #15
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	3338      	adds	r3, #56	; 0x38
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3304      	adds	r3, #4
 8002d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	705a      	strb	r2, [r3, #1]
 8002d28:	e00f      	b.n	8002d4a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	f003 020f 	and.w	r2, r3, #15
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	3304      	adds	r3, #4
 8002d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d56:	883a      	ldrh	r2, [r7, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	78ba      	ldrb	r2, [r7, #2]
 8002d60:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	785b      	ldrb	r3, [r3, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d004      	beq.n	8002d74 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d74:	78bb      	ldrb	r3, [r7, #2]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d102      	bne.n	8002d80 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_PCD_EP_Open+0xaa>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e00e      	b.n	8002dac <HAL_PCD_EP_Open+0xc8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68f9      	ldr	r1, [r7, #12]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 fdcf 	bl	8004940 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002daa:	7afb      	ldrb	r3, [r7, #11]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	da0f      	bge.n	8002de8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	f003 020f 	and.w	r2, r3, #15
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	3338      	adds	r3, #56	; 0x38
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4413      	add	r3, r2
 8002ddc:	3304      	adds	r3, #4
 8002dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	705a      	strb	r2, [r3, #1]
 8002de6:	e00f      	b.n	8002e08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	f003 020f 	and.w	r2, r3, #15
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3304      	adds	r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_PCD_EP_Close+0x6e>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e00e      	b.n	8002e40 <HAL_PCD_EP_Close+0x8c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68f9      	ldr	r1, [r7, #12]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f001 fe0d 	bl	8004a50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	460b      	mov	r3, r1
 8002e56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e58:	7afb      	ldrb	r3, [r7, #11]
 8002e5a:	f003 020f 	and.w	r2, r3, #15
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3304      	adds	r3, #4
 8002e70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2200      	movs	r2, #0
 8002e82:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2200      	movs	r2, #0
 8002e88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e8a:	7afb      	ldrb	r3, [r7, #11]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d102      	bne.n	8002ea4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ea4:	7afb      	ldrb	r3, [r7, #11]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6979      	ldr	r1, [r7, #20]
 8002ebc:	f002 f8ec 	bl	8005098 <USB_EP0StartXfer>
 8002ec0:	e008      	b.n	8002ed4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6979      	ldr	r1, [r7, #20]
 8002ed0:	f001 fe9a 	bl	8004c08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	f003 020f 	and.w	r2, r3, #15
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002f00:	681b      	ldr	r3, [r3, #0]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b086      	sub	sp, #24
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1e:	7afb      	ldrb	r3, [r7, #11]
 8002f20:	f003 020f 	and.w	r2, r3, #15
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	3338      	adds	r3, #56	; 0x38
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	3304      	adds	r3, #4
 8002f34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2200      	movs	r2, #0
 8002f46:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f4e:	7afb      	ldrb	r3, [r7, #11]
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d102      	bne.n	8002f68 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f68:	7afb      	ldrb	r3, [r7, #11]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6979      	ldr	r1, [r7, #20]
 8002f80:	f002 f88a 	bl	8005098 <USB_EP0StartXfer>
 8002f84:	e008      	b.n	8002f98 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	461a      	mov	r2, r3
 8002f92:	6979      	ldr	r1, [r7, #20]
 8002f94:	f001 fe38 	bl	8004c08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	f003 020f 	and.w	r2, r3, #15
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d901      	bls.n	8002fc0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e050      	b.n	8003062 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	da0f      	bge.n	8002fe8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	f003 020f 	and.w	r2, r3, #15
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	3338      	adds	r3, #56	; 0x38
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	3304      	adds	r3, #4
 8002fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	705a      	strb	r2, [r3, #1]
 8002fe6:	e00d      	b.n	8003004 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fe8:	78fa      	ldrb	r2, [r7, #3]
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_PCD_EP_SetStall+0x82>
 8003020:	2302      	movs	r3, #2
 8003022:	e01e      	b.n	8003062 <HAL_PCD_EP_SetStall+0xc0>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68f9      	ldr	r1, [r7, #12]
 8003032:	4618      	mov	r0, r3
 8003034:	f002 fac8 	bl	80055c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10a      	bne.n	8003058 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	b2d9      	uxtb	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003052:	461a      	mov	r2, r3
 8003054:	f002 fcb8 	bl	80059c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	f003 020f 	and.w	r2, r3, #15
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	429a      	cmp	r2, r3
 8003082:	d901      	bls.n	8003088 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e042      	b.n	800310e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800308c:	2b00      	cmp	r3, #0
 800308e:	da0f      	bge.n	80030b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	f003 020f 	and.w	r2, r3, #15
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	3338      	adds	r3, #56	; 0x38
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	3304      	adds	r3, #4
 80030a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	705a      	strb	r2, [r3, #1]
 80030ae:	e00f      	b.n	80030d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	f003 020f 	and.w	r2, r3, #15
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	3304      	adds	r3, #4
 80030c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_PCD_EP_ClrStall+0x86>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e00e      	b.n	800310e <HAL_PCD_EP_ClrStall+0xa4>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68f9      	ldr	r1, [r7, #12]
 80030fe:	4618      	mov	r0, r3
 8003100:	f002 fad0 	bl	80056a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003126:	2b00      	cmp	r3, #0
 8003128:	da0c      	bge.n	8003144 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	f003 020f 	and.w	r2, r3, #15
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	3338      	adds	r3, #56	; 0x38
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	3304      	adds	r3, #4
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e00c      	b.n	800315e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	f003 020f 	and.w	r2, r3, #15
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	4413      	add	r3, r2
 800315a:	3304      	adds	r3, #4
 800315c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	4618      	mov	r0, r3
 8003166:	f002 f8ef 	bl	8005348 <USB_EPStopXfer>
 800316a:	4603      	mov	r3, r0
 800316c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800316e:	7afb      	ldrb	r3, [r7, #11]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af02      	add	r7, sp, #8
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	3338      	adds	r3, #56	; 0x38
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	3304      	adds	r3, #4
 800319e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a1a      	ldr	r2, [r3, #32]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d901      	bls.n	80031b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e06c      	b.n	800328a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d902      	bls.n	80031cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	3303      	adds	r3, #3
 80031d0:	089b      	lsrs	r3, r3, #2
 80031d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031d4:	e02b      	b.n	800322e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d902      	bls.n	80031f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3303      	adds	r3, #3
 80031f6:	089b      	lsrs	r3, r3, #2
 80031f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6919      	ldr	r1, [r3, #16]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800320a:	b2db      	uxtb	r3, r3
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	4603      	mov	r3, r0
 8003210:	6978      	ldr	r0, [r7, #20]
 8003212:	f002 f943 	bl	800549c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	441a      	add	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1a      	ldr	r2, [r3, #32]
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	441a      	add	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4413      	add	r3, r2
 8003236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	b29b      	uxth	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	429a      	cmp	r2, r3
 8003242:	d809      	bhi.n	8003258 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a1a      	ldr	r2, [r3, #32]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800324c:	429a      	cmp	r2, r3
 800324e:	d203      	bcs.n	8003258 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1be      	bne.n	80031d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	699a      	ldr	r2, [r3, #24]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	429a      	cmp	r2, r3
 8003262:	d811      	bhi.n	8003288 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	2201      	movs	r2, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	43db      	mvns	r3, r3
 800327e:	6939      	ldr	r1, [r7, #16]
 8003280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003284:	4013      	ands	r3, r2
 8003286:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3720      	adds	r7, #32
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	333c      	adds	r3, #60	; 0x3c
 80032ac:	3304      	adds	r3, #4
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d17b      	bne.n	80033c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d015      	beq.n	8003300 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	4a61      	ldr	r2, [pc, #388]	; (800345c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	f240 80b9 	bls.w	8003450 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80b3 	beq.w	8003450 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f6:	461a      	mov	r2, r3
 80032f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032fc:	6093      	str	r3, [r2, #8]
 80032fe:	e0a7      	b.n	8003450 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003316:	461a      	mov	r2, r3
 8003318:	2320      	movs	r3, #32
 800331a:	6093      	str	r3, [r2, #8]
 800331c:	e098      	b.n	8003450 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003324:	2b00      	cmp	r3, #0
 8003326:	f040 8093 	bne.w	8003450 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	4a4b      	ldr	r2, [pc, #300]	; (800345c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d90f      	bls.n	8003352 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003348:	461a      	mov	r2, r3
 800334a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800334e:	6093      	str	r3, [r2, #8]
 8003350:	e07e      	b.n	8003450 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	4413      	add	r3, r2
 8003364:	3304      	adds	r3, #4
 8003366:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	0159      	lsls	r1, r3, #5
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	440b      	add	r3, r1
 8003374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337e:	1ad2      	subs	r2, r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d114      	bne.n	80033b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800339c:	461a      	mov	r2, r3
 800339e:	2101      	movs	r1, #1
 80033a0:	f002 fb12 	bl	80059c8 <USB_EP0_OutStart>
 80033a4:	e006      	b.n	80033b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	441a      	add	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	4619      	mov	r1, r3
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f004 fe10 	bl	8007fe0 <HAL_PCD_DataOutStageCallback>
 80033c0:	e046      	b.n	8003450 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	4a26      	ldr	r2, [pc, #152]	; (8003460 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d124      	bne.n	8003414 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e0:	461a      	mov	r2, r3
 80033e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033e6:	6093      	str	r3, [r2, #8]
 80033e8:	e032      	b.n	8003450 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003400:	461a      	mov	r2, r3
 8003402:	2320      	movs	r3, #32
 8003404:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	4619      	mov	r1, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f004 fde7 	bl	8007fe0 <HAL_PCD_DataOutStageCallback>
 8003412:	e01d      	b.n	8003450 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d114      	bne.n	8003444 <PCD_EP_OutXfrComplete_int+0x1b0>
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	4613      	mov	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d108      	bne.n	8003444 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800343c:	461a      	mov	r2, r3
 800343e:	2100      	movs	r1, #0
 8003440:	f002 fac2 	bl	80059c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	4619      	mov	r1, r3
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f004 fdc8 	bl	8007fe0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	4f54300a 	.word	0x4f54300a
 8003460:	4f54310a 	.word	0x4f54310a

08003464 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	333c      	adds	r3, #60	; 0x3c
 800347c:	3304      	adds	r3, #4
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4a15      	ldr	r2, [pc, #84]	; (80034ec <PCD_EP_OutSetupPacket_int+0x88>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d90e      	bls.n	80034b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b0:	461a      	mov	r2, r3
 80034b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f004 fd7f 	bl	8007fbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <PCD_EP_OutSetupPacket_int+0x88>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d90c      	bls.n	80034e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d108      	bne.n	80034e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034d8:	461a      	mov	r2, r3
 80034da:	2101      	movs	r1, #1
 80034dc:	f002 fa74 	bl	80059c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	4f54300a 	.word	0x4f54300a

080034f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	70fb      	strb	r3, [r7, #3]
 80034fc:	4613      	mov	r3, r2
 80034fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d107      	bne.n	800351e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800350e:	883b      	ldrh	r3, [r7, #0]
 8003510:	0419      	lsls	r1, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	430a      	orrs	r2, r1
 800351a:	629a      	str	r2, [r3, #40]	; 0x28
 800351c:	e028      	b.n	8003570 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	0c1b      	lsrs	r3, r3, #16
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	4413      	add	r3, r2
 800352a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800352c:	2300      	movs	r3, #0
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	e00d      	b.n	800354e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	3340      	adds	r3, #64	; 0x40
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	0c1b      	lsrs	r3, r3, #16
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	4413      	add	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	3301      	adds	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	3b01      	subs	r3, #1
 8003554:	429a      	cmp	r2, r3
 8003556:	d3ec      	bcc.n	8003532 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003558:	883b      	ldrh	r3, [r7, #0]
 800355a:	0418      	lsls	r0, r3, #16
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6819      	ldr	r1, [r3, #0]
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	3b01      	subs	r3, #1
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	4302      	orrs	r2, r0
 8003568:	3340      	adds	r3, #64	; 0x40
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	460b      	mov	r3, r1
 8003588:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	887a      	ldrh	r2, [r7, #2]
 8003590:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e267      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d075      	beq.n	80036c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035d6:	4b88      	ldr	r3, [pc, #544]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d00c      	beq.n	80035fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035e2:	4b85      	ldr	r3, [pc, #532]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d112      	bne.n	8003614 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ee:	4b82      	ldr	r3, [pc, #520]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035fa:	d10b      	bne.n	8003614 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fc:	4b7e      	ldr	r3, [pc, #504]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d05b      	beq.n	80036c0 <HAL_RCC_OscConfig+0x108>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d157      	bne.n	80036c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e242      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361c:	d106      	bne.n	800362c <HAL_RCC_OscConfig+0x74>
 800361e:	4b76      	ldr	r3, [pc, #472]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a75      	ldr	r2, [pc, #468]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	e01d      	b.n	8003668 <HAL_RCC_OscConfig+0xb0>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003634:	d10c      	bne.n	8003650 <HAL_RCC_OscConfig+0x98>
 8003636:	4b70      	ldr	r3, [pc, #448]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a6f      	ldr	r2, [pc, #444]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 800363c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	4b6d      	ldr	r3, [pc, #436]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a6c      	ldr	r2, [pc, #432]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	e00b      	b.n	8003668 <HAL_RCC_OscConfig+0xb0>
 8003650:	4b69      	ldr	r3, [pc, #420]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a68      	ldr	r2, [pc, #416]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	4b66      	ldr	r3, [pc, #408]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a65      	ldr	r2, [pc, #404]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d013      	beq.n	8003698 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fd fc12 	bl	8000e98 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003678:	f7fd fc0e 	bl	8000e98 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	; 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e207      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	4b5b      	ldr	r3, [pc, #364]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0xc0>
 8003696:	e014      	b.n	80036c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fd fbfe 	bl	8000e98 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a0:	f7fd fbfa 	bl	8000e98 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e1f3      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b2:	4b51      	ldr	r3, [pc, #324]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0xe8>
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d063      	beq.n	8003796 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ce:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00b      	beq.n	80036f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d11c      	bne.n	8003720 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e6:	4b44      	ldr	r3, [pc, #272]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d116      	bne.n	8003720 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f2:	4b41      	ldr	r3, [pc, #260]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_RCC_OscConfig+0x152>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d001      	beq.n	800370a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e1c7      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370a:	4b3b      	ldr	r3, [pc, #236]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4937      	ldr	r1, [pc, #220]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371e:	e03a      	b.n	8003796 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d020      	beq.n	800376a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003728:	4b34      	ldr	r3, [pc, #208]	; (80037fc <HAL_RCC_OscConfig+0x244>)
 800372a:	2201      	movs	r2, #1
 800372c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fd fbb3 	bl	8000e98 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003736:	f7fd fbaf 	bl	8000e98 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e1a8      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003748:	4b2b      	ldr	r3, [pc, #172]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003754:	4b28      	ldr	r3, [pc, #160]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4925      	ldr	r1, [pc, #148]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003764:	4313      	orrs	r3, r2
 8003766:	600b      	str	r3, [r1, #0]
 8003768:	e015      	b.n	8003796 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800376a:	4b24      	ldr	r3, [pc, #144]	; (80037fc <HAL_RCC_OscConfig+0x244>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fd fb92 	bl	8000e98 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003778:	f7fd fb8e 	bl	8000e98 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e187      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378a:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d036      	beq.n	8003810 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d016      	beq.n	80037d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <HAL_RCC_OscConfig+0x248>)
 80037ac:	2201      	movs	r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b0:	f7fd fb72 	bl	8000e98 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b8:	f7fd fb6e 	bl	8000e98 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e167      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ca:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80037cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x200>
 80037d6:	e01b      	b.n	8003810 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_OscConfig+0x248>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037de:	f7fd fb5b 	bl	8000e98 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e4:	e00e      	b.n	8003804 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e6:	f7fd fb57 	bl	8000e98 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d907      	bls.n	8003804 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e150      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
 80037f8:	40023800 	.word	0x40023800
 80037fc:	42470000 	.word	0x42470000
 8003800:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003804:	4b88      	ldr	r3, [pc, #544]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1ea      	bne.n	80037e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8097 	beq.w	800394c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003822:	4b81      	ldr	r3, [pc, #516]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10f      	bne.n	800384e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	4b7d      	ldr	r3, [pc, #500]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	4a7c      	ldr	r2, [pc, #496]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383c:	6413      	str	r3, [r2, #64]	; 0x40
 800383e:	4b7a      	ldr	r3, [pc, #488]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384e:	4b77      	ldr	r3, [pc, #476]	; (8003a2c <HAL_RCC_OscConfig+0x474>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d118      	bne.n	800388c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385a:	4b74      	ldr	r3, [pc, #464]	; (8003a2c <HAL_RCC_OscConfig+0x474>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a73      	ldr	r2, [pc, #460]	; (8003a2c <HAL_RCC_OscConfig+0x474>)
 8003860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003866:	f7fd fb17 	bl	8000e98 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386e:	f7fd fb13 	bl	8000e98 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e10c      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003880:	4b6a      	ldr	r3, [pc, #424]	; (8003a2c <HAL_RCC_OscConfig+0x474>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_OscConfig+0x2ea>
 8003894:	4b64      	ldr	r3, [pc, #400]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	4a63      	ldr	r2, [pc, #396]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6713      	str	r3, [r2, #112]	; 0x70
 80038a0:	e01c      	b.n	80038dc <HAL_RCC_OscConfig+0x324>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x30c>
 80038aa:	4b5f      	ldr	r3, [pc, #380]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	4a5e      	ldr	r2, [pc, #376]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038b0:	f043 0304 	orr.w	r3, r3, #4
 80038b4:	6713      	str	r3, [r2, #112]	; 0x70
 80038b6:	4b5c      	ldr	r3, [pc, #368]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	4a5b      	ldr	r2, [pc, #364]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	6713      	str	r3, [r2, #112]	; 0x70
 80038c2:	e00b      	b.n	80038dc <HAL_RCC_OscConfig+0x324>
 80038c4:	4b58      	ldr	r3, [pc, #352]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	4a57      	ldr	r2, [pc, #348]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038ca:	f023 0301 	bic.w	r3, r3, #1
 80038ce:	6713      	str	r3, [r2, #112]	; 0x70
 80038d0:	4b55      	ldr	r3, [pc, #340]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	4a54      	ldr	r2, [pc, #336]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038d6:	f023 0304 	bic.w	r3, r3, #4
 80038da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d015      	beq.n	8003910 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7fd fad8 	bl	8000e98 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ea:	e00a      	b.n	8003902 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ec:	f7fd fad4 	bl	8000e98 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e0cb      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003902:	4b49      	ldr	r3, [pc, #292]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0ee      	beq.n	80038ec <HAL_RCC_OscConfig+0x334>
 800390e:	e014      	b.n	800393a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003910:	f7fd fac2 	bl	8000e98 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003916:	e00a      	b.n	800392e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	f7fd fabe 	bl	8000e98 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e0b5      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392e:	4b3e      	ldr	r3, [pc, #248]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1ee      	bne.n	8003918 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800393a:	7dfb      	ldrb	r3, [r7, #23]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003940:	4b39      	ldr	r3, [pc, #228]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	4a38      	ldr	r2, [pc, #224]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80a1 	beq.w	8003a98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003956:	4b34      	ldr	r3, [pc, #208]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b08      	cmp	r3, #8
 8003960:	d05c      	beq.n	8003a1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d141      	bne.n	80039ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396a:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <HAL_RCC_OscConfig+0x478>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7fd fa92 	bl	8000e98 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003978:	f7fd fa8e 	bl	8000e98 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e087      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69da      	ldr	r2, [r3, #28]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	019b      	lsls	r3, r3, #6
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	3b01      	subs	r3, #1
 80039b0:	041b      	lsls	r3, r3, #16
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	061b      	lsls	r3, r3, #24
 80039ba:	491b      	ldr	r1, [pc, #108]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039c0:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <HAL_RCC_OscConfig+0x478>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c6:	f7fd fa67 	bl	8000e98 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ce:	f7fd fa63 	bl	8000e98 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e05c      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x416>
 80039ec:	e054      	b.n	8003a98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <HAL_RCC_OscConfig+0x478>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fd fa50 	bl	8000e98 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fc:	f7fd fa4c 	bl	8000e98 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e045      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0x444>
 8003a1a:	e03d      	b.n	8003a98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e038      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40007000 	.word	0x40007000
 8003a30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a34:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_RCC_OscConfig+0x4ec>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d028      	beq.n	8003a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d121      	bne.n	8003a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d11a      	bne.n	8003a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a64:	4013      	ands	r3, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d111      	bne.n	8003a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d107      	bne.n	8003a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40023800 	.word	0x40023800

08003aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0cc      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003abc:	4b68      	ldr	r3, [pc, #416]	; (8003c60 <HAL_RCC_ClockConfig+0x1b8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d90c      	bls.n	8003ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b65      	ldr	r3, [pc, #404]	; (8003c60 <HAL_RCC_ClockConfig+0x1b8>)
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad2:	4b63      	ldr	r3, [pc, #396]	; (8003c60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0b8      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d020      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003afc:	4b59      	ldr	r3, [pc, #356]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4a58      	ldr	r2, [pc, #352]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b14:	4b53      	ldr	r3, [pc, #332]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a52      	ldr	r2, [pc, #328]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b20:	4b50      	ldr	r3, [pc, #320]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	494d      	ldr	r1, [pc, #308]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d044      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d107      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	4b47      	ldr	r3, [pc, #284]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d119      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e07f      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b66:	4b3f      	ldr	r3, [pc, #252]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e06f      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b76:	4b3b      	ldr	r3, [pc, #236]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e067      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b86:	4b37      	ldr	r3, [pc, #220]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f023 0203 	bic.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4934      	ldr	r1, [pc, #208]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b98:	f7fd f97e 	bl	8000e98 <HAL_GetTick>
 8003b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba0:	f7fd f97a 	bl	8000e98 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e04f      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	4b2b      	ldr	r3, [pc, #172]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 020c 	and.w	r2, r3, #12
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d1eb      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <HAL_RCC_ClockConfig+0x1b8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d20c      	bcs.n	8003bf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b22      	ldr	r3, [pc, #136]	; (8003c60 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <HAL_RCC_ClockConfig+0x1b8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e032      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bfc:	4b19      	ldr	r3, [pc, #100]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4916      	ldr	r1, [pc, #88]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c1a:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	490e      	ldr	r1, [pc, #56]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c2e:	f000 f821 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8003c32:	4602      	mov	r2, r0
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	490a      	ldr	r1, [pc, #40]	; (8003c68 <HAL_RCC_ClockConfig+0x1c0>)
 8003c40:	5ccb      	ldrb	r3, [r1, r3]
 8003c42:	fa22 f303 	lsr.w	r3, r2, r3
 8003c46:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c4a:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <HAL_RCC_ClockConfig+0x1c8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fd f8de 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023c00 	.word	0x40023c00
 8003c64:	40023800 	.word	0x40023800
 8003c68:	0800bc68 	.word	0x0800bc68
 8003c6c:	20000000 	.word	0x20000000
 8003c70:	20000004 	.word	0x20000004

08003c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c78:	b094      	sub	sp, #80	; 0x50
 8003c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c80:	2300      	movs	r3, #0
 8003c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c84:	2300      	movs	r3, #0
 8003c86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c8c:	4b79      	ldr	r3, [pc, #484]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 030c 	and.w	r3, r3, #12
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d00d      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	f200 80e1 	bhi.w	8003e60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d003      	beq.n	8003cae <HAL_RCC_GetSysClockFreq+0x3a>
 8003ca6:	e0db      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ca8:	4b73      	ldr	r3, [pc, #460]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003caa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cac:	e0db      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cae:	4b73      	ldr	r3, [pc, #460]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x208>)
 8003cb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cb2:	e0d8      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cb4:	4b6f      	ldr	r3, [pc, #444]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cbe:	4b6d      	ldr	r3, [pc, #436]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d063      	beq.n	8003d92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cca:	4b6a      	ldr	r3, [pc, #424]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	099b      	lsrs	r3, r3, #6
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cde:	2300      	movs	r3, #0
 8003ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	462b      	mov	r3, r5
 8003cea:	f04f 0000 	mov.w	r0, #0
 8003cee:	f04f 0100 	mov.w	r1, #0
 8003cf2:	0159      	lsls	r1, r3, #5
 8003cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf8:	0150      	lsls	r0, r2, #5
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4621      	mov	r1, r4
 8003d00:	1a51      	subs	r1, r2, r1
 8003d02:	6139      	str	r1, [r7, #16]
 8003d04:	4629      	mov	r1, r5
 8003d06:	eb63 0301 	sbc.w	r3, r3, r1
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d18:	4659      	mov	r1, fp
 8003d1a:	018b      	lsls	r3, r1, #6
 8003d1c:	4651      	mov	r1, sl
 8003d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d22:	4651      	mov	r1, sl
 8003d24:	018a      	lsls	r2, r1, #6
 8003d26:	4651      	mov	r1, sl
 8003d28:	ebb2 0801 	subs.w	r8, r2, r1
 8003d2c:	4659      	mov	r1, fp
 8003d2e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d46:	4690      	mov	r8, r2
 8003d48:	4699      	mov	r9, r3
 8003d4a:	4623      	mov	r3, r4
 8003d4c:	eb18 0303 	adds.w	r3, r8, r3
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	462b      	mov	r3, r5
 8003d54:	eb49 0303 	adc.w	r3, r9, r3
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d66:	4629      	mov	r1, r5
 8003d68:	024b      	lsls	r3, r1, #9
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d70:	4621      	mov	r1, r4
 8003d72:	024a      	lsls	r2, r1, #9
 8003d74:	4610      	mov	r0, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d84:	f7fc fa74 	bl	8000270 <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d90:	e058      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d92:	4b38      	ldr	r3, [pc, #224]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	099b      	lsrs	r3, r3, #6
 8003d98:	2200      	movs	r2, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003da2:	623b      	str	r3, [r7, #32]
 8003da4:	2300      	movs	r3, #0
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
 8003da8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dac:	4642      	mov	r2, r8
 8003dae:	464b      	mov	r3, r9
 8003db0:	f04f 0000 	mov.w	r0, #0
 8003db4:	f04f 0100 	mov.w	r1, #0
 8003db8:	0159      	lsls	r1, r3, #5
 8003dba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dbe:	0150      	lsls	r0, r2, #5
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dca:	4649      	mov	r1, r9
 8003dcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ddc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003de0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003de4:	ebb2 040a 	subs.w	r4, r2, sl
 8003de8:	eb63 050b 	sbc.w	r5, r3, fp
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	00eb      	lsls	r3, r5, #3
 8003df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dfa:	00e2      	lsls	r2, r4, #3
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	461d      	mov	r5, r3
 8003e00:	4643      	mov	r3, r8
 8003e02:	18e3      	adds	r3, r4, r3
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	464b      	mov	r3, r9
 8003e08:	eb45 0303 	adc.w	r3, r5, r3
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	028b      	lsls	r3, r1, #10
 8003e1e:	4621      	mov	r1, r4
 8003e20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e24:	4621      	mov	r1, r4
 8003e26:	028a      	lsls	r2, r1, #10
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2e:	2200      	movs	r2, #0
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	61fa      	str	r2, [r7, #28]
 8003e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e38:	f7fc fa1a 	bl	8000270 <__aeabi_uldivmod>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4613      	mov	r3, r2
 8003e42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e5e:	e002      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3750      	adds	r7, #80	; 0x50
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800
 8003e78:	00f42400 	.word	0x00f42400
 8003e7c:	007a1200 	.word	0x007a1200

08003e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e86:	681b      	ldr	r3, [r3, #0]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000000 	.word	0x20000000

08003e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e9c:	f7ff fff0 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	0a9b      	lsrs	r3, r3, #10
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4903      	ldr	r1, [pc, #12]	; (8003ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	0800bc78 	.word	0x0800bc78

08003ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d105      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d035      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ee8:	4b62      	ldr	r3, [pc, #392]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eee:	f7fc ffd3 	bl	8000e98 <HAL_GetTick>
 8003ef2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ef6:	f7fc ffcf 	bl	8000e98 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e0b0      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f08:	4b5b      	ldr	r3, [pc, #364]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f0      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	019a      	lsls	r2, r3, #6
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	071b      	lsls	r3, r3, #28
 8003f20:	4955      	ldr	r1, [pc, #340]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f28:	4b52      	ldr	r3, [pc, #328]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f2e:	f7fc ffb3 	bl	8000e98 <HAL_GetTick>
 8003f32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f36:	f7fc ffaf 	bl	8000e98 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e090      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f48:	4b4b      	ldr	r3, [pc, #300]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8083 	beq.w	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	4b44      	ldr	r3, [pc, #272]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a43      	ldr	r2, [pc, #268]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
 8003f72:	4b41      	ldr	r3, [pc, #260]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f7e:	4b3f      	ldr	r3, [pc, #252]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a3e      	ldr	r2, [pc, #248]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f8a:	f7fc ff85 	bl	8000e98 <HAL_GetTick>
 8003f8e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f92:	f7fc ff81 	bl	8000e98 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e062      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fa4:	4b35      	ldr	r3, [pc, #212]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fb0:	4b31      	ldr	r3, [pc, #196]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d02f      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d028      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fce:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fd8:	4b29      	ldr	r3, [pc, #164]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fde:	4b28      	ldr	r3, [pc, #160]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003fe4:	4a24      	ldr	r2, [pc, #144]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fea:	4b23      	ldr	r3, [pc, #140]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d114      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ff6:	f7fc ff4f 	bl	8000e98 <HAL_GetTick>
 8003ffa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffc:	e00a      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ffe:	f7fc ff4b 	bl	8000e98 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	f241 3288 	movw	r2, #5000	; 0x1388
 800400c:	4293      	cmp	r3, r2
 800400e:	d901      	bls.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e02a      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004014:	4b18      	ldr	r3, [pc, #96]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0ee      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402c:	d10d      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800403e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004042:	490d      	ldr	r1, [pc, #52]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004044:	4313      	orrs	r3, r2
 8004046:	608b      	str	r3, [r1, #8]
 8004048:	e005      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004050:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004054:	6093      	str	r3, [r2, #8]
 8004056:	4b08      	ldr	r3, [pc, #32]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004058:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004062:	4905      	ldr	r1, [pc, #20]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004064:	4313      	orrs	r3, r2
 8004066:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	42470068 	.word	0x42470068
 8004078:	40023800 	.word	0x40023800
 800407c:	40007000 	.word	0x40007000
 8004080:	42470e40 	.word	0x42470e40

08004084 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d13e      	bne.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80040a2:	4b23      	ldr	r3, [pc, #140]	; (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d12f      	bne.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80040b8:	4b1e      	ldr	r3, [pc, #120]	; (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80040ba:	617b      	str	r3, [r7, #20]
          break;
 80040bc:	e02f      	b.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80040be:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ca:	d108      	bne.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80040cc:	4b18      	ldr	r3, [pc, #96]	; (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040d4:	4a18      	ldr	r2, [pc, #96]	; (8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80040d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	e007      	b.n	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80040de:	4b14      	ldr	r3, [pc, #80]	; (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e6:	4a15      	ldr	r2, [pc, #84]	; (800413c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80040ee:	4b10      	ldr	r3, [pc, #64]	; (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80040f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f4:	099b      	lsrs	r3, r3, #6
 80040f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	fb02 f303 	mul.w	r3, r2, r3
 8004100:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004102:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004108:	0f1b      	lsrs	r3, r3, #28
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	617b      	str	r3, [r7, #20]
          break;
 8004116:	e002      	b.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
          break;
 800411c:	bf00      	nop
        }
      }
      break;
 800411e:	bf00      	nop
    }
  }
  return frequency;
 8004120:	697b      	ldr	r3, [r7, #20]
}
 8004122:	4618      	mov	r0, r3
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800
 8004134:	00bb8000 	.word	0x00bb8000
 8004138:	007a1200 	.word	0x007a1200
 800413c:	00f42400 	.word	0x00f42400

08004140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e07b      	b.n	800424a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	2b00      	cmp	r3, #0
 8004158:	d108      	bne.n	800416c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004162:	d009      	beq.n	8004178 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	61da      	str	r2, [r3, #28]
 800416a:	e005      	b.n	8004178 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fc fd2c 	bl	8000bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fc:	ea42 0103 	orr.w	r1, r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	0c1b      	lsrs	r3, r3, #16
 8004216:	f003 0104 	and.w	r1, r3, #4
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	f003 0210 	and.w	r2, r3, #16
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69da      	ldr	r2, [r3, #28]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004238:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004252:	b084      	sub	sp, #16
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	f107 001c 	add.w	r0, r7, #28
 8004260:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	2b01      	cmp	r3, #1
 8004268:	d122      	bne.n	80042b0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800427e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d105      	bne.n	80042a4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f001 fbed 	bl	8005a84 <USB_CoreReset>
 80042aa:	4603      	mov	r3, r0
 80042ac:	73fb      	strb	r3, [r7, #15]
 80042ae:	e01a      	b.n	80042e6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f001 fbe1 	bl	8005a84 <USB_CoreReset>
 80042c2:	4603      	mov	r3, r0
 80042c4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	639a      	str	r2, [r3, #56]	; 0x38
 80042d8:	e005      	b.n	80042e6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d10b      	bne.n	8004304 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f043 0206 	orr.w	r2, r3, #6
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f043 0220 	orr.w	r2, r3, #32
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004304:	7bfb      	ldrb	r3, [r7, #15]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004310:	b004      	add	sp, #16
 8004312:	4770      	bx	lr

08004314 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	4613      	mov	r3, r2
 8004320:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d165      	bne.n	80043f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4a41      	ldr	r2, [pc, #260]	; (8004430 <USB_SetTurnaroundTime+0x11c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d906      	bls.n	800433e <USB_SetTurnaroundTime+0x2a>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4a40      	ldr	r2, [pc, #256]	; (8004434 <USB_SetTurnaroundTime+0x120>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d202      	bcs.n	800433e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004338:	230f      	movs	r3, #15
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e062      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4a3c      	ldr	r2, [pc, #240]	; (8004434 <USB_SetTurnaroundTime+0x120>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d306      	bcc.n	8004354 <USB_SetTurnaroundTime+0x40>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4a3b      	ldr	r2, [pc, #236]	; (8004438 <USB_SetTurnaroundTime+0x124>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d202      	bcs.n	8004354 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800434e:	230e      	movs	r3, #14
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	e057      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4a38      	ldr	r2, [pc, #224]	; (8004438 <USB_SetTurnaroundTime+0x124>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d306      	bcc.n	800436a <USB_SetTurnaroundTime+0x56>
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4a37      	ldr	r2, [pc, #220]	; (800443c <USB_SetTurnaroundTime+0x128>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d202      	bcs.n	800436a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004364:	230d      	movs	r3, #13
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e04c      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	4a33      	ldr	r2, [pc, #204]	; (800443c <USB_SetTurnaroundTime+0x128>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d306      	bcc.n	8004380 <USB_SetTurnaroundTime+0x6c>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	4a32      	ldr	r2, [pc, #200]	; (8004440 <USB_SetTurnaroundTime+0x12c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d802      	bhi.n	8004380 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800437a:	230c      	movs	r3, #12
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e041      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4a2f      	ldr	r2, [pc, #188]	; (8004440 <USB_SetTurnaroundTime+0x12c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d906      	bls.n	8004396 <USB_SetTurnaroundTime+0x82>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4a2e      	ldr	r2, [pc, #184]	; (8004444 <USB_SetTurnaroundTime+0x130>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d802      	bhi.n	8004396 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004390:	230b      	movs	r3, #11
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e036      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4a2a      	ldr	r2, [pc, #168]	; (8004444 <USB_SetTurnaroundTime+0x130>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d906      	bls.n	80043ac <USB_SetTurnaroundTime+0x98>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4a29      	ldr	r2, [pc, #164]	; (8004448 <USB_SetTurnaroundTime+0x134>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d802      	bhi.n	80043ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80043a6:	230a      	movs	r3, #10
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e02b      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4a26      	ldr	r2, [pc, #152]	; (8004448 <USB_SetTurnaroundTime+0x134>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d906      	bls.n	80043c2 <USB_SetTurnaroundTime+0xae>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4a25      	ldr	r2, [pc, #148]	; (800444c <USB_SetTurnaroundTime+0x138>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d202      	bcs.n	80043c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80043bc:	2309      	movs	r3, #9
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e020      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4a21      	ldr	r2, [pc, #132]	; (800444c <USB_SetTurnaroundTime+0x138>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d306      	bcc.n	80043d8 <USB_SetTurnaroundTime+0xc4>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4a20      	ldr	r2, [pc, #128]	; (8004450 <USB_SetTurnaroundTime+0x13c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d802      	bhi.n	80043d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80043d2:	2308      	movs	r3, #8
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e015      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4a1d      	ldr	r2, [pc, #116]	; (8004450 <USB_SetTurnaroundTime+0x13c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d906      	bls.n	80043ee <USB_SetTurnaroundTime+0xda>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4a1c      	ldr	r2, [pc, #112]	; (8004454 <USB_SetTurnaroundTime+0x140>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d202      	bcs.n	80043ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80043e8:	2307      	movs	r3, #7
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	e00a      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80043ee:	2306      	movs	r3, #6
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	e007      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d102      	bne.n	8004400 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80043fa:	2309      	movs	r3, #9
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	e001      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004400:	2309      	movs	r3, #9
 8004402:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	029b      	lsls	r3, r3, #10
 8004418:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800441c:	431a      	orrs	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	371c      	adds	r7, #28
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	00d8acbf 	.word	0x00d8acbf
 8004434:	00e4e1c0 	.word	0x00e4e1c0
 8004438:	00f42400 	.word	0x00f42400
 800443c:	01067380 	.word	0x01067380
 8004440:	011a499f 	.word	0x011a499f
 8004444:	01312cff 	.word	0x01312cff
 8004448:	014ca43f 	.word	0x014ca43f
 800444c:	016e3600 	.word	0x016e3600
 8004450:	01a6ab1f 	.word	0x01a6ab1f
 8004454:	01e84800 	.word	0x01e84800

08004458 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f043 0201 	orr.w	r2, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f023 0201 	bic.w	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d115      	bne.n	80044ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044ca:	2001      	movs	r0, #1
 80044cc:	f7fc fcf0 	bl	8000eb0 <HAL_Delay>
      ms++;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3301      	adds	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f001 fa45 	bl	8005966 <USB_GetMode>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d01e      	beq.n	8004520 <USB_SetCurrentMode+0x84>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b31      	cmp	r3, #49	; 0x31
 80044e6:	d9f0      	bls.n	80044ca <USB_SetCurrentMode+0x2e>
 80044e8:	e01a      	b.n	8004520 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80044ea:	78fb      	ldrb	r3, [r7, #3]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d115      	bne.n	800451c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044fc:	2001      	movs	r0, #1
 80044fe:	f7fc fcd7 	bl	8000eb0 <HAL_Delay>
      ms++;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3301      	adds	r3, #1
 8004506:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f001 fa2c 	bl	8005966 <USB_GetMode>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <USB_SetCurrentMode+0x84>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b31      	cmp	r3, #49	; 0x31
 8004518:	d9f0      	bls.n	80044fc <USB_SetCurrentMode+0x60>
 800451a:	e001      	b.n	8004520 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e005      	b.n	800452c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b32      	cmp	r3, #50	; 0x32
 8004524:	d101      	bne.n	800452a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004534:	b084      	sub	sp, #16
 8004536:	b580      	push	{r7, lr}
 8004538:	b086      	sub	sp, #24
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800454e:	2300      	movs	r3, #0
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	e009      	b.n	8004568 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	3340      	adds	r3, #64	; 0x40
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	2200      	movs	r2, #0
 8004560:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	3301      	adds	r3, #1
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b0e      	cmp	r3, #14
 800456c:	d9f2      	bls.n	8004554 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800456e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d11c      	bne.n	80045ae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004582:	f043 0302 	orr.w	r3, r3, #2
 8004586:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	639a      	str	r2, [r3, #56]	; 0x38
 80045ac:	e00b      	b.n	80045c6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045cc:	461a      	mov	r2, r3
 80045ce:	2300      	movs	r3, #0
 80045d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d8:	4619      	mov	r1, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e0:	461a      	mov	r2, r3
 80045e2:	680b      	ldr	r3, [r1, #0]
 80045e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10c      	bne.n	8004606 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d104      	bne.n	80045fc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045f2:	2100      	movs	r1, #0
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f965 	bl	80048c4 <USB_SetDevSpeed>
 80045fa:	e008      	b.n	800460e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045fc:	2101      	movs	r1, #1
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f960 	bl	80048c4 <USB_SetDevSpeed>
 8004604:	e003      	b.n	800460e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004606:	2103      	movs	r1, #3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f95b 	bl	80048c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800460e:	2110      	movs	r1, #16
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f8f3 	bl	80047fc <USB_FlushTxFifo>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f91f 	bl	8004864 <USB_FlushRxFifo>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004636:	461a      	mov	r2, r3
 8004638:	2300      	movs	r3, #0
 800463a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004642:	461a      	mov	r2, r3
 8004644:	2300      	movs	r3, #0
 8004646:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464e:	461a      	mov	r2, r3
 8004650:	2300      	movs	r3, #0
 8004652:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	e043      	b.n	80046e2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800466c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004670:	d118      	bne.n	80046a4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004684:	461a      	mov	r2, r3
 8004686:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	e013      	b.n	80046b6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469a:	461a      	mov	r2, r3
 800469c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e008      	b.n	80046b6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b0:	461a      	mov	r2, r3
 80046b2:	2300      	movs	r3, #0
 80046b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c2:	461a      	mov	r2, r3
 80046c4:	2300      	movs	r3, #0
 80046c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d4:	461a      	mov	r2, r3
 80046d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	3301      	adds	r3, #1
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d3b7      	bcc.n	800465a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ea:	2300      	movs	r3, #0
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	e043      	b.n	8004778 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004706:	d118      	bne.n	800473a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471a:	461a      	mov	r2, r3
 800471c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e013      	b.n	800474c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004730:	461a      	mov	r2, r3
 8004732:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	e008      	b.n	800474c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004746:	461a      	mov	r2, r3
 8004748:	2300      	movs	r3, #0
 800474a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004758:	461a      	mov	r2, r3
 800475a:	2300      	movs	r3, #0
 800475c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	461a      	mov	r2, r3
 800476c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004770:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	3301      	adds	r3, #1
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	429a      	cmp	r2, r3
 800477e:	d3b7      	bcc.n	80046f0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800478e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004792:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d105      	bne.n	80047b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f043 0210 	orr.w	r2, r3, #16
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699a      	ldr	r2, [r3, #24]
 80047b8:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <USB_DevInit+0x2c4>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f043 0208 	orr.w	r2, r3, #8
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d107      	bne.n	80047e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047e0:	f043 0304 	orr.w	r3, r3, #4
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047f4:	b004      	add	sp, #16
 80047f6:	4770      	bx	lr
 80047f8:	803c3800 	.word	0x803c3800

080047fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4a13      	ldr	r2, [pc, #76]	; (8004860 <USB_FlushTxFifo+0x64>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e01b      	b.n	8004854 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	daf2      	bge.n	800480a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	019b      	lsls	r3, r3, #6
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3301      	adds	r3, #1
 8004838:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4a08      	ldr	r2, [pc, #32]	; (8004860 <USB_FlushTxFifo+0x64>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d901      	bls.n	8004846 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e006      	b.n	8004854 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b20      	cmp	r3, #32
 8004850:	d0f0      	beq.n	8004834 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	00030d40 	.word	0x00030d40

08004864 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3301      	adds	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4a11      	ldr	r2, [pc, #68]	; (80048c0 <USB_FlushRxFifo+0x5c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e018      	b.n	80048b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	daf2      	bge.n	8004870 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2210      	movs	r2, #16
 8004892:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3301      	adds	r3, #1
 8004898:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4a08      	ldr	r2, [pc, #32]	; (80048c0 <USB_FlushRxFifo+0x5c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e006      	b.n	80048b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b10      	cmp	r3, #16
 80048b0:	d0f0      	beq.n	8004894 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	00030d40 	.word	0x00030d40

080048c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	68f9      	ldr	r1, [r7, #12]
 80048e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048e4:	4313      	orrs	r3, r2
 80048e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b087      	sub	sp, #28
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0306 	and.w	r3, r3, #6
 800490e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004916:	2300      	movs	r3, #0
 8004918:	75fb      	strb	r3, [r7, #23]
 800491a:	e00a      	b.n	8004932 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d002      	beq.n	8004928 <USB_GetDevSpeed+0x32>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b06      	cmp	r3, #6
 8004926:	d102      	bne.n	800492e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004928:	2302      	movs	r3, #2
 800492a:	75fb      	strb	r3, [r7, #23]
 800492c:	e001      	b.n	8004932 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800492e:	230f      	movs	r3, #15
 8004930:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004932:	7dfb      	ldrb	r3, [r7, #23]
}
 8004934:	4618      	mov	r0, r3
 8004936:	371c      	adds	r7, #28
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d13a      	bne.n	80049d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004962:	69da      	ldr	r2, [r3, #28]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	2101      	movs	r1, #1
 800496e:	fa01 f303 	lsl.w	r3, r1, r3
 8004972:	b29b      	uxth	r3, r3
 8004974:	68f9      	ldr	r1, [r7, #12]
 8004976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800497a:	4313      	orrs	r3, r2
 800497c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d155      	bne.n	8004a40 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	791b      	ldrb	r3, [r3, #4]
 80049ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	059b      	lsls	r3, r3, #22
 80049b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049b8:	4313      	orrs	r3, r2
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	0151      	lsls	r1, r2, #5
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	440a      	add	r2, r1
 80049c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	e036      	b.n	8004a40 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d8:	69da      	ldr	r2, [r3, #28]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	2101      	movs	r1, #1
 80049e4:	fa01 f303 	lsl.w	r3, r1, r3
 80049e8:	041b      	lsls	r3, r3, #16
 80049ea:	68f9      	ldr	r1, [r7, #12]
 80049ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d11a      	bne.n	8004a40 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	791b      	ldrb	r3, [r3, #4]
 8004a24:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a26:	430b      	orrs	r3, r1
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
	...

08004a50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d161      	bne.n	8004b30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a82:	d11f      	bne.n	8004ac4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	0151      	lsls	r1, r2, #5
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	440a      	add	r2, r1
 8004a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004aa2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	0151      	lsls	r1, r2, #5
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	440a      	add	r2, r1
 8004aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ac2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	68f9      	ldr	r1, [r7, #12]
 8004ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	2101      	movs	r1, #1
 8004afa:	fa01 f303 	lsl.w	r3, r1, r3
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	43db      	mvns	r3, r3
 8004b02:	68f9      	ldr	r1, [r7, #12]
 8004b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b08:	4013      	ands	r3, r2
 8004b0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	0159      	lsls	r1, r3, #5
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	440b      	add	r3, r1
 8004b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b26:	4619      	mov	r1, r3
 8004b28:	4b35      	ldr	r3, [pc, #212]	; (8004c00 <USB_DeactivateEndpoint+0x1b0>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]
 8004b2e:	e060      	b.n	8004bf2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b46:	d11f      	bne.n	8004b88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	0151      	lsls	r1, r2, #5
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	440a      	add	r2, r1
 8004b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	2101      	movs	r1, #1
 8004b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9e:	041b      	lsls	r3, r3, #16
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	68f9      	ldr	r1, [r7, #12]
 8004ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ba8:	4013      	ands	r3, r2
 8004baa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc2:	041b      	lsls	r3, r3, #16
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	68f9      	ldr	r1, [r7, #12]
 8004bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bcc:	4013      	ands	r3, r2
 8004bce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	0159      	lsls	r1, r3, #5
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	440b      	add	r3, r1
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	4619      	mov	r1, r3
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <USB_DeactivateEndpoint+0x1b4>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	ec337800 	.word	0xec337800
 8004c04:	eff37800 	.word	0xeff37800

08004c08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	4613      	mov	r3, r2
 8004c14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	f040 815c 	bne.w	8004ee2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d132      	bne.n	8004c98 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	0151      	lsls	r1, r2, #5
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	440a      	add	r2, r1
 8004c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	0151      	lsls	r1, r2, #5
 8004c68:	69fa      	ldr	r2, [r7, #28]
 8004c6a:	440a      	add	r2, r1
 8004c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c90:	0cdb      	lsrs	r3, r3, #19
 8004c92:	04db      	lsls	r3, r3, #19
 8004c94:	6113      	str	r3, [r2, #16]
 8004c96:	e074      	b.n	8004d82 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	0151      	lsls	r1, r2, #5
 8004caa:	69fa      	ldr	r2, [r7, #28]
 8004cac:	440a      	add	r2, r1
 8004cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb2:	0cdb      	lsrs	r3, r3, #19
 8004cb4:	04db      	lsls	r3, r3, #19
 8004cb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	0151      	lsls	r1, r2, #5
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	440a      	add	r2, r1
 8004cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	6999      	ldr	r1, [r3, #24]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	440b      	add	r3, r1
 8004cf4:	1e59      	subs	r1, r3, #1
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cfe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d00:	4b9d      	ldr	r3, [pc, #628]	; (8004f78 <USB_EPStartXfer+0x370>)
 8004d02:	400b      	ands	r3, r1
 8004d04:	69b9      	ldr	r1, [r7, #24]
 8004d06:	0148      	lsls	r0, r1, #5
 8004d08:	69f9      	ldr	r1, [r7, #28]
 8004d0a:	4401      	add	r1, r0
 8004d0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d10:	4313      	orrs	r3, r2
 8004d12:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d2a:	69b9      	ldr	r1, [r7, #24]
 8004d2c:	0148      	lsls	r0, r1, #5
 8004d2e:	69f9      	ldr	r1, [r7, #28]
 8004d30:	4401      	add	r1, r0
 8004d32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d36:	4313      	orrs	r3, r2
 8004d38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	791b      	ldrb	r3, [r3, #4]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d11f      	bne.n	8004d82 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	0151      	lsls	r1, r2, #5
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	440a      	add	r2, r1
 8004d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004d60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	0151      	lsls	r1, r2, #5
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	440a      	add	r2, r1
 8004d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d14b      	bne.n	8004e20 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	791b      	ldrb	r3, [r3, #4]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d128      	bne.n	8004dfe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d110      	bne.n	8004dde <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	0151      	lsls	r1, r2, #5
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	440a      	add	r2, r1
 8004dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	e00f      	b.n	8004dfe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	0151      	lsls	r1, r2, #5
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	440a      	add	r2, r1
 8004df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	e133      	b.n	8005088 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	791b      	ldrb	r3, [r3, #4]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d015      	beq.n	8004e74 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 811b 	beq.w	8005088 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	2101      	movs	r1, #1
 8004e64:	fa01 f303 	lsl.w	r3, r1, r3
 8004e68:	69f9      	ldr	r1, [r7, #28]
 8004e6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	634b      	str	r3, [r1, #52]	; 0x34
 8004e72:	e109      	b.n	8005088 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d110      	bne.n	8004ea6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	0151      	lsls	r1, r2, #5
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	440a      	add	r2, r1
 8004e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	e00f      	b.n	8004ec6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	0151      	lsls	r1, r2, #5
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	440a      	add	r2, r1
 8004ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	6919      	ldr	r1, [r3, #16]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	781a      	ldrb	r2, [r3, #0]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	b298      	uxth	r0, r3
 8004ed4:	79fb      	ldrb	r3, [r7, #7]
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	4603      	mov	r3, r0
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fade 	bl	800549c <USB_WritePacket>
 8004ee0:	e0d2      	b.n	8005088 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efc:	0cdb      	lsrs	r3, r3, #19
 8004efe:	04db      	lsls	r3, r3, #19
 8004f00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d126      	bne.n	8004f7c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f44:	69b9      	ldr	r1, [r7, #24]
 8004f46:	0148      	lsls	r0, r1, #5
 8004f48:	69f9      	ldr	r1, [r7, #28]
 8004f4a:	4401      	add	r1, r0
 8004f4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f50:	4313      	orrs	r3, r2
 8004f52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f72:	6113      	str	r3, [r2, #16]
 8004f74:	e03a      	b.n	8004fec <USB_EPStartXfer+0x3e4>
 8004f76:	bf00      	nop
 8004f78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4413      	add	r3, r2
 8004f86:	1e5a      	subs	r2, r3, #1
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f90:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	8afa      	ldrh	r2, [r7, #22]
 8004f98:	fb03 f202 	mul.w	r2, r3, r2
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	8afb      	ldrh	r3, [r7, #22]
 8004fb0:	04d9      	lsls	r1, r3, #19
 8004fb2:	4b38      	ldr	r3, [pc, #224]	; (8005094 <USB_EPStartXfer+0x48c>)
 8004fb4:	400b      	ands	r3, r1
 8004fb6:	69b9      	ldr	r1, [r7, #24]
 8004fb8:	0148      	lsls	r0, r1, #5
 8004fba:	69f9      	ldr	r1, [r7, #28]
 8004fbc:	4401      	add	r1, r0
 8004fbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fdc:	69b9      	ldr	r1, [r7, #24]
 8004fde:	0148      	lsls	r0, r1, #5
 8004fe0:	69f9      	ldr	r1, [r7, #28]
 8004fe2:	4401      	add	r1, r0
 8004fe4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d10d      	bne.n	800500e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d009      	beq.n	800500e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	6919      	ldr	r1, [r3, #16]
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500a:	460a      	mov	r2, r1
 800500c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	791b      	ldrb	r3, [r3, #4]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d128      	bne.n	8005068 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	2b00      	cmp	r3, #0
 8005024:	d110      	bne.n	8005048 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	0151      	lsls	r1, r2, #5
 8005038:	69fa      	ldr	r2, [r7, #28]
 800503a:	440a      	add	r2, r1
 800503c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005040:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e00f      	b.n	8005068 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005066:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	0151      	lsls	r1, r2, #5
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	440a      	add	r2, r1
 800507e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005082:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005086:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3720      	adds	r7, #32
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	1ff80000 	.word	0x1ff80000

08005098 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	4613      	mov	r3, r2
 80050a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	f040 80ce 	bne.w	8005256 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d132      	bne.n	8005128 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	0151      	lsls	r1, r2, #5
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	440a      	add	r2, r1
 80050d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	0151      	lsls	r1, r2, #5
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	440a      	add	r2, r1
 80050fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005100:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005104:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005120:	0cdb      	lsrs	r3, r3, #19
 8005122:	04db      	lsls	r3, r3, #19
 8005124:	6113      	str	r3, [r2, #16]
 8005126:	e04e      	b.n	80051c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	440a      	add	r2, r1
 800513e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005142:	0cdb      	lsrs	r3, r3, #19
 8005144:	04db      	lsls	r3, r3, #19
 8005146:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	440a      	add	r2, r1
 800515e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005162:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005166:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800516a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	699a      	ldr	r2, [r3, #24]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	429a      	cmp	r2, r3
 8005176:	d903      	bls.n	8005180 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800519e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b6:	6939      	ldr	r1, [r7, #16]
 80051b8:	0148      	lsls	r0, r1, #5
 80051ba:	6979      	ldr	r1, [r7, #20]
 80051bc:	4401      	add	r1, r0
 80051be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051c2:	4313      	orrs	r3, r2
 80051c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d11e      	bne.n	800520a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d009      	beq.n	80051e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	461a      	mov	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005202:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	e097      	b.n	800533a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	440a      	add	r2, r1
 8005220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005224:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005228:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 8083 	beq.w	800533a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	f003 030f 	and.w	r3, r3, #15
 8005244:	2101      	movs	r1, #1
 8005246:	fa01 f303 	lsl.w	r3, r1, r3
 800524a:	6979      	ldr	r1, [r7, #20]
 800524c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005250:	4313      	orrs	r3, r2
 8005252:	634b      	str	r3, [r1, #52]	; 0x34
 8005254:	e071      	b.n	800533a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	440a      	add	r2, r1
 800526c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005270:	0cdb      	lsrs	r3, r3, #19
 8005272:	04db      	lsls	r3, r3, #19
 8005274:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	440a      	add	r2, r1
 800528c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005290:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005294:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005298:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e8:	6939      	ldr	r1, [r7, #16]
 80052ea:	0148      	lsls	r0, r1, #5
 80052ec:	6979      	ldr	r1, [r7, #20]
 80052ee:	4401      	add	r1, r0
 80052f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052f4:	4313      	orrs	r3, r2
 80052f6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80052f8:	79fb      	ldrb	r3, [r7, #7]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d10d      	bne.n	800531a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	6919      	ldr	r1, [r3, #16]
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005316:	460a      	mov	r2, r1
 8005318:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	440a      	add	r2, r1
 8005330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005334:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005338:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	785b      	ldrb	r3, [r3, #1]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d14a      	bne.n	80053fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800537a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800537e:	f040 8086 	bne.w	800548e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	7812      	ldrb	r2, [r2, #0]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	440a      	add	r2, r1
 800539c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	7812      	ldrb	r2, [r2, #0]
 80053ba:	0151      	lsls	r1, r2, #5
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	440a      	add	r2, r1
 80053c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3301      	adds	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d902      	bls.n	80053e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	75fb      	strb	r3, [r7, #23]
          break;
 80053de:	e056      	b.n	800548e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f8:	d0e7      	beq.n	80053ca <USB_EPStopXfer+0x82>
 80053fa:	e048      	b.n	800548e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005414:	d13b      	bne.n	800548e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	7812      	ldrb	r2, [r2, #0]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	440a      	add	r2, r1
 8005430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005434:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005438:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	7812      	ldrb	r2, [r2, #0]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	440a      	add	r2, r1
 8005454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005458:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800545c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3301      	adds	r3, #1
 8005462:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f242 7210 	movw	r2, #10000	; 0x2710
 800546a:	4293      	cmp	r3, r2
 800546c:	d902      	bls.n	8005474 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	75fb      	strb	r3, [r7, #23]
          break;
 8005472:	e00c      	b.n	800548e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800548c:	d0e7      	beq.n	800545e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800548e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005490:	4618      	mov	r0, r3
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800549c:	b480      	push	{r7}
 800549e:	b089      	sub	sp, #36	; 0x24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	4611      	mov	r1, r2
 80054a8:	461a      	mov	r2, r3
 80054aa:	460b      	mov	r3, r1
 80054ac:	71fb      	strb	r3, [r7, #7]
 80054ae:	4613      	mov	r3, r2
 80054b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80054ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d123      	bne.n	800550a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80054c2:	88bb      	ldrh	r3, [r7, #4]
 80054c4:	3303      	adds	r3, #3
 80054c6:	089b      	lsrs	r3, r3, #2
 80054c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80054ca:	2300      	movs	r3, #0
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	e018      	b.n	8005502 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80054d0:	79fb      	ldrb	r3, [r7, #7]
 80054d2:	031a      	lsls	r2, r3, #12
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054dc:	461a      	mov	r2, r3
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	3301      	adds	r3, #1
 80054e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	3301      	adds	r3, #1
 80054ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	3301      	adds	r3, #1
 80054f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	3301      	adds	r3, #1
 80054fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	3301      	adds	r3, #1
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	429a      	cmp	r2, r3
 8005508:	d3e2      	bcc.n	80054d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3724      	adds	r7, #36	; 0x24
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005518:	b480      	push	{r7}
 800551a:	b08b      	sub	sp, #44	; 0x2c
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	4613      	mov	r3, r2
 8005524:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	089b      	lsrs	r3, r3, #2
 8005532:	b29b      	uxth	r3, r3
 8005534:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005536:	88fb      	ldrh	r3, [r7, #6]
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800553e:	2300      	movs	r3, #0
 8005540:	623b      	str	r3, [r7, #32]
 8005542:	e014      	b.n	800556e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	3301      	adds	r3, #1
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	3301      	adds	r3, #1
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	3301      	adds	r3, #1
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	3301      	adds	r3, #1
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	3301      	adds	r3, #1
 800556c:	623b      	str	r3, [r7, #32]
 800556e:	6a3a      	ldr	r2, [r7, #32]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	429a      	cmp	r2, r3
 8005574:	d3e6      	bcc.n	8005544 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005576:	8bfb      	ldrh	r3, [r7, #30]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01e      	beq.n	80055ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005586:	461a      	mov	r2, r3
 8005588:	f107 0310 	add.w	r3, r7, #16
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
 800559c:	b2da      	uxtb	r2, r3
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	701a      	strb	r2, [r3, #0]
      i++;
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	3301      	adds	r3, #1
 80055a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	3301      	adds	r3, #1
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80055ae:	8bfb      	ldrh	r3, [r7, #30]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80055b4:	8bfb      	ldrh	r3, [r7, #30]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1ea      	bne.n	8005590 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055bc:	4618      	mov	r0, r3
 80055be:	372c      	adds	r7, #44	; 0x2c
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d12c      	bne.n	800563e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	db12      	blt.n	800561c <USB_EPSetStall+0x54>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00f      	beq.n	800561c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	0151      	lsls	r1, r2, #5
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	440a      	add	r2, r1
 8005612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005616:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800561a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	0151      	lsls	r1, r2, #5
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	440a      	add	r2, r1
 8005632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005636:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	e02b      	b.n	8005696 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	db12      	blt.n	8005676 <USB_EPSetStall+0xae>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00f      	beq.n	8005676 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005670:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005674:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	0151      	lsls	r1, r2, #5
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	440a      	add	r2, r1
 800568c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005694:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d128      	bne.n	8005712 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	791b      	ldrb	r3, [r3, #4]
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d003      	beq.n	80056f0 <USB_EPClearStall+0x4c>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	791b      	ldrb	r3, [r3, #4]
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d138      	bne.n	8005762 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	440a      	add	r2, r1
 8005706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	e027      	b.n	8005762 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	0151      	lsls	r1, r2, #5
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	440a      	add	r2, r1
 8005728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800572c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005730:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	791b      	ldrb	r3, [r3, #4]
 8005736:	2b03      	cmp	r3, #3
 8005738:	d003      	beq.n	8005742 <USB_EPClearStall+0x9e>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	791b      	ldrb	r3, [r3, #4]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d10f      	bne.n	8005762 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	0151      	lsls	r1, r2, #5
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	440a      	add	r2, r1
 8005758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005760:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800578e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005792:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80057a4:	68f9      	ldr	r1, [r7, #12]
 80057a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057aa:	4313      	orrs	r3, r2
 80057ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057d6:	f023 0303 	bic.w	r3, r3, #3
 80057da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ea:	f023 0302 	bic.w	r3, r3, #2
 80057ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057fe:	b480      	push	{r7}
 8005800:	b085      	sub	sp, #20
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005818:	f023 0303 	bic.w	r3, r3, #3
 800581c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800582c:	f043 0302 	orr.w	r3, r3, #2
 8005830:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4013      	ands	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005858:	68fb      	ldr	r3, [r7, #12]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005866:	b480      	push	{r7}
 8005868:	b085      	sub	sp, #20
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	4013      	ands	r3, r2
 8005888:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	0c1b      	lsrs	r3, r3, #16
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	4013      	ands	r3, r2
 80058bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	b29b      	uxth	r3, r3
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b085      	sub	sp, #20
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	460b      	mov	r3, r1
 80058d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	4013      	ands	r3, r2
 80058fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058fc:	68bb      	ldr	r3, [r7, #8]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800590a:	b480      	push	{r7}
 800590c:	b087      	sub	sp, #28
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	460b      	mov	r3, r1
 8005914:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	fa22 f303 	lsr.w	r3, r2, r3
 800593a:	01db      	lsls	r3, r3, #7
 800593c:	b2db      	uxtb	r3, r3
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4013      	ands	r3, r2
 8005956:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005958:	68bb      	ldr	r3, [r7, #8]
}
 800595a:	4618      	mov	r0, r3
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f003 0301 	and.w	r3, r3, #1
}
 8005976:	4618      	mov	r0, r3
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005982:	b480      	push	{r7}
 8005984:	b085      	sub	sp, #20
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800599c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80059a0:	f023 0307 	bic.w	r3, r3, #7
 80059a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	460b      	mov	r3, r1
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	333c      	adds	r3, #60	; 0x3c
 80059de:	3304      	adds	r3, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4a26      	ldr	r2, [pc, #152]	; (8005a80 <USB_EP0_OutStart+0xb8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d90a      	bls.n	8005a02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059fc:	d101      	bne.n	8005a02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	e037      	b.n	8005a72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	461a      	mov	r2, r3
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a30:	f043 0318 	orr.w	r3, r3, #24
 8005a34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005a48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005a4a:	7afb      	ldrb	r3, [r7, #11]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d10f      	bne.n	8005a70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a56:	461a      	mov	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005a6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	4f54300a 	.word	0x4f54300a

08005a84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3301      	adds	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4a13      	ldr	r2, [pc, #76]	; (8005ae8 <USB_CoreReset+0x64>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d901      	bls.n	8005aa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e01b      	b.n	8005ada <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	daf2      	bge.n	8005a90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f043 0201 	orr.w	r2, r3, #1
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3301      	adds	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4a09      	ldr	r2, [pc, #36]	; (8005ae8 <USB_CoreReset+0x64>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d901      	bls.n	8005acc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e006      	b.n	8005ada <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d0f0      	beq.n	8005aba <USB_CoreReset+0x36>

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	00030d40 	.word	0x00030d40

08005aec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005af8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005afc:	f002 fcda 	bl	80084b4 <USBD_static_malloc>
 8005b00:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d109      	bne.n	8005b1c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	32b0      	adds	r2, #176	; 0xb0
 8005b12:	2100      	movs	r1, #0
 8005b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e0d4      	b.n	8005cc6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005b1c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005b20:	2100      	movs	r1, #0
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f004 fe7c 	bl	800a820 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	32b0      	adds	r2, #176	; 0xb0
 8005b32:	68f9      	ldr	r1, [r7, #12]
 8005b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	32b0      	adds	r2, #176	; 0xb0
 8005b42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	7c1b      	ldrb	r3, [r3, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d138      	bne.n	8005bc6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005b54:	4b5e      	ldr	r3, [pc, #376]	; (8005cd0 <USBD_CDC_Init+0x1e4>)
 8005b56:	7819      	ldrb	r1, [r3, #0]
 8005b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f002 fb85 	bl	800826e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005b64:	4b5a      	ldr	r3, [pc, #360]	; (8005cd0 <USBD_CDC_Init+0x1e4>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f003 020f 	and.w	r2, r3, #15
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	3324      	adds	r3, #36	; 0x24
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005b7e:	4b55      	ldr	r3, [pc, #340]	; (8005cd4 <USBD_CDC_Init+0x1e8>)
 8005b80:	7819      	ldrb	r1, [r3, #0]
 8005b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b86:	2202      	movs	r2, #2
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f002 fb70 	bl	800826e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005b8e:	4b51      	ldr	r3, [pc, #324]	; (8005cd4 <USBD_CDC_Init+0x1e8>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	f003 020f 	and.w	r2, r3, #15
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005baa:	4b4b      	ldr	r3, [pc, #300]	; (8005cd8 <USBD_CDC_Init+0x1ec>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	f003 020f 	and.w	r2, r3, #15
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	3326      	adds	r3, #38	; 0x26
 8005bc0:	2210      	movs	r2, #16
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	e035      	b.n	8005c32 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005bc6:	4b42      	ldr	r3, [pc, #264]	; (8005cd0 <USBD_CDC_Init+0x1e4>)
 8005bc8:	7819      	ldrb	r1, [r3, #0]
 8005bca:	2340      	movs	r3, #64	; 0x40
 8005bcc:	2202      	movs	r2, #2
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f002 fb4d 	bl	800826e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005bd4:	4b3e      	ldr	r3, [pc, #248]	; (8005cd0 <USBD_CDC_Init+0x1e4>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	f003 020f 	and.w	r2, r3, #15
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	3324      	adds	r3, #36	; 0x24
 8005bea:	2201      	movs	r2, #1
 8005bec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005bee:	4b39      	ldr	r3, [pc, #228]	; (8005cd4 <USBD_CDC_Init+0x1e8>)
 8005bf0:	7819      	ldrb	r1, [r3, #0]
 8005bf2:	2340      	movs	r3, #64	; 0x40
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f002 fb39 	bl	800826e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005bfc:	4b35      	ldr	r3, [pc, #212]	; (8005cd4 <USBD_CDC_Init+0x1e8>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	f003 020f 	and.w	r2, r3, #15
 8005c04:	6879      	ldr	r1, [r7, #4]
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	440b      	add	r3, r1
 8005c10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c14:	2201      	movs	r2, #1
 8005c16:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005c18:	4b2f      	ldr	r3, [pc, #188]	; (8005cd8 <USBD_CDC_Init+0x1ec>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f003 020f 	and.w	r2, r3, #15
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	440b      	add	r3, r1
 8005c2c:	3326      	adds	r3, #38	; 0x26
 8005c2e:	2210      	movs	r2, #16
 8005c30:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c32:	4b29      	ldr	r3, [pc, #164]	; (8005cd8 <USBD_CDC_Init+0x1ec>)
 8005c34:	7819      	ldrb	r1, [r3, #0]
 8005c36:	2308      	movs	r3, #8
 8005c38:	2203      	movs	r2, #3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f002 fb17 	bl	800826e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005c40:	4b25      	ldr	r3, [pc, #148]	; (8005cd8 <USBD_CDC_Init+0x1ec>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	f003 020f 	and.w	r2, r3, #15
 8005c48:	6879      	ldr	r1, [r7, #4]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	440b      	add	r3, r1
 8005c54:	3324      	adds	r3, #36	; 0x24
 8005c56:	2201      	movs	r2, #1
 8005c58:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	33b0      	adds	r3, #176	; 0xb0
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005c90:	2302      	movs	r3, #2
 8005c92:	e018      	b.n	8005cc6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	7c1b      	ldrb	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10a      	bne.n	8005cb2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c9c:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <USBD_CDC_Init+0x1e8>)
 8005c9e:	7819      	ldrb	r1, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f002 fbce 	bl	800844c <USBD_LL_PrepareReceive>
 8005cb0:	e008      	b.n	8005cc4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005cb2:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <USBD_CDC_Init+0x1e8>)
 8005cb4:	7819      	ldrb	r1, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cbc:	2340      	movs	r3, #64	; 0x40
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f002 fbc4 	bl	800844c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000093 	.word	0x20000093
 8005cd4:	20000094 	.word	0x20000094
 8005cd8:	20000095 	.word	0x20000095

08005cdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005ce8:	4b3a      	ldr	r3, [pc, #232]	; (8005dd4 <USBD_CDC_DeInit+0xf8>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f002 fae3 	bl	80082ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005cf4:	4b37      	ldr	r3, [pc, #220]	; (8005dd4 <USBD_CDC_DeInit+0xf8>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	f003 020f 	and.w	r2, r3, #15
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	3324      	adds	r3, #36	; 0x24
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005d0e:	4b32      	ldr	r3, [pc, #200]	; (8005dd8 <USBD_CDC_DeInit+0xfc>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f002 fad0 	bl	80082ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005d1a:	4b2f      	ldr	r3, [pc, #188]	; (8005dd8 <USBD_CDC_DeInit+0xfc>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	f003 020f 	and.w	r2, r3, #15
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d32:	2200      	movs	r2, #0
 8005d34:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005d36:	4b29      	ldr	r3, [pc, #164]	; (8005ddc <USBD_CDC_DeInit+0x100>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f002 fabc 	bl	80082ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005d42:	4b26      	ldr	r3, [pc, #152]	; (8005ddc <USBD_CDC_DeInit+0x100>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	f003 020f 	and.w	r2, r3, #15
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	3324      	adds	r3, #36	; 0x24
 8005d58:	2200      	movs	r2, #0
 8005d5a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005d5c:	4b1f      	ldr	r3, [pc, #124]	; (8005ddc <USBD_CDC_DeInit+0x100>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	f003 020f 	and.w	r2, r3, #15
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	3326      	adds	r3, #38	; 0x26
 8005d72:	2200      	movs	r2, #0
 8005d74:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	32b0      	adds	r2, #176	; 0xb0
 8005d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01f      	beq.n	8005dc8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	33b0      	adds	r3, #176	; 0xb0
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	32b0      	adds	r2, #176	; 0xb0
 8005da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f002 fb90 	bl	80084d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	32b0      	adds	r2, #176	; 0xb0
 8005dba:	2100      	movs	r1, #0
 8005dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000093 	.word	0x20000093
 8005dd8:	20000094 	.word	0x20000094
 8005ddc:	20000095 	.word	0x20000095

08005de0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	32b0      	adds	r2, #176	; 0xb0
 8005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e0bf      	b.n	8005f90 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d050      	beq.n	8005ebe <USBD_CDC_Setup+0xde>
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	f040 80af 	bne.w	8005f80 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	88db      	ldrh	r3, [r3, #6]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d03a      	beq.n	8005ea0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	b25b      	sxtb	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	da1b      	bge.n	8005e6c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	33b0      	adds	r3, #176	; 0xb0
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005e4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	88d2      	ldrh	r2, [r2, #6]
 8005e50:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	88db      	ldrh	r3, [r3, #6]
 8005e56:	2b07      	cmp	r3, #7
 8005e58:	bf28      	it	cs
 8005e5a:	2307      	movcs	r3, #7
 8005e5c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	89fa      	ldrh	r2, [r7, #14]
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f001 fd89 	bl	800797c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005e6a:	e090      	b.n	8005f8e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	785a      	ldrb	r2, [r3, #1]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	88db      	ldrh	r3, [r3, #6]
 8005e7a:	2b3f      	cmp	r3, #63	; 0x3f
 8005e7c:	d803      	bhi.n	8005e86 <USBD_CDC_Setup+0xa6>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	88db      	ldrh	r3, [r3, #6]
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	e000      	b.n	8005e88 <USBD_CDC_Setup+0xa8>
 8005e86:	2240      	movs	r2, #64	; 0x40
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005e8e:	6939      	ldr	r1, [r7, #16]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005e96:	461a      	mov	r2, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f001 fd9b 	bl	80079d4 <USBD_CtlPrepareRx>
      break;
 8005e9e:	e076      	b.n	8005f8e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	33b0      	adds	r3, #176	; 0xb0
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	7850      	ldrb	r0, [r2, #1]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	4798      	blx	r3
      break;
 8005ebc:	e067      	b.n	8005f8e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	785b      	ldrb	r3, [r3, #1]
 8005ec2:	2b0b      	cmp	r3, #11
 8005ec4:	d851      	bhi.n	8005f6a <USBD_CDC_Setup+0x18a>
 8005ec6:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <USBD_CDC_Setup+0xec>)
 8005ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ecc:	08005efd 	.word	0x08005efd
 8005ed0:	08005f79 	.word	0x08005f79
 8005ed4:	08005f6b 	.word	0x08005f6b
 8005ed8:	08005f6b 	.word	0x08005f6b
 8005edc:	08005f6b 	.word	0x08005f6b
 8005ee0:	08005f6b 	.word	0x08005f6b
 8005ee4:	08005f6b 	.word	0x08005f6b
 8005ee8:	08005f6b 	.word	0x08005f6b
 8005eec:	08005f6b 	.word	0x08005f6b
 8005ef0:	08005f6b 	.word	0x08005f6b
 8005ef4:	08005f27 	.word	0x08005f27
 8005ef8:	08005f51 	.word	0x08005f51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d107      	bne.n	8005f18 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f08:	f107 030a 	add.w	r3, r7, #10
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 fd33 	bl	800797c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f16:	e032      	b.n	8005f7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 fcbd 	bl	800789a <USBD_CtlError>
            ret = USBD_FAIL;
 8005f20:	2303      	movs	r3, #3
 8005f22:	75fb      	strb	r3, [r7, #23]
          break;
 8005f24:	e02b      	b.n	8005f7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d107      	bne.n	8005f42 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005f32:	f107 030d 	add.w	r3, r7, #13
 8005f36:	2201      	movs	r2, #1
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f001 fd1e 	bl	800797c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f40:	e01d      	b.n	8005f7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 fca8 	bl	800789a <USBD_CtlError>
            ret = USBD_FAIL;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f4e:	e016      	b.n	8005f7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d00f      	beq.n	8005f7c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f001 fc9b 	bl	800789a <USBD_CtlError>
            ret = USBD_FAIL;
 8005f64:	2303      	movs	r3, #3
 8005f66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005f68:	e008      	b.n	8005f7c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 fc94 	bl	800789a <USBD_CtlError>
          ret = USBD_FAIL;
 8005f72:	2303      	movs	r3, #3
 8005f74:	75fb      	strb	r3, [r7, #23]
          break;
 8005f76:	e002      	b.n	8005f7e <USBD_CDC_Setup+0x19e>
          break;
 8005f78:	bf00      	nop
 8005f7a:	e008      	b.n	8005f8e <USBD_CDC_Setup+0x1ae>
          break;
 8005f7c:	bf00      	nop
      }
      break;
 8005f7e:	e006      	b.n	8005f8e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 fc89 	bl	800789a <USBD_CtlError>
      ret = USBD_FAIL;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f8c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005faa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	32b0      	adds	r2, #176	; 0xb0
 8005fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e065      	b.n	800608e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	32b0      	adds	r2, #176	; 0xb0
 8005fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	f003 020f 	and.w	r2, r3, #15
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	440b      	add	r3, r1
 8005fe4:	3318      	adds	r3, #24
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d02f      	beq.n	800604c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	f003 020f 	and.w	r2, r3, #15
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	3318      	adds	r3, #24
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	78fb      	ldrb	r3, [r7, #3]
 8006004:	f003 010f 	and.w	r1, r3, #15
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	460b      	mov	r3, r1
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	440b      	add	r3, r1
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4403      	add	r3, r0
 8006014:	3348      	adds	r3, #72	; 0x48
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	fbb2 f1f3 	udiv	r1, r2, r3
 800601c:	fb01 f303 	mul.w	r3, r1, r3
 8006020:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006022:	2b00      	cmp	r3, #0
 8006024:	d112      	bne.n	800604c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	f003 020f 	and.w	r2, r3, #15
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	440b      	add	r3, r1
 8006038:	3318      	adds	r3, #24
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800603e:	78f9      	ldrb	r1, [r7, #3]
 8006040:	2300      	movs	r3, #0
 8006042:	2200      	movs	r2, #0
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f002 f9e0 	bl	800840a <USBD_LL_Transmit>
 800604a:	e01f      	b.n	800608c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	33b0      	adds	r3, #176	; 0xb0
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d010      	beq.n	800608c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	33b0      	adds	r3, #176	; 0xb0
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006088:	78fa      	ldrb	r2, [r7, #3]
 800608a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	460b      	mov	r3, r1
 80060a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	32b0      	adds	r2, #176	; 0xb0
 80060ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	32b0      	adds	r2, #176	; 0xb0
 80060bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e01a      	b.n	80060fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80060c8:	78fb      	ldrb	r3, [r7, #3]
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f002 f9de 	bl	800848e <USBD_LL_GetRxDataSize>
 80060d2:	4602      	mov	r2, r0
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	33b0      	adds	r3, #176	; 0xb0
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80060f8:	4611      	mov	r1, r2
 80060fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	32b0      	adds	r2, #176	; 0xb0
 8006118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006124:	2303      	movs	r3, #3
 8006126:	e025      	b.n	8006174 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	33b0      	adds	r3, #176	; 0xb0
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01a      	beq.n	8006172 <USBD_CDC_EP0_RxReady+0x6c>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006142:	2bff      	cmp	r3, #255	; 0xff
 8006144:	d015      	beq.n	8006172 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	33b0      	adds	r3, #176	; 0xb0
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800615e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006166:	b292      	uxth	r2, r2
 8006168:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	22ff      	movs	r2, #255	; 0xff
 800616e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006184:	2182      	movs	r1, #130	; 0x82
 8006186:	4818      	ldr	r0, [pc, #96]	; (80061e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006188:	f000 fd4f 	bl	8006c2a <USBD_GetEpDesc>
 800618c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800618e:	2101      	movs	r1, #1
 8006190:	4815      	ldr	r0, [pc, #84]	; (80061e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006192:	f000 fd4a 	bl	8006c2a <USBD_GetEpDesc>
 8006196:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006198:	2181      	movs	r1, #129	; 0x81
 800619a:	4813      	ldr	r0, [pc, #76]	; (80061e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800619c:	f000 fd45 	bl	8006c2a <USBD_GetEpDesc>
 80061a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	2210      	movs	r2, #16
 80061ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d006      	beq.n	80061c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061bc:	711a      	strb	r2, [r3, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d006      	beq.n	80061d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d0:	711a      	strb	r2, [r3, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2243      	movs	r2, #67	; 0x43
 80061da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80061dc:	4b02      	ldr	r3, [pc, #8]	; (80061e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000050 	.word	0x20000050

080061ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80061f4:	2182      	movs	r1, #130	; 0x82
 80061f6:	4818      	ldr	r0, [pc, #96]	; (8006258 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80061f8:	f000 fd17 	bl	8006c2a <USBD_GetEpDesc>
 80061fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80061fe:	2101      	movs	r1, #1
 8006200:	4815      	ldr	r0, [pc, #84]	; (8006258 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006202:	f000 fd12 	bl	8006c2a <USBD_GetEpDesc>
 8006206:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006208:	2181      	movs	r1, #129	; 0x81
 800620a:	4813      	ldr	r0, [pc, #76]	; (8006258 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800620c:	f000 fd0d 	bl	8006c2a <USBD_GetEpDesc>
 8006210:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2210      	movs	r2, #16
 800621c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d006      	beq.n	8006232 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	2200      	movs	r2, #0
 8006228:	711a      	strb	r2, [r3, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f042 0202 	orr.w	r2, r2, #2
 8006230:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d006      	beq.n	8006246 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	711a      	strb	r2, [r3, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f042 0202 	orr.w	r2, r2, #2
 8006244:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2243      	movs	r2, #67	; 0x43
 800624a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800624c:	4b02      	ldr	r3, [pc, #8]	; (8006258 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800624e:	4618      	mov	r0, r3
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20000050 	.word	0x20000050

0800625c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006264:	2182      	movs	r1, #130	; 0x82
 8006266:	4818      	ldr	r0, [pc, #96]	; (80062c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006268:	f000 fcdf 	bl	8006c2a <USBD_GetEpDesc>
 800626c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800626e:	2101      	movs	r1, #1
 8006270:	4815      	ldr	r0, [pc, #84]	; (80062c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006272:	f000 fcda 	bl	8006c2a <USBD_GetEpDesc>
 8006276:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006278:	2181      	movs	r1, #129	; 0x81
 800627a:	4813      	ldr	r0, [pc, #76]	; (80062c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800627c:	f000 fcd5 	bl	8006c2a <USBD_GetEpDesc>
 8006280:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2210      	movs	r2, #16
 800628c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d006      	beq.n	80062a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2200      	movs	r2, #0
 8006298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800629c:	711a      	strb	r2, [r3, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d006      	beq.n	80062b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062b0:	711a      	strb	r2, [r3, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2243      	movs	r2, #67	; 0x43
 80062ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80062bc:	4b02      	ldr	r3, [pc, #8]	; (80062c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000050 	.word	0x20000050

080062cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	220a      	movs	r2, #10
 80062d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80062da:	4b03      	ldr	r3, [pc, #12]	; (80062e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	2000000c 	.word	0x2000000c

080062ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e009      	b.n	8006314 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	33b0      	adds	r3, #176	; 0xb0
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	32b0      	adds	r2, #176	; 0xb0
 8006336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800633a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006342:	2303      	movs	r3, #3
 8006344:	e008      	b.n	8006358 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	371c      	adds	r7, #28
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	32b0      	adds	r2, #176	; 0xb0
 8006378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006384:	2303      	movs	r3, #3
 8006386:	e004      	b.n	8006392 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	32b0      	adds	r2, #176	; 0xb0
 80063b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	32b0      	adds	r2, #176	; 0xb0
 80063c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e025      	b.n	800641e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d11f      	bne.n	800641c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2201      	movs	r2, #1
 80063e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80063e4:	4b10      	ldr	r3, [pc, #64]	; (8006428 <USBD_CDC_TransmitPacket+0x88>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	f003 020f 	and.w	r2, r3, #15
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4403      	add	r3, r0
 80063fe:	3318      	adds	r3, #24
 8006400:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <USBD_CDC_TransmitPacket+0x88>)
 8006404:	7819      	ldrb	r1, [r3, #0]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 fff9 	bl	800840a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000093 	.word	0x20000093

0800642c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	32b0      	adds	r2, #176	; 0xb0
 800643e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006442:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	32b0      	adds	r2, #176	; 0xb0
 800644e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006456:	2303      	movs	r3, #3
 8006458:	e018      	b.n	800648c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	7c1b      	ldrb	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006462:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <USBD_CDC_ReceivePacket+0x68>)
 8006464:	7819      	ldrb	r1, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800646c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 ffeb 	bl	800844c <USBD_LL_PrepareReceive>
 8006476:	e008      	b.n	800648a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006478:	4b06      	ldr	r3, [pc, #24]	; (8006494 <USBD_CDC_ReceivePacket+0x68>)
 800647a:	7819      	ldrb	r1, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006482:	2340      	movs	r3, #64	; 0x40
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 ffe1 	bl	800844c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	20000094 	.word	0x20000094

08006498 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e01f      	b.n	80064f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	79fa      	ldrb	r2, [r7, #7]
 80064e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f001 fe5b 	bl	80081a0 <USBD_LL_Init>
 80064ea:	4603      	mov	r3, r0
 80064ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800650c:	2303      	movs	r3, #3
 800650e:	e025      	b.n	800655c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	32ae      	adds	r2, #174	; 0xae
 8006522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00f      	beq.n	800654c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	32ae      	adds	r2, #174	; 0xae
 8006536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	f107 020e 	add.w	r2, r7, #14
 8006540:	4610      	mov	r0, r2
 8006542:	4798      	blx	r3
 8006544:	4602      	mov	r2, r0
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f001 fe63 	bl	8008238 <USBD_LL_Start>
 8006572:	4603      	mov	r3, r0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006584:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d009      	beq.n	80065c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	78fa      	ldrb	r2, [r7, #3]
 80065b6:	4611      	mov	r1, r2
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	4798      	blx	r3
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	460b      	mov	r3, r1
 80065d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	78fa      	ldrb	r2, [r7, #3]
 80065e4:	4611      	mov	r1, r2
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80065f0:	2303      	movs	r3, #3
 80065f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f001 f908 	bl	8007826 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006624:	461a      	mov	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006632:	f003 031f 	and.w	r3, r3, #31
 8006636:	2b02      	cmp	r3, #2
 8006638:	d01a      	beq.n	8006670 <USBD_LL_SetupStage+0x72>
 800663a:	2b02      	cmp	r3, #2
 800663c:	d822      	bhi.n	8006684 <USBD_LL_SetupStage+0x86>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <USBD_LL_SetupStage+0x4a>
 8006642:	2b01      	cmp	r3, #1
 8006644:	d00a      	beq.n	800665c <USBD_LL_SetupStage+0x5e>
 8006646:	e01d      	b.n	8006684 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fb5f 	bl	8006d14 <USBD_StdDevReq>
 8006656:	4603      	mov	r3, r0
 8006658:	73fb      	strb	r3, [r7, #15]
      break;
 800665a:	e020      	b.n	800669e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fbc7 	bl	8006df8 <USBD_StdItfReq>
 800666a:	4603      	mov	r3, r0
 800666c:	73fb      	strb	r3, [r7, #15]
      break;
 800666e:	e016      	b.n	800669e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fc29 	bl	8006ed0 <USBD_StdEPReq>
 800667e:	4603      	mov	r3, r0
 8006680:	73fb      	strb	r3, [r7, #15]
      break;
 8006682:	e00c      	b.n	800669e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800668a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800668e:	b2db      	uxtb	r3, r3
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fe30 	bl	80082f8 <USBD_LL_StallEP>
 8006698:	4603      	mov	r3, r0
 800669a:	73fb      	strb	r3, [r7, #15]
      break;
 800669c:	bf00      	nop
  }

  return ret;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	460b      	mov	r3, r1
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80066ba:	7afb      	ldrb	r3, [r7, #11]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d16e      	bne.n	800679e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80066c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	f040 8098 	bne.w	8006804 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d913      	bls.n	8006708 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	1ad2      	subs	r2, r2, r3
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	4293      	cmp	r3, r2
 80066f8:	bf28      	it	cs
 80066fa:	4613      	movcs	r3, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f001 f984 	bl	8007a0e <USBD_CtlContinueRx>
 8006706:	e07d      	b.n	8006804 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800670e:	f003 031f 	and.w	r3, r3, #31
 8006712:	2b02      	cmp	r3, #2
 8006714:	d014      	beq.n	8006740 <USBD_LL_DataOutStage+0x98>
 8006716:	2b02      	cmp	r3, #2
 8006718:	d81d      	bhi.n	8006756 <USBD_LL_DataOutStage+0xae>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <USBD_LL_DataOutStage+0x7c>
 800671e:	2b01      	cmp	r3, #1
 8006720:	d003      	beq.n	800672a <USBD_LL_DataOutStage+0x82>
 8006722:	e018      	b.n	8006756 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	75bb      	strb	r3, [r7, #22]
            break;
 8006728:	e018      	b.n	800675c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006730:	b2db      	uxtb	r3, r3
 8006732:	4619      	mov	r1, r3
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 fa5e 	bl	8006bf6 <USBD_CoreFindIF>
 800673a:	4603      	mov	r3, r0
 800673c:	75bb      	strb	r3, [r7, #22]
            break;
 800673e:	e00d      	b.n	800675c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006746:	b2db      	uxtb	r3, r3
 8006748:	4619      	mov	r1, r3
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fa60 	bl	8006c10 <USBD_CoreFindEP>
 8006750:	4603      	mov	r3, r0
 8006752:	75bb      	strb	r3, [r7, #22]
            break;
 8006754:	e002      	b.n	800675c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	75bb      	strb	r3, [r7, #22]
            break;
 800675a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800675c:	7dbb      	ldrb	r3, [r7, #22]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d119      	bne.n	8006796 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b03      	cmp	r3, #3
 800676c:	d113      	bne.n	8006796 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800676e:	7dba      	ldrb	r2, [r7, #22]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	32ae      	adds	r2, #174	; 0xae
 8006774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00b      	beq.n	8006796 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800677e:	7dba      	ldrb	r2, [r7, #22]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006786:	7dba      	ldrb	r2, [r7, #22]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	32ae      	adds	r2, #174	; 0xae
 800678c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f001 f94a 	bl	8007a30 <USBD_CtlSendStatus>
 800679c:	e032      	b.n	8006804 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800679e:	7afb      	ldrb	r3, [r7, #11]
 80067a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	4619      	mov	r1, r3
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 fa31 	bl	8006c10 <USBD_CoreFindEP>
 80067ae:	4603      	mov	r3, r0
 80067b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067b2:	7dbb      	ldrb	r3, [r7, #22]
 80067b4:	2bff      	cmp	r3, #255	; 0xff
 80067b6:	d025      	beq.n	8006804 <USBD_LL_DataOutStage+0x15c>
 80067b8:	7dbb      	ldrb	r3, [r7, #22]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d122      	bne.n	8006804 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d117      	bne.n	80067fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80067ca:	7dba      	ldrb	r2, [r7, #22]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	32ae      	adds	r2, #174	; 0xae
 80067d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00f      	beq.n	80067fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80067da:	7dba      	ldrb	r2, [r7, #22]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80067e2:	7dba      	ldrb	r2, [r7, #22]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	32ae      	adds	r2, #174	; 0xae
 80067e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	7afa      	ldrb	r2, [r7, #11]
 80067f0:	4611      	mov	r1, r2
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	4798      	blx	r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006800:	7dfb      	ldrb	r3, [r7, #23]
 8006802:	e000      	b.n	8006806 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b086      	sub	sp, #24
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	460b      	mov	r3, r1
 8006818:	607a      	str	r2, [r7, #4]
 800681a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800681c:	7afb      	ldrb	r3, [r7, #11]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d16f      	bne.n	8006902 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3314      	adds	r3, #20
 8006826:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800682e:	2b02      	cmp	r3, #2
 8006830:	d15a      	bne.n	80068e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	429a      	cmp	r2, r3
 800683c:	d914      	bls.n	8006868 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	1ad2      	subs	r2, r2, r3
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	461a      	mov	r2, r3
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f001 f8ac 	bl	80079b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800685a:	2300      	movs	r3, #0
 800685c:	2200      	movs	r2, #0
 800685e:	2100      	movs	r1, #0
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f001 fdf3 	bl	800844c <USBD_LL_PrepareReceive>
 8006866:	e03f      	b.n	80068e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	429a      	cmp	r2, r3
 8006872:	d11c      	bne.n	80068ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800687c:	429a      	cmp	r2, r3
 800687e:	d316      	bcc.n	80068ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800688a:	429a      	cmp	r2, r3
 800688c:	d20f      	bcs.n	80068ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800688e:	2200      	movs	r2, #0
 8006890:	2100      	movs	r1, #0
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f001 f88d 	bl	80079b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068a0:	2300      	movs	r3, #0
 80068a2:	2200      	movs	r2, #0
 80068a4:	2100      	movs	r1, #0
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f001 fdd0 	bl	800844c <USBD_LL_PrepareReceive>
 80068ac:	e01c      	b.n	80068e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d10f      	bne.n	80068da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d009      	beq.n	80068da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80068da:	2180      	movs	r1, #128	; 0x80
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f001 fd0b 	bl	80082f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f001 f8b7 	bl	8007a56 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d03a      	beq.n	8006968 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff fe42 	bl	800657c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006900:	e032      	b.n	8006968 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006902:	7afb      	ldrb	r3, [r7, #11]
 8006904:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006908:	b2db      	uxtb	r3, r3
 800690a:	4619      	mov	r1, r3
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 f97f 	bl	8006c10 <USBD_CoreFindEP>
 8006912:	4603      	mov	r3, r0
 8006914:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	2bff      	cmp	r3, #255	; 0xff
 800691a:	d025      	beq.n	8006968 <USBD_LL_DataInStage+0x15a>
 800691c:	7dfb      	ldrb	r3, [r7, #23]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d122      	bne.n	8006968 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b03      	cmp	r3, #3
 800692c:	d11c      	bne.n	8006968 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800692e:	7dfa      	ldrb	r2, [r7, #23]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	32ae      	adds	r2, #174	; 0xae
 8006934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d014      	beq.n	8006968 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800693e:	7dfa      	ldrb	r2, [r7, #23]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006946:	7dfa      	ldrb	r2, [r7, #23]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	32ae      	adds	r2, #174	; 0xae
 800694c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	7afa      	ldrb	r2, [r7, #11]
 8006954:	4611      	mov	r1, r2
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	4798      	blx	r3
 800695a:	4603      	mov	r3, r0
 800695c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800695e:	7dbb      	ldrb	r3, [r7, #22]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006964:	7dbb      	ldrb	r3, [r7, #22]
 8006966:	e000      	b.n	800696a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d014      	beq.n	80069d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00e      	beq.n	80069d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6852      	ldr	r2, [r2, #4]
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	4611      	mov	r1, r2
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	4798      	blx	r3
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80069d4:	2303      	movs	r3, #3
 80069d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069d8:	2340      	movs	r3, #64	; 0x40
 80069da:	2200      	movs	r2, #0
 80069dc:	2100      	movs	r1, #0
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f001 fc45 	bl	800826e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2240      	movs	r2, #64	; 0x40
 80069f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069f4:	2340      	movs	r3, #64	; 0x40
 80069f6:	2200      	movs	r2, #0
 80069f8:	2180      	movs	r1, #128	; 0x80
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f001 fc37 	bl	800826e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2240      	movs	r2, #64	; 0x40
 8006a0a:	621a      	str	r2, [r3, #32]

  return ret;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	78fa      	ldrb	r2, [r7, #3]
 8006a26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2204      	movs	r2, #4
 8006a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d106      	bne.n	8006a84 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b082      	sub	sp, #8
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	d110      	bne.n	8006ac8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d005      	beq.n	8006ac8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	32ae      	adds	r2, #174	; 0xae
 8006ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e01c      	b.n	8006b2e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d115      	bne.n	8006b2c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	32ae      	adds	r2, #174	; 0xae
 8006b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00b      	beq.n	8006b2c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	32ae      	adds	r2, #174	; 0xae
 8006b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	78fa      	ldrb	r2, [r7, #3]
 8006b26:	4611      	mov	r1, r2
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b082      	sub	sp, #8
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	32ae      	adds	r2, #174	; 0xae
 8006b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e01c      	b.n	8006b92 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d115      	bne.n	8006b90 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	32ae      	adds	r2, #174	; 0xae
 8006b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00b      	beq.n	8006b90 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	32ae      	adds	r2, #174	; 0xae
 8006b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	78fa      	ldrb	r2, [r7, #3]
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00e      	beq.n	8006bec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6852      	ldr	r2, [r2, #4]
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	4611      	mov	r1, r2
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	4798      	blx	r3
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006be8:	2303      	movs	r3, #3
 8006bea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006c02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006c1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b086      	sub	sp, #24
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	460b      	mov	r3, r1
 8006c34:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	885b      	ldrh	r3, [r3, #2]
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d920      	bls.n	8006c94 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006c5a:	e013      	b.n	8006c84 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006c5c:	f107 030a 	add.w	r3, r7, #10
 8006c60:	4619      	mov	r1, r3
 8006c62:	6978      	ldr	r0, [r7, #20]
 8006c64:	f000 f81b 	bl	8006c9e <USBD_GetNextDesc>
 8006c68:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	785b      	ldrb	r3, [r3, #1]
 8006c6e:	2b05      	cmp	r3, #5
 8006c70:	d108      	bne.n	8006c84 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	789b      	ldrb	r3, [r3, #2]
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d008      	beq.n	8006c92 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006c80:	2300      	movs	r3, #0
 8006c82:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	885b      	ldrh	r3, [r3, #2]
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	897b      	ldrh	r3, [r7, #10]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d8e5      	bhi.n	8006c5c <USBD_GetEpDesc+0x32>
 8006c90:	e000      	b.n	8006c94 <USBD_GetEpDesc+0x6a>
          break;
 8006c92:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006c94:	693b      	ldr	r3, [r7, #16]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b085      	sub	sp, #20
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	881a      	ldrh	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006cca:	68fb      	ldr	r3, [r7, #12]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	3301      	adds	r3, #1
 8006cee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006cf6:	8a3b      	ldrh	r3, [r7, #16]
 8006cf8:	021b      	lsls	r3, r3, #8
 8006cfa:	b21a      	sxth	r2, r3
 8006cfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	b21b      	sxth	r3, r3
 8006d04:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006d06:	89fb      	ldrh	r3, [r7, #14]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d2a:	2b40      	cmp	r3, #64	; 0x40
 8006d2c:	d005      	beq.n	8006d3a <USBD_StdDevReq+0x26>
 8006d2e:	2b40      	cmp	r3, #64	; 0x40
 8006d30:	d857      	bhi.n	8006de2 <USBD_StdDevReq+0xce>
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00f      	beq.n	8006d56 <USBD_StdDevReq+0x42>
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d153      	bne.n	8006de2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	32ae      	adds	r2, #174	; 0xae
 8006d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	4798      	blx	r3
 8006d50:	4603      	mov	r3, r0
 8006d52:	73fb      	strb	r3, [r7, #15]
      break;
 8006d54:	e04a      	b.n	8006dec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	785b      	ldrb	r3, [r3, #1]
 8006d5a:	2b09      	cmp	r3, #9
 8006d5c:	d83b      	bhi.n	8006dd6 <USBD_StdDevReq+0xc2>
 8006d5e:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <USBD_StdDevReq+0x50>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006db9 	.word	0x08006db9
 8006d68:	08006dcd 	.word	0x08006dcd
 8006d6c:	08006dd7 	.word	0x08006dd7
 8006d70:	08006dc3 	.word	0x08006dc3
 8006d74:	08006dd7 	.word	0x08006dd7
 8006d78:	08006d97 	.word	0x08006d97
 8006d7c:	08006d8d 	.word	0x08006d8d
 8006d80:	08006dd7 	.word	0x08006dd7
 8006d84:	08006daf 	.word	0x08006daf
 8006d88:	08006da1 	.word	0x08006da1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fa3c 	bl	800720c <USBD_GetDescriptor>
          break;
 8006d94:	e024      	b.n	8006de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fba1 	bl	80074e0 <USBD_SetAddress>
          break;
 8006d9e:	e01f      	b.n	8006de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fbe0 	bl	8007568 <USBD_SetConfig>
 8006da8:	4603      	mov	r3, r0
 8006daa:	73fb      	strb	r3, [r7, #15]
          break;
 8006dac:	e018      	b.n	8006de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fc83 	bl	80076bc <USBD_GetConfig>
          break;
 8006db6:	e013      	b.n	8006de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fcb4 	bl	8007728 <USBD_GetStatus>
          break;
 8006dc0:	e00e      	b.n	8006de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fce3 	bl	8007790 <USBD_SetFeature>
          break;
 8006dca:	e009      	b.n	8006de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fd07 	bl	80077e2 <USBD_ClrFeature>
          break;
 8006dd4:	e004      	b.n	8006de0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fd5e 	bl	800789a <USBD_CtlError>
          break;
 8006dde:	bf00      	nop
      }
      break;
 8006de0:	e004      	b.n	8006dec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fd58 	bl	800789a <USBD_CtlError>
      break;
 8006dea:	bf00      	nop
  }

  return ret;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop

08006df8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d005      	beq.n	8006e1e <USBD_StdItfReq+0x26>
 8006e12:	2b40      	cmp	r3, #64	; 0x40
 8006e14:	d852      	bhi.n	8006ebc <USBD_StdItfReq+0xc4>
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <USBD_StdItfReq+0x26>
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	d14e      	bne.n	8006ebc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d840      	bhi.n	8006eae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	889b      	ldrh	r3, [r3, #4]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d836      	bhi.n	8006ea4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	889b      	ldrh	r3, [r3, #4]
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff fed9 	bl	8006bf6 <USBD_CoreFindIF>
 8006e44:	4603      	mov	r3, r0
 8006e46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	2bff      	cmp	r3, #255	; 0xff
 8006e4c:	d01d      	beq.n	8006e8a <USBD_StdItfReq+0x92>
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d11a      	bne.n	8006e8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006e54:	7bba      	ldrb	r2, [r7, #14]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	32ae      	adds	r2, #174	; 0xae
 8006e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00f      	beq.n	8006e84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006e64:	7bba      	ldrb	r2, [r7, #14]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e6c:	7bba      	ldrb	r2, [r7, #14]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	32ae      	adds	r2, #174	; 0xae
 8006e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	4798      	blx	r3
 8006e7e:	4603      	mov	r3, r0
 8006e80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006e82:	e004      	b.n	8006e8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006e84:	2303      	movs	r3, #3
 8006e86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006e88:	e001      	b.n	8006e8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	88db      	ldrh	r3, [r3, #6]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d110      	bne.n	8006eb8 <USBD_StdItfReq+0xc0>
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10d      	bne.n	8006eb8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fdc7 	bl	8007a30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ea2:	e009      	b.n	8006eb8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fcf7 	bl	800789a <USBD_CtlError>
          break;
 8006eac:	e004      	b.n	8006eb8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fcf2 	bl	800789a <USBD_CtlError>
          break;
 8006eb6:	e000      	b.n	8006eba <USBD_StdItfReq+0xc2>
          break;
 8006eb8:	bf00      	nop
      }
      break;
 8006eba:	e004      	b.n	8006ec6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fceb 	bl	800789a <USBD_CtlError>
      break;
 8006ec4:	bf00      	nop
  }

  return ret;
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	889b      	ldrh	r3, [r3, #4]
 8006ee2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d007      	beq.n	8006f00 <USBD_StdEPReq+0x30>
 8006ef0:	2b40      	cmp	r3, #64	; 0x40
 8006ef2:	f200 817f 	bhi.w	80071f4 <USBD_StdEPReq+0x324>
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d02a      	beq.n	8006f50 <USBD_StdEPReq+0x80>
 8006efa:	2b20      	cmp	r3, #32
 8006efc:	f040 817a 	bne.w	80071f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff fe83 	bl	8006c10 <USBD_CoreFindEP>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f0e:	7b7b      	ldrb	r3, [r7, #13]
 8006f10:	2bff      	cmp	r3, #255	; 0xff
 8006f12:	f000 8174 	beq.w	80071fe <USBD_StdEPReq+0x32e>
 8006f16:	7b7b      	ldrb	r3, [r7, #13]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f040 8170 	bne.w	80071fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006f1e:	7b7a      	ldrb	r2, [r7, #13]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006f26:	7b7a      	ldrb	r2, [r7, #13]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	32ae      	adds	r2, #174	; 0xae
 8006f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8163 	beq.w	80071fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006f38:	7b7a      	ldrb	r2, [r7, #13]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	32ae      	adds	r2, #174	; 0xae
 8006f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	4798      	blx	r3
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f4e:	e156      	b.n	80071fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	785b      	ldrb	r3, [r3, #1]
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d008      	beq.n	8006f6a <USBD_StdEPReq+0x9a>
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	f300 8145 	bgt.w	80071e8 <USBD_StdEPReq+0x318>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 809b 	beq.w	800709a <USBD_StdEPReq+0x1ca>
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d03c      	beq.n	8006fe2 <USBD_StdEPReq+0x112>
 8006f68:	e13e      	b.n	80071e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d002      	beq.n	8006f7c <USBD_StdEPReq+0xac>
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d016      	beq.n	8006fa8 <USBD_StdEPReq+0xd8>
 8006f7a:	e02c      	b.n	8006fd6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00d      	beq.n	8006f9e <USBD_StdEPReq+0xce>
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	2b80      	cmp	r3, #128	; 0x80
 8006f86:	d00a      	beq.n	8006f9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 f9b3 	bl	80082f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f92:	2180      	movs	r1, #128	; 0x80
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 f9af 	bl	80082f8 <USBD_LL_StallEP>
 8006f9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f9c:	e020      	b.n	8006fe0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fc7a 	bl	800789a <USBD_CtlError>
              break;
 8006fa6:	e01b      	b.n	8006fe0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	885b      	ldrh	r3, [r3, #2]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10e      	bne.n	8006fce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00b      	beq.n	8006fce <USBD_StdEPReq+0xfe>
 8006fb6:	7bbb      	ldrb	r3, [r7, #14]
 8006fb8:	2b80      	cmp	r3, #128	; 0x80
 8006fba:	d008      	beq.n	8006fce <USBD_StdEPReq+0xfe>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	88db      	ldrh	r3, [r3, #6]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d104      	bne.n	8006fce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 f995 	bl	80082f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fd2e 	bl	8007a30 <USBD_CtlSendStatus>

              break;
 8006fd4:	e004      	b.n	8006fe0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fc5e 	bl	800789a <USBD_CtlError>
              break;
 8006fde:	bf00      	nop
          }
          break;
 8006fe0:	e107      	b.n	80071f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d002      	beq.n	8006ff4 <USBD_StdEPReq+0x124>
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d016      	beq.n	8007020 <USBD_StdEPReq+0x150>
 8006ff2:	e04b      	b.n	800708c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00d      	beq.n	8007016 <USBD_StdEPReq+0x146>
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b80      	cmp	r3, #128	; 0x80
 8006ffe:	d00a      	beq.n	8007016 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 f977 	bl	80082f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800700a:	2180      	movs	r1, #128	; 0x80
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 f973 	bl	80082f8 <USBD_LL_StallEP>
 8007012:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007014:	e040      	b.n	8007098 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fc3e 	bl	800789a <USBD_CtlError>
              break;
 800701e:	e03b      	b.n	8007098 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	885b      	ldrh	r3, [r3, #2]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d136      	bne.n	8007096 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702e:	2b00      	cmp	r3, #0
 8007030:	d004      	beq.n	800703c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007032:	7bbb      	ldrb	r3, [r7, #14]
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 f97d 	bl	8008336 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fcf7 	bl	8007a30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff fde2 	bl	8006c10 <USBD_CoreFindEP>
 800704c:	4603      	mov	r3, r0
 800704e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007050:	7b7b      	ldrb	r3, [r7, #13]
 8007052:	2bff      	cmp	r3, #255	; 0xff
 8007054:	d01f      	beq.n	8007096 <USBD_StdEPReq+0x1c6>
 8007056:	7b7b      	ldrb	r3, [r7, #13]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d11c      	bne.n	8007096 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800705c:	7b7a      	ldrb	r2, [r7, #13]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007064:	7b7a      	ldrb	r2, [r7, #13]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	32ae      	adds	r2, #174	; 0xae
 800706a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d010      	beq.n	8007096 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007074:	7b7a      	ldrb	r2, [r7, #13]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	32ae      	adds	r2, #174	; 0xae
 800707a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	4798      	blx	r3
 8007086:	4603      	mov	r3, r0
 8007088:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800708a:	e004      	b.n	8007096 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fc03 	bl	800789a <USBD_CtlError>
              break;
 8007094:	e000      	b.n	8007098 <USBD_StdEPReq+0x1c8>
              break;
 8007096:	bf00      	nop
          }
          break;
 8007098:	e0ab      	b.n	80071f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d002      	beq.n	80070ac <USBD_StdEPReq+0x1dc>
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d032      	beq.n	8007110 <USBD_StdEPReq+0x240>
 80070aa:	e097      	b.n	80071dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d007      	beq.n	80070c2 <USBD_StdEPReq+0x1f2>
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	2b80      	cmp	r3, #128	; 0x80
 80070b6:	d004      	beq.n	80070c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fbed 	bl	800789a <USBD_CtlError>
                break;
 80070c0:	e091      	b.n	80071e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	da0b      	bge.n	80070e2 <USBD_StdEPReq+0x212>
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	3310      	adds	r3, #16
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	4413      	add	r3, r2
 80070de:	3304      	adds	r3, #4
 80070e0:	e00b      	b.n	80070fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070e8:	4613      	mov	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	4413      	add	r3, r2
 80070f8:	3304      	adds	r3, #4
 80070fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2202      	movs	r2, #2
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fc37 	bl	800797c <USBD_CtlSendData>
              break;
 800710e:	e06a      	b.n	80071e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007114:	2b00      	cmp	r3, #0
 8007116:	da11      	bge.n	800713c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007118:	7bbb      	ldrb	r3, [r7, #14]
 800711a:	f003 020f 	and.w	r2, r3, #15
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4613      	mov	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	3324      	adds	r3, #36	; 0x24
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d117      	bne.n	8007162 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fbb0 	bl	800789a <USBD_CtlError>
                  break;
 800713a:	e054      	b.n	80071e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800713c:	7bbb      	ldrb	r3, [r7, #14]
 800713e:	f003 020f 	and.w	r2, r3, #15
 8007142:	6879      	ldr	r1, [r7, #4]
 8007144:	4613      	mov	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	440b      	add	r3, r1
 800714e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d104      	bne.n	8007162 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fb9d 	bl	800789a <USBD_CtlError>
                  break;
 8007160:	e041      	b.n	80071e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007162:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007166:	2b00      	cmp	r3, #0
 8007168:	da0b      	bge.n	8007182 <USBD_StdEPReq+0x2b2>
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007170:	4613      	mov	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	3310      	adds	r3, #16
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	4413      	add	r3, r2
 800717e:	3304      	adds	r3, #4
 8007180:	e00b      	b.n	800719a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	4413      	add	r3, r2
 8007198:	3304      	adds	r3, #4
 800719a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <USBD_StdEPReq+0x2d8>
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	2b80      	cmp	r3, #128	; 0x80
 80071a6:	d103      	bne.n	80071b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	e00e      	b.n	80071ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 f8dd 	bl	8008374 <USBD_LL_IsStallEP>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2201      	movs	r2, #1
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	e002      	b.n	80071ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2202      	movs	r2, #2
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fbd1 	bl	800797c <USBD_CtlSendData>
              break;
 80071da:	e004      	b.n	80071e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fb5b 	bl	800789a <USBD_CtlError>
              break;
 80071e4:	bf00      	nop
          }
          break;
 80071e6:	e004      	b.n	80071f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fb55 	bl	800789a <USBD_CtlError>
          break;
 80071f0:	bf00      	nop
      }
      break;
 80071f2:	e005      	b.n	8007200 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fb4f 	bl	800789a <USBD_CtlError>
      break;
 80071fc:	e000      	b.n	8007200 <USBD_StdEPReq+0x330>
      break;
 80071fe:	bf00      	nop
  }

  return ret;
 8007200:	7bfb      	ldrb	r3, [r7, #15]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	885b      	ldrh	r3, [r3, #2]
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	2b06      	cmp	r3, #6
 800722e:	f200 8128 	bhi.w	8007482 <USBD_GetDescriptor+0x276>
 8007232:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <USBD_GetDescriptor+0x2c>)
 8007234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007238:	08007255 	.word	0x08007255
 800723c:	0800726d 	.word	0x0800726d
 8007240:	080072ad 	.word	0x080072ad
 8007244:	08007483 	.word	0x08007483
 8007248:	08007483 	.word	0x08007483
 800724c:	08007423 	.word	0x08007423
 8007250:	0800744f 	.word	0x0800744f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	7c12      	ldrb	r2, [r2, #16]
 8007260:	f107 0108 	add.w	r1, r7, #8
 8007264:	4610      	mov	r0, r2
 8007266:	4798      	blx	r3
 8007268:	60f8      	str	r0, [r7, #12]
      break;
 800726a:	e112      	b.n	8007492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	7c1b      	ldrb	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10d      	bne.n	8007290 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727c:	f107 0208 	add.w	r2, r7, #8
 8007280:	4610      	mov	r0, r2
 8007282:	4798      	blx	r3
 8007284:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3301      	adds	r3, #1
 800728a:	2202      	movs	r2, #2
 800728c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800728e:	e100      	b.n	8007492 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	f107 0208 	add.w	r2, r7, #8
 800729c:	4610      	mov	r0, r2
 800729e:	4798      	blx	r3
 80072a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3301      	adds	r3, #1
 80072a6:	2202      	movs	r2, #2
 80072a8:	701a      	strb	r2, [r3, #0]
      break;
 80072aa:	e0f2      	b.n	8007492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	885b      	ldrh	r3, [r3, #2]
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b05      	cmp	r3, #5
 80072b4:	f200 80ac 	bhi.w	8007410 <USBD_GetDescriptor+0x204>
 80072b8:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <USBD_GetDescriptor+0xb4>)
 80072ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072be:	bf00      	nop
 80072c0:	080072d9 	.word	0x080072d9
 80072c4:	0800730d 	.word	0x0800730d
 80072c8:	08007341 	.word	0x08007341
 80072cc:	08007375 	.word	0x08007375
 80072d0:	080073a9 	.word	0x080073a9
 80072d4:	080073dd 	.word	0x080073dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00b      	beq.n	80072fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	7c12      	ldrb	r2, [r2, #16]
 80072f0:	f107 0108 	add.w	r1, r7, #8
 80072f4:	4610      	mov	r0, r2
 80072f6:	4798      	blx	r3
 80072f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072fa:	e091      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 facb 	bl	800789a <USBD_CtlError>
            err++;
 8007304:	7afb      	ldrb	r3, [r7, #11]
 8007306:	3301      	adds	r3, #1
 8007308:	72fb      	strb	r3, [r7, #11]
          break;
 800730a:	e089      	b.n	8007420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	7c12      	ldrb	r2, [r2, #16]
 8007324:	f107 0108 	add.w	r1, r7, #8
 8007328:	4610      	mov	r0, r2
 800732a:	4798      	blx	r3
 800732c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800732e:	e077      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fab1 	bl	800789a <USBD_CtlError>
            err++;
 8007338:	7afb      	ldrb	r3, [r7, #11]
 800733a:	3301      	adds	r3, #1
 800733c:	72fb      	strb	r3, [r7, #11]
          break;
 800733e:	e06f      	b.n	8007420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00b      	beq.n	8007364 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	7c12      	ldrb	r2, [r2, #16]
 8007358:	f107 0108 	add.w	r1, r7, #8
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
 8007360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007362:	e05d      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fa97 	bl	800789a <USBD_CtlError>
            err++;
 800736c:	7afb      	ldrb	r3, [r7, #11]
 800736e:	3301      	adds	r3, #1
 8007370:	72fb      	strb	r3, [r7, #11]
          break;
 8007372:	e055      	b.n	8007420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	7c12      	ldrb	r2, [r2, #16]
 800738c:	f107 0108 	add.w	r1, r7, #8
 8007390:	4610      	mov	r0, r2
 8007392:	4798      	blx	r3
 8007394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007396:	e043      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fa7d 	bl	800789a <USBD_CtlError>
            err++;
 80073a0:	7afb      	ldrb	r3, [r7, #11]
 80073a2:	3301      	adds	r3, #1
 80073a4:	72fb      	strb	r3, [r7, #11]
          break;
 80073a6:	e03b      	b.n	8007420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00b      	beq.n	80073cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	7c12      	ldrb	r2, [r2, #16]
 80073c0:	f107 0108 	add.w	r1, r7, #8
 80073c4:	4610      	mov	r0, r2
 80073c6:	4798      	blx	r3
 80073c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ca:	e029      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa63 	bl	800789a <USBD_CtlError>
            err++;
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	3301      	adds	r3, #1
 80073d8:	72fb      	strb	r3, [r7, #11]
          break;
 80073da:	e021      	b.n	8007420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00b      	beq.n	8007400 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	7c12      	ldrb	r2, [r2, #16]
 80073f4:	f107 0108 	add.w	r1, r7, #8
 80073f8:	4610      	mov	r0, r2
 80073fa:	4798      	blx	r3
 80073fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073fe:	e00f      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fa49 	bl	800789a <USBD_CtlError>
            err++;
 8007408:	7afb      	ldrb	r3, [r7, #11]
 800740a:	3301      	adds	r3, #1
 800740c:	72fb      	strb	r3, [r7, #11]
          break;
 800740e:	e007      	b.n	8007420 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa41 	bl	800789a <USBD_CtlError>
          err++;
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	3301      	adds	r3, #1
 800741c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800741e:	bf00      	nop
      }
      break;
 8007420:	e037      	b.n	8007492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	7c1b      	ldrb	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d109      	bne.n	800743e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007432:	f107 0208 	add.w	r2, r7, #8
 8007436:	4610      	mov	r0, r2
 8007438:	4798      	blx	r3
 800743a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800743c:	e029      	b.n	8007492 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fa2a 	bl	800789a <USBD_CtlError>
        err++;
 8007446:	7afb      	ldrb	r3, [r7, #11]
 8007448:	3301      	adds	r3, #1
 800744a:	72fb      	strb	r3, [r7, #11]
      break;
 800744c:	e021      	b.n	8007492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	7c1b      	ldrb	r3, [r3, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10d      	bne.n	8007472 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745e:	f107 0208 	add.w	r2, r7, #8
 8007462:	4610      	mov	r0, r2
 8007464:	4798      	blx	r3
 8007466:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	2207      	movs	r2, #7
 800746e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007470:	e00f      	b.n	8007492 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fa10 	bl	800789a <USBD_CtlError>
        err++;
 800747a:	7afb      	ldrb	r3, [r7, #11]
 800747c:	3301      	adds	r3, #1
 800747e:	72fb      	strb	r3, [r7, #11]
      break;
 8007480:	e007      	b.n	8007492 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fa08 	bl	800789a <USBD_CtlError>
      err++;
 800748a:	7afb      	ldrb	r3, [r7, #11]
 800748c:	3301      	adds	r3, #1
 800748e:	72fb      	strb	r3, [r7, #11]
      break;
 8007490:	bf00      	nop
  }

  if (err != 0U)
 8007492:	7afb      	ldrb	r3, [r7, #11]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d11e      	bne.n	80074d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	88db      	ldrh	r3, [r3, #6]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d016      	beq.n	80074ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80074a0:	893b      	ldrh	r3, [r7, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00e      	beq.n	80074c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	88da      	ldrh	r2, [r3, #6]
 80074aa:	893b      	ldrh	r3, [r7, #8]
 80074ac:	4293      	cmp	r3, r2
 80074ae:	bf28      	it	cs
 80074b0:	4613      	movcs	r3, r2
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80074b6:	893b      	ldrh	r3, [r7, #8]
 80074b8:	461a      	mov	r2, r3
 80074ba:	68f9      	ldr	r1, [r7, #12]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fa5d 	bl	800797c <USBD_CtlSendData>
 80074c2:	e009      	b.n	80074d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f9e7 	bl	800789a <USBD_CtlError>
 80074cc:	e004      	b.n	80074d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 faae 	bl	8007a30 <USBD_CtlSendStatus>
 80074d4:	e000      	b.n	80074d8 <USBD_GetDescriptor+0x2cc>
    return;
 80074d6:	bf00      	nop
  }
}
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop

080074e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	889b      	ldrh	r3, [r3, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d131      	bne.n	8007556 <USBD_SetAddress+0x76>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	88db      	ldrh	r3, [r3, #6]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d12d      	bne.n	8007556 <USBD_SetAddress+0x76>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	885b      	ldrh	r3, [r3, #2]
 80074fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007500:	d829      	bhi.n	8007556 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	885b      	ldrh	r3, [r3, #2]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800750c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b03      	cmp	r3, #3
 8007518:	d104      	bne.n	8007524 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f9bc 	bl	800789a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007522:	e01d      	b.n	8007560 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	7bfa      	ldrb	r2, [r7, #15]
 8007528:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 ff4b 	bl	80083cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fa7a 	bl	8007a30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d004      	beq.n	800754c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800754a:	e009      	b.n	8007560 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007554:	e004      	b.n	8007560 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f99e 	bl	800789a <USBD_CtlError>
  }
}
 800755e:	bf00      	nop
 8007560:	bf00      	nop
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	885b      	ldrh	r3, [r3, #2]
 800757a:	b2da      	uxtb	r2, r3
 800757c:	4b4e      	ldr	r3, [pc, #312]	; (80076b8 <USBD_SetConfig+0x150>)
 800757e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007580:	4b4d      	ldr	r3, [pc, #308]	; (80076b8 <USBD_SetConfig+0x150>)
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d905      	bls.n	8007594 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f985 	bl	800789a <USBD_CtlError>
    return USBD_FAIL;
 8007590:	2303      	movs	r3, #3
 8007592:	e08c      	b.n	80076ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b02      	cmp	r3, #2
 800759e:	d002      	beq.n	80075a6 <USBD_SetConfig+0x3e>
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d029      	beq.n	80075f8 <USBD_SetConfig+0x90>
 80075a4:	e075      	b.n	8007692 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80075a6:	4b44      	ldr	r3, [pc, #272]	; (80076b8 <USBD_SetConfig+0x150>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d020      	beq.n	80075f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80075ae:	4b42      	ldr	r3, [pc, #264]	; (80076b8 <USBD_SetConfig+0x150>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075b8:	4b3f      	ldr	r3, [pc, #252]	; (80076b8 <USBD_SetConfig+0x150>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7fe ffe7 	bl	8006592 <USBD_SetClassConfig>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d008      	beq.n	80075e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f962 	bl	800789a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2202      	movs	r2, #2
 80075da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80075de:	e065      	b.n	80076ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fa25 	bl	8007a30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2203      	movs	r2, #3
 80075ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80075ee:	e05d      	b.n	80076ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fa1d 	bl	8007a30 <USBD_CtlSendStatus>
      break;
 80075f6:	e059      	b.n	80076ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80075f8:	4b2f      	ldr	r3, [pc, #188]	; (80076b8 <USBD_SetConfig+0x150>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d112      	bne.n	8007626 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007608:	4b2b      	ldr	r3, [pc, #172]	; (80076b8 <USBD_SetConfig+0x150>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007612:	4b29      	ldr	r3, [pc, #164]	; (80076b8 <USBD_SetConfig+0x150>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7fe ffd6 	bl	80065ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fa06 	bl	8007a30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007624:	e042      	b.n	80076ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007626:	4b24      	ldr	r3, [pc, #144]	; (80076b8 <USBD_SetConfig+0x150>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	429a      	cmp	r2, r3
 8007632:	d02a      	beq.n	800768a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7fe ffc4 	bl	80065ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007642:	4b1d      	ldr	r3, [pc, #116]	; (80076b8 <USBD_SetConfig+0x150>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800764c:	4b1a      	ldr	r3, [pc, #104]	; (80076b8 <USBD_SetConfig+0x150>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7fe ff9d 	bl	8006592 <USBD_SetClassConfig>
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00f      	beq.n	8007682 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f918 	bl	800789a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fe ffa9 	bl	80065ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007680:	e014      	b.n	80076ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f9d4 	bl	8007a30 <USBD_CtlSendStatus>
      break;
 8007688:	e010      	b.n	80076ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f9d0 	bl	8007a30 <USBD_CtlSendStatus>
      break;
 8007690:	e00c      	b.n	80076ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f900 	bl	800789a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800769a:	4b07      	ldr	r3, [pc, #28]	; (80076b8 <USBD_SetConfig+0x150>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7fe ff92 	bl	80065ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80076a6:	2303      	movs	r3, #3
 80076a8:	73fb      	strb	r3, [r7, #15]
      break;
 80076aa:	bf00      	nop
  }

  return ret;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20000600 	.word	0x20000600

080076bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	88db      	ldrh	r3, [r3, #6]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d004      	beq.n	80076d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f8e2 	bl	800789a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80076d6:	e023      	b.n	8007720 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	dc02      	bgt.n	80076ea <USBD_GetConfig+0x2e>
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	dc03      	bgt.n	80076f0 <USBD_GetConfig+0x34>
 80076e8:	e015      	b.n	8007716 <USBD_GetConfig+0x5a>
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d00b      	beq.n	8007706 <USBD_GetConfig+0x4a>
 80076ee:	e012      	b.n	8007716 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3308      	adds	r3, #8
 80076fa:	2201      	movs	r2, #1
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f93c 	bl	800797c <USBD_CtlSendData>
        break;
 8007704:	e00c      	b.n	8007720 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	3304      	adds	r3, #4
 800770a:	2201      	movs	r2, #1
 800770c:	4619      	mov	r1, r3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f934 	bl	800797c <USBD_CtlSendData>
        break;
 8007714:	e004      	b.n	8007720 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f8be 	bl	800789a <USBD_CtlError>
        break;
 800771e:	bf00      	nop
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007738:	b2db      	uxtb	r3, r3
 800773a:	3b01      	subs	r3, #1
 800773c:	2b02      	cmp	r3, #2
 800773e:	d81e      	bhi.n	800777e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	88db      	ldrh	r3, [r3, #6]
 8007744:	2b02      	cmp	r3, #2
 8007746:	d004      	beq.n	8007752 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f8a5 	bl	800789a <USBD_CtlError>
        break;
 8007750:	e01a      	b.n	8007788 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f043 0202 	orr.w	r2, r3, #2
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	330c      	adds	r3, #12
 8007772:	2202      	movs	r2, #2
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f900 	bl	800797c <USBD_CtlSendData>
      break;
 800777c:	e004      	b.n	8007788 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f88a 	bl	800789a <USBD_CtlError>
      break;
 8007786:	bf00      	nop
  }
}
 8007788:	bf00      	nop
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	885b      	ldrh	r3, [r3, #2]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d107      	bne.n	80077b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f940 	bl	8007a30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80077b0:	e013      	b.n	80077da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	885b      	ldrh	r3, [r3, #2]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d10b      	bne.n	80077d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	889b      	ldrh	r3, [r3, #4]
 80077be:	0a1b      	lsrs	r3, r3, #8
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f930 	bl	8007a30 <USBD_CtlSendStatus>
}
 80077d0:	e003      	b.n	80077da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f860 	bl	800789a <USBD_CtlError>
}
 80077da:	bf00      	nop
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b082      	sub	sp, #8
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	3b01      	subs	r3, #1
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d80b      	bhi.n	8007812 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	885b      	ldrh	r3, [r3, #2]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d10c      	bne.n	800781c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f910 	bl	8007a30 <USBD_CtlSendStatus>
      }
      break;
 8007810:	e004      	b.n	800781c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f840 	bl	800789a <USBD_CtlError>
      break;
 800781a:	e000      	b.n	800781e <USBD_ClrFeature+0x3c>
      break;
 800781c:	bf00      	nop
  }
}
 800781e:	bf00      	nop
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	781a      	ldrb	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	3301      	adds	r3, #1
 8007840:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	781a      	ldrb	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3301      	adds	r3, #1
 800784e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7ff fa41 	bl	8006cd8 <SWAPBYTE>
 8007856:	4603      	mov	r3, r0
 8007858:	461a      	mov	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3301      	adds	r3, #1
 8007862:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3301      	adds	r3, #1
 8007868:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f7ff fa34 	bl	8006cd8 <SWAPBYTE>
 8007870:	4603      	mov	r3, r0
 8007872:	461a      	mov	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3301      	adds	r3, #1
 800787c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3301      	adds	r3, #1
 8007882:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f7ff fa27 	bl	8006cd8 <SWAPBYTE>
 800788a:	4603      	mov	r3, r0
 800788c:	461a      	mov	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	80da      	strh	r2, [r3, #6]
}
 8007892:	bf00      	nop
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80078a4:	2180      	movs	r1, #128	; 0x80
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fd26 	bl	80082f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80078ac:	2100      	movs	r1, #0
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fd22 	bl	80082f8 <USBD_LL_StallEP>
}
 80078b4:	bf00      	nop
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d036      	beq.n	8007940 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80078d6:	6938      	ldr	r0, [r7, #16]
 80078d8:	f000 f836 	bl	8007948 <USBD_GetLen>
 80078dc:	4603      	mov	r3, r0
 80078de:	3301      	adds	r3, #1
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	4413      	add	r3, r2
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	7812      	ldrb	r2, [r2, #0]
 80078f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	3301      	adds	r3, #1
 80078fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	4413      	add	r3, r2
 8007902:	2203      	movs	r2, #3
 8007904:	701a      	strb	r2, [r3, #0]
  idx++;
 8007906:	7dfb      	ldrb	r3, [r7, #23]
 8007908:	3301      	adds	r3, #1
 800790a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800790c:	e013      	b.n	8007936 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	4413      	add	r3, r2
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	7812      	ldrb	r2, [r2, #0]
 8007918:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	3301      	adds	r3, #1
 800791e:	613b      	str	r3, [r7, #16]
    idx++;
 8007920:	7dfb      	ldrb	r3, [r7, #23]
 8007922:	3301      	adds	r3, #1
 8007924:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	4413      	add	r3, r2
 800792c:	2200      	movs	r2, #0
 800792e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	3301      	adds	r3, #1
 8007934:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e7      	bne.n	800790e <USBD_GetString+0x52>
 800793e:	e000      	b.n	8007942 <USBD_GetString+0x86>
    return;
 8007940:	bf00      	nop
  }
}
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007958:	e005      	b.n	8007966 <USBD_GetLen+0x1e>
  {
    len++;
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	3301      	adds	r3, #1
 800795e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	3301      	adds	r3, #1
 8007964:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1f5      	bne.n	800795a <USBD_GetLen+0x12>
  }

  return len;
 800796e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2202      	movs	r2, #2
 800798c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	2100      	movs	r1, #0
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 fd31 	bl	800840a <USBD_LL_Transmit>

  return USBD_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	2100      	movs	r1, #0
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f000 fd20 	bl	800840a <USBD_LL_Transmit>

  return USBD_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2203      	movs	r2, #3
 80079e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	2100      	movs	r1, #0
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 fd24 	bl	800844c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	2100      	movs	r1, #0
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 fd13 	bl	800844c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2204      	movs	r2, #4
 8007a3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a40:	2300      	movs	r3, #0
 8007a42:	2200      	movs	r2, #0
 8007a44:	2100      	movs	r1, #0
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fcdf 	bl	800840a <USBD_LL_Transmit>

  return USBD_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2205      	movs	r2, #5
 8007a62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a66:	2300      	movs	r3, #0
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fced 	bl	800844c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a80:	2200      	movs	r2, #0
 8007a82:	4912      	ldr	r1, [pc, #72]	; (8007acc <MX_USB_DEVICE_Init+0x50>)
 8007a84:	4812      	ldr	r0, [pc, #72]	; (8007ad0 <MX_USB_DEVICE_Init+0x54>)
 8007a86:	f7fe fd07 	bl	8006498 <USBD_Init>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a90:	f7f8 ff96 	bl	80009c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007a94:	490f      	ldr	r1, [pc, #60]	; (8007ad4 <MX_USB_DEVICE_Init+0x58>)
 8007a96:	480e      	ldr	r0, [pc, #56]	; (8007ad0 <MX_USB_DEVICE_Init+0x54>)
 8007a98:	f7fe fd2e 	bl	80064f8 <USBD_RegisterClass>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007aa2:	f7f8 ff8d 	bl	80009c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007aa6:	490c      	ldr	r1, [pc, #48]	; (8007ad8 <MX_USB_DEVICE_Init+0x5c>)
 8007aa8:	4809      	ldr	r0, [pc, #36]	; (8007ad0 <MX_USB_DEVICE_Init+0x54>)
 8007aaa:	f7fe fc1f 	bl	80062ec <USBD_CDC_RegisterInterface>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ab4:	f7f8 ff84 	bl	80009c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ab8:	4805      	ldr	r0, [pc, #20]	; (8007ad0 <MX_USB_DEVICE_Init+0x54>)
 8007aba:	f7fe fd53 	bl	8006564 <USBD_Start>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ac4:	f7f8 ff7c 	bl	80009c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ac8:	bf00      	nop
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	200000ac 	.word	0x200000ac
 8007ad0:	20000604 	.word	0x20000604
 8007ad4:	20000018 	.word	0x20000018
 8007ad8:	20000098 	.word	0x20000098

08007adc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	4905      	ldr	r1, [pc, #20]	; (8007af8 <CDC_Init_FS+0x1c>)
 8007ae4:	4805      	ldr	r0, [pc, #20]	; (8007afc <CDC_Init_FS+0x20>)
 8007ae6:	f7fe fc1b 	bl	8006320 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007aea:	4905      	ldr	r1, [pc, #20]	; (8007b00 <CDC_Init_FS+0x24>)
 8007aec:	4803      	ldr	r0, [pc, #12]	; (8007afc <CDC_Init_FS+0x20>)
 8007aee:	f7fe fc39 	bl	8006364 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007af2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	20001d4c 	.word	0x20001d4c
 8007afc:	20000604 	.word	0x20000604
 8007b00:	2000154c 	.word	0x2000154c

08007b04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007b04:	b480      	push	{r7}
 8007b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007b08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	71fb      	strb	r3, [r7, #7]
 8007b20:	4613      	mov	r3, r2
 8007b22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007b24:	79fb      	ldrb	r3, [r7, #7]
 8007b26:	2b23      	cmp	r3, #35	; 0x23
 8007b28:	d84a      	bhi.n	8007bc0 <CDC_Control_FS+0xac>
 8007b2a:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <CDC_Control_FS+0x1c>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007bc1 	.word	0x08007bc1
 8007b34:	08007bc1 	.word	0x08007bc1
 8007b38:	08007bc1 	.word	0x08007bc1
 8007b3c:	08007bc1 	.word	0x08007bc1
 8007b40:	08007bc1 	.word	0x08007bc1
 8007b44:	08007bc1 	.word	0x08007bc1
 8007b48:	08007bc1 	.word	0x08007bc1
 8007b4c:	08007bc1 	.word	0x08007bc1
 8007b50:	08007bc1 	.word	0x08007bc1
 8007b54:	08007bc1 	.word	0x08007bc1
 8007b58:	08007bc1 	.word	0x08007bc1
 8007b5c:	08007bc1 	.word	0x08007bc1
 8007b60:	08007bc1 	.word	0x08007bc1
 8007b64:	08007bc1 	.word	0x08007bc1
 8007b68:	08007bc1 	.word	0x08007bc1
 8007b6c:	08007bc1 	.word	0x08007bc1
 8007b70:	08007bc1 	.word	0x08007bc1
 8007b74:	08007bc1 	.word	0x08007bc1
 8007b78:	08007bc1 	.word	0x08007bc1
 8007b7c:	08007bc1 	.word	0x08007bc1
 8007b80:	08007bc1 	.word	0x08007bc1
 8007b84:	08007bc1 	.word	0x08007bc1
 8007b88:	08007bc1 	.word	0x08007bc1
 8007b8c:	08007bc1 	.word	0x08007bc1
 8007b90:	08007bc1 	.word	0x08007bc1
 8007b94:	08007bc1 	.word	0x08007bc1
 8007b98:	08007bc1 	.word	0x08007bc1
 8007b9c:	08007bc1 	.word	0x08007bc1
 8007ba0:	08007bc1 	.word	0x08007bc1
 8007ba4:	08007bc1 	.word	0x08007bc1
 8007ba8:	08007bc1 	.word	0x08007bc1
 8007bac:	08007bc1 	.word	0x08007bc1
 8007bb0:	08007bc1 	.word	0x08007bc1
 8007bb4:	08007bc1 	.word	0x08007bc1
 8007bb8:	08007bc1 	.word	0x08007bc1
 8007bbc:	08007bc1 	.word	0x08007bc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007bc0:	bf00      	nop
  }

  return (USBD_OK);
 8007bc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8007bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007bde:	481d      	ldr	r0, [pc, #116]	; (8007c54 <CDC_Receive_FS+0x84>)
 8007be0:	f7f9 fc6d 	bl	80014be <HAL_GPIO_TogglePin>
	for (int i=0; i<*Len; i++)
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	e015      	b.n	8007c16 <CDC_Receive_FS+0x46>
	{
		if (InputPos < 3136)
 8007bea:	4b1b      	ldr	r3, [pc, #108]	; (8007c58 <CDC_Receive_FS+0x88>)
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	f5b3 6f44 	cmp.w	r3, #3136	; 0xc40
 8007bf2:	d20d      	bcs.n	8007c10 <CDC_Receive_FS+0x40>
			AiInput[InputPos] = 0;
			InputPos++;
			AiInput[InputPos] = 0;
			InputPos++;
			*/
			AiInput[InputPos] = Buf[i];
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	4a17      	ldr	r2, [pc, #92]	; (8007c58 <CDC_Receive_FS+0x88>)
 8007bfc:	8812      	ldrh	r2, [r2, #0]
 8007bfe:	7819      	ldrb	r1, [r3, #0]
 8007c00:	4b16      	ldr	r3, [pc, #88]	; (8007c5c <CDC_Receive_FS+0x8c>)
 8007c02:	5499      	strb	r1, [r3, r2]
			InputPos++;
 8007c04:	4b14      	ldr	r3, [pc, #80]	; (8007c58 <CDC_Receive_FS+0x88>)
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	4b12      	ldr	r3, [pc, #72]	; (8007c58 <CDC_Receive_FS+0x88>)
 8007c0e:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<*Len; i++)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3301      	adds	r3, #1
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d8e4      	bhi.n	8007bea <CDC_Receive_FS+0x1a>
		}
	}
	if (InputPos == 3136)
 8007c20:	4b0d      	ldr	r3, [pc, #52]	; (8007c58 <CDC_Receive_FS+0x88>)
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	f5b3 6f44 	cmp.w	r3, #3136	; 0xc40
 8007c28:	d108      	bne.n	8007c3c <CDC_Receive_FS+0x6c>
	{
		InputPos = 0;
 8007c2a:	4b0b      	ldr	r3, [pc, #44]	; (8007c58 <CDC_Receive_FS+0x88>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	801a      	strh	r2, [r3, #0]
		MX_X_CUBE_AI_Process();
 8007c30:	f000 fd9c 	bl	800876c <MX_X_CUBE_AI_Process>
		CDC_Transmit_FS(AiOutput, 40);
 8007c34:	2128      	movs	r1, #40	; 0x28
 8007c36:	480a      	ldr	r0, [pc, #40]	; (8007c60 <CDC_Receive_FS+0x90>)
 8007c38:	f000 f816 	bl	8007c68 <CDC_Transmit_FS>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	4809      	ldr	r0, [pc, #36]	; (8007c64 <CDC_Receive_FS+0x94>)
 8007c40:	f7fe fb90 	bl	8006364 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c44:	4807      	ldr	r0, [pc, #28]	; (8007c64 <CDC_Receive_FS+0x94>)
 8007c46:	f7fe fbf1 	bl	800642c <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8007c4a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	40020c00 	.word	0x40020c00
 8007c58:	20001548 	.word	0x20001548
 8007c5c:	200008e0 	.word	0x200008e0
 8007c60:	20001520 	.word	0x20001520
 8007c64:	20000604 	.word	0x20000604

08007c68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007c78:	4b0d      	ldr	r3, [pc, #52]	; (8007cb0 <CDC_Transmit_FS+0x48>)
 8007c7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e00b      	b.n	8007ca6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007c8e:	887b      	ldrh	r3, [r7, #2]
 8007c90:	461a      	mov	r2, r3
 8007c92:	6879      	ldr	r1, [r7, #4]
 8007c94:	4806      	ldr	r0, [pc, #24]	; (8007cb0 <CDC_Transmit_FS+0x48>)
 8007c96:	f7fe fb43 	bl	8006320 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007c9a:	4805      	ldr	r0, [pc, #20]	; (8007cb0 <CDC_Transmit_FS+0x48>)
 8007c9c:	f7fe fb80 	bl	80063a0 <USBD_CDC_TransmitPacket>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	20000604 	.word	0x20000604

08007cb4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b087      	sub	sp, #28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	371c      	adds	r7, #28
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
	...

08007cd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	4603      	mov	r3, r0
 8007ce0:	6039      	str	r1, [r7, #0]
 8007ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2212      	movs	r2, #18
 8007ce8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007cea:	4b03      	ldr	r3, [pc, #12]	; (8007cf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	200000c8 	.word	0x200000c8

08007cfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	6039      	str	r1, [r7, #0]
 8007d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2204      	movs	r2, #4
 8007d0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d0e:	4b03      	ldr	r3, [pc, #12]	; (8007d1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	200000dc 	.word	0x200000dc

08007d20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	6039      	str	r1, [r7, #0]
 8007d2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d105      	bne.n	8007d3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	4907      	ldr	r1, [pc, #28]	; (8007d54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d36:	4808      	ldr	r0, [pc, #32]	; (8007d58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d38:	f7ff fdc0 	bl	80078bc <USBD_GetString>
 8007d3c:	e004      	b.n	8007d48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	4904      	ldr	r1, [pc, #16]	; (8007d54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d42:	4805      	ldr	r0, [pc, #20]	; (8007d58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d44:	f7ff fdba 	bl	80078bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d48:	4b02      	ldr	r3, [pc, #8]	; (8007d54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	2000254c 	.word	0x2000254c
 8007d58:	0800bb20 	.word	0x0800bb20

08007d5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	6039      	str	r1, [r7, #0]
 8007d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	4904      	ldr	r1, [pc, #16]	; (8007d7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d6c:	4804      	ldr	r0, [pc, #16]	; (8007d80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d6e:	f7ff fda5 	bl	80078bc <USBD_GetString>
  return USBD_StrDesc;
 8007d72:	4b02      	ldr	r3, [pc, #8]	; (8007d7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	2000254c 	.word	0x2000254c
 8007d80:	0800bb38 	.word	0x0800bb38

08007d84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	6039      	str	r1, [r7, #0]
 8007d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	221a      	movs	r2, #26
 8007d94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d96:	f000 f843 	bl	8007e20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d9a:	4b02      	ldr	r3, [pc, #8]	; (8007da4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	200000e0 	.word	0x200000e0

08007da8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	4603      	mov	r3, r0
 8007db0:	6039      	str	r1, [r7, #0]
 8007db2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007db4:	79fb      	ldrb	r3, [r7, #7]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d105      	bne.n	8007dc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	4907      	ldr	r1, [pc, #28]	; (8007ddc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dbe:	4808      	ldr	r0, [pc, #32]	; (8007de0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007dc0:	f7ff fd7c 	bl	80078bc <USBD_GetString>
 8007dc4:	e004      	b.n	8007dd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	4904      	ldr	r1, [pc, #16]	; (8007ddc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dca:	4805      	ldr	r0, [pc, #20]	; (8007de0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007dcc:	f7ff fd76 	bl	80078bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dd0:	4b02      	ldr	r3, [pc, #8]	; (8007ddc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	2000254c 	.word	0x2000254c
 8007de0:	0800bb4c 	.word	0x0800bb4c

08007de4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	4603      	mov	r3, r0
 8007dec:	6039      	str	r1, [r7, #0]
 8007dee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d105      	bne.n	8007e02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	4907      	ldr	r1, [pc, #28]	; (8007e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007dfa:	4808      	ldr	r0, [pc, #32]	; (8007e1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007dfc:	f7ff fd5e 	bl	80078bc <USBD_GetString>
 8007e00:	e004      	b.n	8007e0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	4904      	ldr	r1, [pc, #16]	; (8007e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e06:	4805      	ldr	r0, [pc, #20]	; (8007e1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e08:	f7ff fd58 	bl	80078bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e0c:	4b02      	ldr	r3, [pc, #8]	; (8007e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	2000254c 	.word	0x2000254c
 8007e1c:	0800bb58 	.word	0x0800bb58

08007e20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e26:	4b0f      	ldr	r3, [pc, #60]	; (8007e64 <Get_SerialNum+0x44>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e2c:	4b0e      	ldr	r3, [pc, #56]	; (8007e68 <Get_SerialNum+0x48>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e32:	4b0e      	ldr	r3, [pc, #56]	; (8007e6c <Get_SerialNum+0x4c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d009      	beq.n	8007e5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e46:	2208      	movs	r2, #8
 8007e48:	4909      	ldr	r1, [pc, #36]	; (8007e70 <Get_SerialNum+0x50>)
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 f814 	bl	8007e78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e50:	2204      	movs	r2, #4
 8007e52:	4908      	ldr	r1, [pc, #32]	; (8007e74 <Get_SerialNum+0x54>)
 8007e54:	68b8      	ldr	r0, [r7, #8]
 8007e56:	f000 f80f 	bl	8007e78 <IntToUnicode>
  }
}
 8007e5a:	bf00      	nop
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	1fff7a10 	.word	0x1fff7a10
 8007e68:	1fff7a14 	.word	0x1fff7a14
 8007e6c:	1fff7a18 	.word	0x1fff7a18
 8007e70:	200000e2 	.word	0x200000e2
 8007e74:	200000f2 	.word	0x200000f2

08007e78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	4613      	mov	r3, r2
 8007e84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	75fb      	strb	r3, [r7, #23]
 8007e8e:	e027      	b.n	8007ee0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	0f1b      	lsrs	r3, r3, #28
 8007e94:	2b09      	cmp	r3, #9
 8007e96:	d80b      	bhi.n	8007eb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	0f1b      	lsrs	r3, r3, #28
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ea0:	005b      	lsls	r3, r3, #1
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	440b      	add	r3, r1
 8007ea8:	3230      	adds	r2, #48	; 0x30
 8007eaa:	b2d2      	uxtb	r2, r2
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	e00a      	b.n	8007ec6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	0f1b      	lsrs	r3, r3, #28
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	4619      	mov	r1, r3
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	440b      	add	r3, r1
 8007ec0:	3237      	adds	r2, #55	; 0x37
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	011b      	lsls	r3, r3, #4
 8007eca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
 8007edc:	3301      	adds	r3, #1
 8007ede:	75fb      	strb	r3, [r7, #23]
 8007ee0:	7dfa      	ldrb	r2, [r7, #23]
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d3d3      	bcc.n	8007e90 <IntToUnicode+0x18>
  }
}
 8007ee8:	bf00      	nop
 8007eea:	bf00      	nop
 8007eec:	371c      	adds	r7, #28
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
	...

08007ef8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	; 0x28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f00:	f107 0314 	add.w	r3, r7, #20
 8007f04:	2200      	movs	r2, #0
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	605a      	str	r2, [r3, #4]
 8007f0a:	609a      	str	r2, [r3, #8]
 8007f0c:	60da      	str	r2, [r3, #12]
 8007f0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f18:	d147      	bne.n	8007faa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	613b      	str	r3, [r7, #16]
 8007f1e:	4b25      	ldr	r3, [pc, #148]	; (8007fb4 <HAL_PCD_MspInit+0xbc>)
 8007f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f22:	4a24      	ldr	r2, [pc, #144]	; (8007fb4 <HAL_PCD_MspInit+0xbc>)
 8007f24:	f043 0301 	orr.w	r3, r3, #1
 8007f28:	6313      	str	r3, [r2, #48]	; 0x30
 8007f2a:	4b22      	ldr	r3, [pc, #136]	; (8007fb4 <HAL_PCD_MspInit+0xbc>)
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	613b      	str	r3, [r7, #16]
 8007f34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007f44:	f107 0314 	add.w	r3, r7, #20
 8007f48:	4619      	mov	r1, r3
 8007f4a:	481b      	ldr	r0, [pc, #108]	; (8007fb8 <HAL_PCD_MspInit+0xc0>)
 8007f4c:	f7f9 f902 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007f50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f56:	2302      	movs	r3, #2
 8007f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f62:	230a      	movs	r3, #10
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f66:	f107 0314 	add.w	r3, r7, #20
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	4812      	ldr	r0, [pc, #72]	; (8007fb8 <HAL_PCD_MspInit+0xc0>)
 8007f6e:	f7f9 f8f1 	bl	8001154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f72:	4b10      	ldr	r3, [pc, #64]	; (8007fb4 <HAL_PCD_MspInit+0xbc>)
 8007f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f76:	4a0f      	ldr	r2, [pc, #60]	; (8007fb4 <HAL_PCD_MspInit+0xbc>)
 8007f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f7c:	6353      	str	r3, [r2, #52]	; 0x34
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <HAL_PCD_MspInit+0xbc>)
 8007f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f86:	4a0b      	ldr	r2, [pc, #44]	; (8007fb4 <HAL_PCD_MspInit+0xbc>)
 8007f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8007f8e:	4b09      	ldr	r3, [pc, #36]	; (8007fb4 <HAL_PCD_MspInit+0xbc>)
 8007f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f96:	60fb      	str	r3, [r7, #12]
 8007f98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	2043      	movs	r0, #67	; 0x43
 8007fa0:	f7f9 f885 	bl	80010ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007fa4:	2043      	movs	r0, #67	; 0x43
 8007fa6:	f7f9 f89e 	bl	80010e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007faa:	bf00      	nop
 8007fac:	3728      	adds	r7, #40	; 0x28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	40023800 	.word	0x40023800
 8007fb8:	40020000 	.word	0x40020000

08007fbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	f7fe fb13 	bl	80065fe <USBD_LL_SetupStage>
}
 8007fd8:	bf00      	nop
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007ff2:	78fa      	ldrb	r2, [r7, #3]
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	4413      	add	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	440b      	add	r3, r1
 8008000:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	78fb      	ldrb	r3, [r7, #3]
 8008008:	4619      	mov	r1, r3
 800800a:	f7fe fb4d 	bl	80066a8 <USBD_LL_DataOutStage>
}
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b082      	sub	sp, #8
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	460b      	mov	r3, r1
 8008020:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008028:	78fa      	ldrb	r2, [r7, #3]
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	4613      	mov	r3, r2
 800802e:	00db      	lsls	r3, r3, #3
 8008030:	4413      	add	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	440b      	add	r3, r1
 8008036:	334c      	adds	r3, #76	; 0x4c
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	78fb      	ldrb	r3, [r7, #3]
 800803c:	4619      	mov	r1, r3
 800803e:	f7fe fbe6 	bl	800680e <USBD_LL_DataInStage>
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008058:	4618      	mov	r0, r3
 800805a:	f7fe fd1a 	bl	8006a92 <USBD_LL_SOF>
}
 800805e:	bf00      	nop
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800806e:	2301      	movs	r3, #1
 8008070:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d102      	bne.n	8008080 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
 800807e:	e008      	b.n	8008092 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	2b02      	cmp	r3, #2
 8008086:	d102      	bne.n	800808e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008088:	2301      	movs	r3, #1
 800808a:	73fb      	strb	r3, [r7, #15]
 800808c:	e001      	b.n	8008092 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800808e:	f7f8 fc97 	bl	80009c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008098:	7bfa      	ldrb	r2, [r7, #15]
 800809a:	4611      	mov	r1, r2
 800809c:	4618      	mov	r0, r3
 800809e:	f7fe fcba 	bl	8006a16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fc62 	bl	8006972 <USBD_LL_Reset>
}
 80080ae:	bf00      	nop
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
	...

080080b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fe fcb5 	bl	8006a36 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	6812      	ldr	r2, [r2, #0]
 80080da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080de:	f043 0301 	orr.w	r3, r3, #1
 80080e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d005      	beq.n	80080f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080ec:	4b04      	ldr	r3, [pc, #16]	; (8008100 <HAL_PCD_SuspendCallback+0x48>)
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	4a03      	ldr	r2, [pc, #12]	; (8008100 <HAL_PCD_SuspendCallback+0x48>)
 80080f2:	f043 0306 	orr.w	r3, r3, #6
 80080f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	e000ed00 	.word	0xe000ed00

08008104 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008112:	4618      	mov	r0, r3
 8008114:	f7fe fca5 	bl	8006a62 <USBD_LL_Resume>
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008132:	78fa      	ldrb	r2, [r7, #3]
 8008134:	4611      	mov	r1, r2
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe fcfd 	bl	8006b36 <USBD_LL_IsoOUTIncomplete>
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008156:	78fa      	ldrb	r2, [r7, #3]
 8008158:	4611      	mov	r1, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe fcb9 	bl	8006ad2 <USBD_LL_IsoINIncomplete>
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fd0f 	bl	8006b9a <USBD_LL_DevConnected>
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008192:	4618      	mov	r0, r3
 8008194:	f7fe fd0c 	bl	8006bb0 <USBD_LL_DevDisconnected>
}
 8008198:	bf00      	nop
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d13c      	bne.n	800822a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80081b0:	4a20      	ldr	r2, [pc, #128]	; (8008234 <USBD_LL_Init+0x94>)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a1e      	ldr	r2, [pc, #120]	; (8008234 <USBD_LL_Init+0x94>)
 80081bc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80081c0:	4b1c      	ldr	r3, [pc, #112]	; (8008234 <USBD_LL_Init+0x94>)
 80081c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80081c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80081c8:	4b1a      	ldr	r3, [pc, #104]	; (8008234 <USBD_LL_Init+0x94>)
 80081ca:	2204      	movs	r2, #4
 80081cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80081ce:	4b19      	ldr	r3, [pc, #100]	; (8008234 <USBD_LL_Init+0x94>)
 80081d0:	2202      	movs	r2, #2
 80081d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80081d4:	4b17      	ldr	r3, [pc, #92]	; (8008234 <USBD_LL_Init+0x94>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80081da:	4b16      	ldr	r3, [pc, #88]	; (8008234 <USBD_LL_Init+0x94>)
 80081dc:	2202      	movs	r2, #2
 80081de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80081e0:	4b14      	ldr	r3, [pc, #80]	; (8008234 <USBD_LL_Init+0x94>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80081e6:	4b13      	ldr	r3, [pc, #76]	; (8008234 <USBD_LL_Init+0x94>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80081ec:	4b11      	ldr	r3, [pc, #68]	; (8008234 <USBD_LL_Init+0x94>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80081f2:	4b10      	ldr	r3, [pc, #64]	; (8008234 <USBD_LL_Init+0x94>)
 80081f4:	2201      	movs	r2, #1
 80081f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80081f8:	4b0e      	ldr	r3, [pc, #56]	; (8008234 <USBD_LL_Init+0x94>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80081fe:	480d      	ldr	r0, [pc, #52]	; (8008234 <USBD_LL_Init+0x94>)
 8008200:	f7f9 ff5c 	bl	80020bc <HAL_PCD_Init>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800820a:	f7f8 fbd9 	bl	80009c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800820e:	2180      	movs	r1, #128	; 0x80
 8008210:	4808      	ldr	r0, [pc, #32]	; (8008234 <USBD_LL_Init+0x94>)
 8008212:	f7fb f9b4 	bl	800357e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008216:	2240      	movs	r2, #64	; 0x40
 8008218:	2100      	movs	r1, #0
 800821a:	4806      	ldr	r0, [pc, #24]	; (8008234 <USBD_LL_Init+0x94>)
 800821c:	f7fb f968 	bl	80034f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008220:	2280      	movs	r2, #128	; 0x80
 8008222:	2101      	movs	r1, #1
 8008224:	4803      	ldr	r0, [pc, #12]	; (8008234 <USBD_LL_Init+0x94>)
 8008226:	f7fb f963 	bl	80034f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	2000274c 	.word	0x2000274c

08008238 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800824e:	4618      	mov	r0, r3
 8008250:	f7fa f851 	bl	80022f6 <HAL_PCD_Start>
 8008254:	4603      	mov	r3, r0
 8008256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008258:	7bfb      	ldrb	r3, [r7, #15]
 800825a:	4618      	mov	r0, r3
 800825c:	f000 f942 	bl	80084e4 <USBD_Get_USB_Status>
 8008260:	4603      	mov	r3, r0
 8008262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008264:	7bbb      	ldrb	r3, [r7, #14]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	4608      	mov	r0, r1
 8008278:	4611      	mov	r1, r2
 800827a:	461a      	mov	r2, r3
 800827c:	4603      	mov	r3, r0
 800827e:	70fb      	strb	r3, [r7, #3]
 8008280:	460b      	mov	r3, r1
 8008282:	70bb      	strb	r3, [r7, #2]
 8008284:	4613      	mov	r3, r2
 8008286:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008296:	78bb      	ldrb	r3, [r7, #2]
 8008298:	883a      	ldrh	r2, [r7, #0]
 800829a:	78f9      	ldrb	r1, [r7, #3]
 800829c:	f7fa fd22 	bl	8002ce4 <HAL_PCD_EP_Open>
 80082a0:	4603      	mov	r3, r0
 80082a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 f91c 	bl	80084e4 <USBD_Get_USB_Status>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082d4:	78fa      	ldrb	r2, [r7, #3]
 80082d6:	4611      	mov	r1, r2
 80082d8:	4618      	mov	r0, r3
 80082da:	f7fa fd6b 	bl	8002db4 <HAL_PCD_EP_Close>
 80082de:	4603      	mov	r3, r0
 80082e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 f8fd 	bl	80084e4 <USBD_Get_USB_Status>
 80082ea:	4603      	mov	r3, r0
 80082ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008312:	78fa      	ldrb	r2, [r7, #3]
 8008314:	4611      	mov	r1, r2
 8008316:	4618      	mov	r0, r3
 8008318:	f7fa fe43 	bl	8002fa2 <HAL_PCD_EP_SetStall>
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	4618      	mov	r0, r3
 8008324:	f000 f8de 	bl	80084e4 <USBD_Get_USB_Status>
 8008328:	4603      	mov	r3, r0
 800832a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800832c:	7bbb      	ldrb	r3, [r7, #14]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	460b      	mov	r3, r1
 8008340:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008350:	78fa      	ldrb	r2, [r7, #3]
 8008352:	4611      	mov	r1, r2
 8008354:	4618      	mov	r0, r3
 8008356:	f7fa fe88 	bl	800306a <HAL_PCD_EP_ClrStall>
 800835a:	4603      	mov	r3, r0
 800835c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800835e:	7bfb      	ldrb	r3, [r7, #15]
 8008360:	4618      	mov	r0, r3
 8008362:	f000 f8bf 	bl	80084e4 <USBD_Get_USB_Status>
 8008366:	4603      	mov	r3, r0
 8008368:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800836a:	7bbb      	ldrb	r3, [r7, #14]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008386:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008388:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800838c:	2b00      	cmp	r3, #0
 800838e:	da0b      	bge.n	80083a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008390:	78fb      	ldrb	r3, [r7, #3]
 8008392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008396:	68f9      	ldr	r1, [r7, #12]
 8008398:	4613      	mov	r3, r2
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	440b      	add	r3, r1
 80083a2:	333e      	adds	r3, #62	; 0x3e
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	e00b      	b.n	80083c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083a8:	78fb      	ldrb	r3, [r7, #3]
 80083aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ae:	68f9      	ldr	r1, [r7, #12]
 80083b0:	4613      	mov	r3, r2
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	440b      	add	r3, r1
 80083ba:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80083be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	460b      	mov	r3, r1
 80083d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083e6:	78fa      	ldrb	r2, [r7, #3]
 80083e8:	4611      	mov	r1, r2
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fa fc55 	bl	8002c9a <HAL_PCD_SetAddress>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 f874 	bl	80084e4 <USBD_Get_USB_Status>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008400:	7bbb      	ldrb	r3, [r7, #14]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b086      	sub	sp, #24
 800840e:	af00      	add	r7, sp, #0
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	607a      	str	r2, [r7, #4]
 8008414:	603b      	str	r3, [r7, #0]
 8008416:	460b      	mov	r3, r1
 8008418:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008428:	7af9      	ldrb	r1, [r7, #11]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	f7fa fd6e 	bl	8002f0e <HAL_PCD_EP_Transmit>
 8008432:	4603      	mov	r3, r0
 8008434:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	4618      	mov	r0, r3
 800843a:	f000 f853 	bl	80084e4 <USBD_Get_USB_Status>
 800843e:	4603      	mov	r3, r0
 8008440:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008442:	7dbb      	ldrb	r3, [r7, #22]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	607a      	str	r2, [r7, #4]
 8008456:	603b      	str	r3, [r7, #0]
 8008458:	460b      	mov	r3, r1
 800845a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800846a:	7af9      	ldrb	r1, [r7, #11]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	f7fa fcea 	bl	8002e48 <HAL_PCD_EP_Receive>
 8008474:	4603      	mov	r3, r0
 8008476:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008478:	7dfb      	ldrb	r3, [r7, #23]
 800847a:	4618      	mov	r0, r3
 800847c:	f000 f832 	bl	80084e4 <USBD_Get_USB_Status>
 8008480:	4603      	mov	r3, r0
 8008482:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008484:	7dbb      	ldrb	r3, [r7, #22]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b082      	sub	sp, #8
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	460b      	mov	r3, r1
 8008498:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084a0:	78fa      	ldrb	r2, [r7, #3]
 80084a2:	4611      	mov	r1, r2
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fa fd1a 	bl	8002ede <HAL_PCD_EP_GetRxCount>
 80084aa:	4603      	mov	r3, r0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80084bc:	4b03      	ldr	r3, [pc, #12]	; (80084cc <USBD_static_malloc+0x18>)
}
 80084be:	4618      	mov	r0, r3
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	20002c58 	.word	0x20002c58

080084d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]

}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	4603      	mov	r3, r0
 80084ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	2b03      	cmp	r3, #3
 80084f6:	d817      	bhi.n	8008528 <USBD_Get_USB_Status+0x44>
 80084f8:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <USBD_Get_USB_Status+0x1c>)
 80084fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fe:	bf00      	nop
 8008500:	08008511 	.word	0x08008511
 8008504:	08008517 	.word	0x08008517
 8008508:	0800851d 	.word	0x0800851d
 800850c:	08008523 	.word	0x08008523
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	73fb      	strb	r3, [r7, #15]
    break;
 8008514:	e00b      	b.n	800852e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008516:	2303      	movs	r3, #3
 8008518:	73fb      	strb	r3, [r7, #15]
    break;
 800851a:	e008      	b.n	800852e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800851c:	2301      	movs	r3, #1
 800851e:	73fb      	strb	r3, [r7, #15]
    break;
 8008520:	e005      	b.n	800852e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008522:	2303      	movs	r3, #3
 8008524:	73fb      	strb	r3, [r7, #15]
    break;
 8008526:	e002      	b.n	800852e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008528:	2303      	movs	r3, #3
 800852a:	73fb      	strb	r3, [r7, #15]
    break;
 800852c:	bf00      	nop
  }
  return usb_status;
 800852e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d009      	beq.n	8008560 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800854c:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800854e:	461a      	mov	r2, r3
        err.type, err.code);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	4806      	ldr	r0, [pc, #24]	; (8008574 <ai_log_err+0x38>)
 800855a:	f002 fa49 	bl	800a9f0 <iprintf>
 800855e:	e008      	b.n	8008572 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8008560:	793b      	ldrb	r3, [r7, #4]
 8008562:	4619      	mov	r1, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800856a:	461a      	mov	r2, r3
 800856c:	4802      	ldr	r0, [pc, #8]	; (8008578 <ai_log_err+0x3c>)
 800856e:	f002 fa3f 	bl	800a9f0 <iprintf>

  do {} while (1);
 8008572:	e7fe      	b.n	8008572 <ai_log_err+0x36>
 8008574:	0800bb68 	.word	0x0800bb68
 8008578:	0800bb9c 	.word	0x0800bb9c

0800857c <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8008584:	2200      	movs	r2, #0
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	4828      	ldr	r0, [pc, #160]	; (800862c <ai_boostrap+0xb0>)
 800858a:	f000 f9a3 	bl	80088d4 <ai_network_create_and_init>
 800858e:	4603      	mov	r3, r0
 8008590:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8008592:	7b3b      	ldrb	r3, [r7, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d006      	beq.n	80085a6 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 8008598:	4925      	ldr	r1, [pc, #148]	; (8008630 <ai_boostrap+0xb4>)
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f7ff ffce 	bl	800853c <ai_log_err>
    return -1;
 80085a0:	f04f 33ff 	mov.w	r3, #4294967295
 80085a4:	e03e      	b.n	8008624 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 80085a6:	4b21      	ldr	r3, [pc, #132]	; (800862c <ai_boostrap+0xb0>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2100      	movs	r1, #0
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fa05 	bl	80089bc <ai_network_inputs_get>
 80085b2:	4603      	mov	r3, r0
 80085b4:	4a1f      	ldr	r2, [pc, #124]	; (8008634 <ai_boostrap+0xb8>)
 80085b6:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80085b8:	4b1c      	ldr	r3, [pc, #112]	; (800862c <ai_boostrap+0xb0>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2100      	movs	r1, #0
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fa16 	bl	80089f0 <ai_network_outputs_get>
 80085c4:	4603      	mov	r3, r0
 80085c6:	4a1c      	ldr	r2, [pc, #112]	; (8008638 <ai_boostrap+0xbc>)
 80085c8:	6013      	str	r3, [r2, #0]
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
	data_ins[idx] = ai_input[idx].data;
  }
#else
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 80085ca:	2300      	movs	r3, #0
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	e00f      	b.n	80085f0 <ai_boostrap+0x74>
	  ai_input[idx].data = data_ins[idx];
 80085d0:	4b18      	ldr	r3, [pc, #96]	; (8008634 <ai_boostrap+0xb8>)
 80085d2:	6819      	ldr	r1, [r3, #0]
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	4613      	mov	r3, r2
 80085d8:	00db      	lsls	r3, r3, #3
 80085da:	1a9b      	subs	r3, r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	440b      	add	r3, r1
 80085e0:	4916      	ldr	r1, [pc, #88]	; (800863c <ai_boostrap+0xc0>)
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80085e8:	605a      	str	r2, [r3, #4]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	3301      	adds	r3, #1
 80085ee:	617b      	str	r3, [r7, #20]
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	ddec      	ble.n	80085d0 <ai_boostrap+0x54>
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	data_outs[idx] = ai_output[idx].data;
  }
#else
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 80085f6:	2300      	movs	r3, #0
 80085f8:	613b      	str	r3, [r7, #16]
 80085fa:	e00f      	b.n	800861c <ai_boostrap+0xa0>
	ai_output[idx].data = data_outs[idx];
 80085fc:	4b0e      	ldr	r3, [pc, #56]	; (8008638 <ai_boostrap+0xbc>)
 80085fe:	6819      	ldr	r1, [r3, #0]
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	4613      	mov	r3, r2
 8008604:	00db      	lsls	r3, r3, #3
 8008606:	1a9b      	subs	r3, r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	440b      	add	r3, r1
 800860c:	490c      	ldr	r1, [pc, #48]	; (8008640 <ai_boostrap+0xc4>)
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008614:	605a      	str	r2, [r3, #4]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	3301      	adds	r3, #1
 800861a:	613b      	str	r3, [r7, #16]
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	2b00      	cmp	r3, #0
 8008620:	ddec      	ble.n	80085fc <ai_boostrap+0x80>
  }
#endif

  return 0;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	20003b08 	.word	0x20003b08
 8008630:	0800bbcc 	.word	0x0800bbcc
 8008634:	20003b0c 	.word	0x20003b0c
 8008638:	20003b10 	.word	0x20003b10
 800863c:	200000fc 	.word	0x200000fc
 8008640:	20000100 	.word	0x20000100

08008644 <ai_run>:

static int ai_run(void)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 800864a:	4b0f      	ldr	r3, [pc, #60]	; (8008688 <ai_run+0x44>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a0f      	ldr	r2, [pc, #60]	; (800868c <ai_run+0x48>)
 8008650:	6811      	ldr	r1, [r2, #0]
 8008652:	4a0f      	ldr	r2, [pc, #60]	; (8008690 <ai_run+0x4c>)
 8008654:	6812      	ldr	r2, [r2, #0]
 8008656:	4618      	mov	r0, r3
 8008658:	f000 fa20 	bl	8008a9c <ai_network_run>
 800865c:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d00c      	beq.n	800867e <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 8008664:	4b08      	ldr	r3, [pc, #32]	; (8008688 <ai_run+0x44>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4618      	mov	r0, r3
 800866a:	f000 f911 	bl	8008890 <ai_network_get_error>
 800866e:	4603      	mov	r3, r0
 8008670:	4908      	ldr	r1, [pc, #32]	; (8008694 <ai_run+0x50>)
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff ff62 	bl	800853c <ai_log_err>
        "ai_network_run");
    return -1;
 8008678:	f04f 33ff 	mov.w	r3, #4294967295
 800867c:	e000      	b.n	8008680 <ai_run+0x3c>
  }

  return 0;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	20003b08 	.word	0x20003b08
 800868c:	20003b0c 	.word	0x20003b0c
 8008690:	20003b10 	.word	0x20003b10
 8008694:	0800bbe8 	.word	0x0800bbe8

08008698 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
extern uint8_t AiInput[3136];
extern uint8_t AiOutput[40];
int acquire_and_process_data(ai_i8* data[])
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* fill the inputs of the c-model */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++ )
 80086a0:	2300      	movs	r3, #0
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	e019      	b.n	80086da <acquire_and_process_data+0x42>
  {
	  for (int idx2=0; idx2 < 3136; idx2++)
 80086a6:	2300      	movs	r3, #0
 80086a8:	60bb      	str	r3, [r7, #8]
 80086aa:	e00f      	b.n	80086cc <acquire_and_process_data+0x34>
	  {
		  data[idx][idx2] = (ai_i8) AiInput[idx2];
 80086ac:	4a10      	ldr	r2, [pc, #64]	; (80086f0 <acquire_and_process_data+0x58>)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	4413      	add	r3, r2
 80086b2:	7819      	ldrb	r1, [r3, #0]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	4413      	add	r3, r2
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	4413      	add	r3, r2
 80086c2:	b24a      	sxtb	r2, r1
 80086c4:	701a      	strb	r2, [r3, #0]
	  for (int idx2=0; idx2 < 3136; idx2++)
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	3301      	adds	r3, #1
 80086ca:	60bb      	str	r3, [r7, #8]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f5b3 6f44 	cmp.w	r3, #3136	; 0xc40
 80086d2:	dbeb      	blt.n	80086ac <acquire_and_process_data+0x14>
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++ )
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3301      	adds	r3, #1
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	dde2      	ble.n	80086a6 <acquire_and_process_data+0xe>
	  }
  }

  return 0;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	200008e0 	.word	0x200008e0

080086f4 <post_process>:

int post_process(ai_i8* data[])
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* process the predictions */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++ )
 80086fc:	2300      	movs	r3, #0
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	e01a      	b.n	8008738 <post_process+0x44>
  {
  	  for (int idx2=0; idx2 < 40; idx2++)
 8008702:	2300      	movs	r3, #0
 8008704:	60bb      	str	r3, [r7, #8]
 8008706:	e011      	b.n	800872c <post_process+0x38>
  	  {
  		  AiOutput[idx2] = (uint8_t) data[idx][idx2];
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	4413      	add	r3, r2
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	4413      	add	r3, r2
 8008716:	f993 3000 	ldrsb.w	r3, [r3]
 800871a:	b2d9      	uxtb	r1, r3
 800871c:	4a0b      	ldr	r2, [pc, #44]	; (800874c <post_process+0x58>)
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	4413      	add	r3, r2
 8008722:	460a      	mov	r2, r1
 8008724:	701a      	strb	r2, [r3, #0]
  	  for (int idx2=0; idx2 < 40; idx2++)
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	3301      	adds	r3, #1
 800872a:	60bb      	str	r3, [r7, #8]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2b27      	cmp	r3, #39	; 0x27
 8008730:	ddea      	ble.n	8008708 <post_process+0x14>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++ )
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3301      	adds	r3, #1
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	dde1      	ble.n	8008702 <post_process+0xe>
  	  }
    }

  return 1;
 800873e:	2301      	movs	r3, #1
}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	20001520 	.word	0x20001520

08008750 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8008754:	4803      	ldr	r0, [pc, #12]	; (8008764 <MX_X_CUBE_AI_Init+0x14>)
 8008756:	f002 f9d1 	bl	800aafc <puts>

  ai_boostrap(data_activations0);
 800875a:	4803      	ldr	r0, [pc, #12]	; (8008768 <MX_X_CUBE_AI_Init+0x18>)
 800875c:	f7ff ff0e 	bl	800857c <ai_boostrap>
    /* USER CODE END 5 */
}
 8008760:	bf00      	nop
 8008762:	bd80      	pop	{r7, pc}
 8008764:	0800bbf8 	.word	0x0800bbf8
 8008768:	20000104 	.word	0x20000104

0800876c <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8008772:	f04f 33ff 	mov.w	r3, #4294967295
 8008776:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 8008778:	480f      	ldr	r0, [pc, #60]	; (80087b8 <MX_X_CUBE_AI_Process+0x4c>)
 800877a:	f002 f9bf 	bl	800aafc <puts>

  if (network) {
 800877e:	4b0f      	ldr	r3, [pc, #60]	; (80087bc <MX_X_CUBE_AI_Process+0x50>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d013      	beq.n	80087ae <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 8008786:	480e      	ldr	r0, [pc, #56]	; (80087c0 <MX_X_CUBE_AI_Process+0x54>)
 8008788:	f7ff ff86 	bl	8008698 <acquire_and_process_data>
 800878c:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d102      	bne.n	800879a <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 8008794:	f7ff ff56 	bl	8008644 <ai_run>
 8008798:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d103      	bne.n	80087a8 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 80087a0:	4808      	ldr	r0, [pc, #32]	; (80087c4 <MX_X_CUBE_AI_Process+0x58>)
 80087a2:	f7ff ffa7 	bl	80086f4 <post_process>
 80087a6:	6078      	str	r0, [r7, #4]
    } while (res==0);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0eb      	beq.n	8008786 <MX_X_CUBE_AI_Process+0x1a>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
    ai_log_err(err, "Process has FAILED");
  }
  */
    /* USER CODE END 6 */
}
 80087ae:	bf00      	nop
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	0800bc18 	.word	0x0800bc18
 80087bc:	20003b08 	.word	0x20003b08
 80087c0:	200000fc 	.word	0x200000fc
 80087c4:	20000100 	.word	0x20000100

080087c8 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 80087d6:	f107 030c 	add.w	r3, r7, #12
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	2101      	movs	r1, #1
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fa34 	bl	8008c4c <ai_platform_get_activations_map>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d007      	beq.n	80087fa <network_configure_activations+0x32>
    /* Updating activations (byte) offsets */
    dense_1_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4a08      	ldr	r2, [pc, #32]	; (8008810 <network_configure_activations+0x48>)
 80087ee:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4a07      	ldr	r2, [pc, #28]	; (8008810 <network_configure_activations+0x48>)
 80087f4:	60d3      	str	r3, [r2, #12]
    
    return true;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e005      	b.n	8008806 <network_configure_activations+0x3e>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80087fa:	2213      	movs	r2, #19
 80087fc:	2130      	movs	r1, #48	; 0x30
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fb0c 	bl	8008e1c <ai_platform_network_set_error>
  return false;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000118 	.word	0x20000118

08008814 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8008822:	f107 030c 	add.w	r3, r7, #12
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	2101      	movs	r1, #1
 800882a:	4618      	mov	r0, r3
 800882c:	f000 f9be 	bl	8008bac <ai_platform_get_weights_map>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d01d      	beq.n	8008872 <network_configure_weights+0x5e>
    /* Updating weights (byte) offsets */
    
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8008836:	4b14      	ldr	r3, [pc, #80]	; (8008888 <network_configure_weights+0x74>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800883e:	4a12      	ldr	r2, [pc, #72]	; (8008888 <network_configure_weights+0x74>)
 8008840:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(weights_map[0] + 0);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4a10      	ldr	r2, [pc, #64]	; (8008888 <network_configure_weights+0x74>)
 8008846:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4a0f      	ldr	r2, [pc, #60]	; (8008888 <network_configure_weights+0x74>)
 800884c:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800884e:	4b0f      	ldr	r3, [pc, #60]	; (800888c <network_configure_weights+0x78>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008856:	4a0d      	ldr	r2, [pc, #52]	; (800888c <network_configure_weights+0x78>)
 8008858:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(weights_map[0] + 31360);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f503 43f5 	add.w	r3, r3, #31360	; 0x7a80
 8008860:	4a0a      	ldr	r2, [pc, #40]	; (800888c <network_configure_weights+0x78>)
 8008862:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(weights_map[0] + 31360);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f503 43f5 	add.w	r3, r3, #31360	; 0x7a80
 800886a:	4a08      	ldr	r2, [pc, #32]	; (800888c <network_configure_weights+0x78>)
 800886c:	60d3      	str	r3, [r2, #12]
    return true;
 800886e:	2301      	movs	r3, #1
 8008870:	e005      	b.n	800887e <network_configure_weights+0x6a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8008872:	2212      	movs	r2, #18
 8008874:	2130      	movs	r1, #48	; 0x30
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fad0 	bl	8008e1c <ai_platform_network_set_error>
  return false;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20000138 	.word	0x20000138
 800888c:	20000148 	.word	0x20000148

08008890 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fa45 	bl	8008d28 <ai_platform_network_get_error>
 800889e:	4603      	mov	r3, r0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80088b2:	2300      	movs	r3, #0
 80088b4:	9301      	str	r3, [sp, #4]
 80088b6:	2305      	movs	r3, #5
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	2301      	movs	r3, #1
 80088bc:	4a04      	ldr	r2, [pc, #16]	; (80088d0 <ai_network_create+0x28>)
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fc9f 	bl	8009204 <ai_platform_network_create>
 80088c6:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	200003c8 	.word	0x200003c8

080088d4 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b096      	sub	sp, #88	; 0x58
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80088e0:	2100      	movs	r1, #0
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f7ff ffe0 	bl	80088a8 <ai_network_create>
 80088e8:	4603      	mov	r3, r0
 80088ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 80088ec:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <ai_network_create_and_init+0x24>
        return err;
 80088f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f6:	e05d      	b.n	80089b4 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 80088f8:	f107 0314 	add.w	r3, r7, #20
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 f8dd 	bl	8008abc <ai_network_data_params_get>
 8008902:	4603      	mov	r3, r0
 8008904:	f083 0301 	eor.w	r3, r3, #1
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d008      	beq.n	8008920 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff ffbc 	bl	8008890 <ai_network_get_error>
 8008918:	4603      	mov	r3, r0
 800891a:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800891c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800891e:	e049      	b.n	80089b4 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d016      	beq.n	8008954 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8008926:	2300      	movs	r3, #0
 8008928:	657b      	str	r3, [r7, #84]	; 0x54
 800892a:	e00e      	b.n	800894a <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800892c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800892e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	4413      	add	r3, r2
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	f107 0314 	add.w	r3, r7, #20
 800893c:	330c      	adds	r3, #12
 800893e:	4618      	mov	r0, r3
 8008940:	f000 f91e 	bl	8008b80 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8008944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008946:	3301      	adds	r3, #1
 8008948:	657b      	str	r3, [r7, #84]	; 0x54
 800894a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800894c:	461a      	mov	r2, r3
 800894e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008950:	4293      	cmp	r3, r2
 8008952:	dbeb      	blt.n	800892c <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d016      	beq.n	8008988 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800895a:	2300      	movs	r3, #0
 800895c:	653b      	str	r3, [r7, #80]	; 0x50
 800895e:	e00e      	b.n	800897e <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8008960:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	4413      	add	r3, r2
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	f107 0314 	add.w	r3, r7, #20
 8008970:	3304      	adds	r3, #4
 8008972:	4618      	mov	r0, r3
 8008974:	f000 f904 	bl	8008b80 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8008978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800897a:	3301      	adds	r3, #1
 800897c:	653b      	str	r3, [r7, #80]	; 0x50
 800897e:	8b7b      	ldrh	r3, [r7, #26]
 8008980:	461a      	mov	r2, r3
 8008982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008984:	4293      	cmp	r3, r2
 8008986:	dbeb      	blt.n	8008960 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f107 0214 	add.w	r2, r7, #20
 8008990:	4611      	mov	r1, r2
 8008992:	4618      	mov	r0, r3
 8008994:	f000 f846 	bl	8008a24 <ai_network_init>
 8008998:	4603      	mov	r3, r0
 800899a:	f083 0301 	eor.w	r3, r3, #1
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d006      	beq.n	80089b2 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff ff71 	bl	8008890 <ai_network_get_error>
 80089ae:	4603      	mov	r3, r0
 80089b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80089b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3758      	adds	r7, #88	; 0x58
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d104      	bne.n	80089d6 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80089cc:	4b06      	ldr	r3, [pc, #24]	; (80089e8 <ai_network_inputs_get+0x2c>)
 80089ce:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a06      	ldr	r2, [pc, #24]	; (80089ec <ai_network_inputs_get+0x30>)
 80089d4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fa25 	bl	8008e28 <ai_platform_inputs_get>
 80089de:	4603      	mov	r3, r0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	200003c8 	.word	0x200003c8
 80089ec:	a1c00100 	.word	0xa1c00100

080089f0 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d104      	bne.n	8008a0a <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8008a00:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <ai_network_outputs_get+0x2c>)
 8008a02:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a06      	ldr	r2, [pc, #24]	; (8008a20 <ai_network_outputs_get+0x30>)
 8008a08:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 faff 	bl	8009010 <ai_platform_outputs_get>
 8008a12:	4603      	mov	r3, r0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	200003c8 	.word	0x200003c8
 8008a20:	a1c00100 	.word	0xa1c00100

08008a24 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fcc7 	bl	80093c4 <ai_platform_network_init>
 8008a36:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <ai_network_init+0x1e>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	e028      	b.n	8008a94 <ai_network_init+0x70>

  ai_bool ok = true;
 8008a42:	2301      	movs	r3, #1
 8008a44:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f7ff fee3 	bl	8008814 <network_configure_weights>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	461a      	mov	r2, r3
 8008a52:	7afb      	ldrb	r3, [r7, #11]
 8008a54:	4013      	ands	r3, r2
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	bf14      	ite	ne
 8008a5a:	2301      	movne	r3, #1
 8008a5c:	2300      	moveq	r3, #0
 8008a5e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f7ff feb0 	bl	80087c8 <network_configure_activations>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	7afb      	ldrb	r3, [r7, #11]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bf14      	ite	ne
 8008a74:	2301      	movne	r3, #1
 8008a76:	2300      	moveq	r3, #0
 8008a78:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fdae 	bl	80095dc <ai_platform_network_post_init>
 8008a80:	4603      	mov	r3, r0
 8008a82:	461a      	mov	r2, r3
 8008a84:	7afb      	ldrb	r3, [r7, #11]
 8008a86:	4013      	ands	r3, r2
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	bf14      	ite	ne
 8008a8c:	2301      	movne	r3, #1
 8008a8e:	2300      	moveq	r3, #0
 8008a90:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008a92:	7afb      	ldrb	r3, [r7, #11]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	68b9      	ldr	r1, [r7, #8]
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f000 fe29 	bl	8009704 <ai_platform_network_process>
 8008ab2:	4603      	mov	r3, r0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <ai_network_data_params_get+0x12>
 8008aca:	2300      	movs	r3, #0
 8008acc:	e016      	b.n	8008afc <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8008ace:	4a0d      	ldr	r2, [pc, #52]	; (8008b04 <ai_network_data_params_get+0x48>)
 8008ad0:	f107 0310 	add.w	r3, r7, #16
 8008ad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ad8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8008adc:	4a0a      	ldr	r2, [pc, #40]	; (8008b08 <ai_network_data_params_get+0x4c>)
 8008ade:	f107 0308 	add.w	r3, r7, #8
 8008ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ae6:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8008aea:	f107 0210 	add.w	r2, r7, #16
 8008aee:	f107 0308 	add.w	r3, r7, #8
 8008af2:	4619      	mov	r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f8fb 	bl	8008cf0 <ai_platform_bind_network_params>
 8008afa:	4603      	mov	r3, r0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	0800bc54 	.word	0x0800bc54
 8008b08:	0800bc5c 	.word	0x0800bc5c

08008b0c <ai_buffer_get_size>:
 8008b0c:	b358      	cbz	r0, 8008b66 <ai_buffer_get_size+0x5a>
 8008b0e:	b430      	push	{r4, r5}
 8008b10:	6803      	ldr	r3, [r0, #0]
 8008b12:	4d15      	ldr	r5, [pc, #84]	; (8008b68 <ai_buffer_get_size+0x5c>)
 8008b14:	6984      	ldr	r4, [r0, #24]
 8008b16:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008b1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008b1e:	42ab      	cmp	r3, r5
 8008b20:	6862      	ldr	r2, [r4, #4]
 8008b22:	d01a      	beq.n	8008b5a <ai_buffer_get_size+0x4e>
 8008b24:	7d03      	ldrb	r3, [r0, #20]
 8008b26:	6941      	ldr	r1, [r0, #20]
 8008b28:	f1a3 0301 	sub.w	r3, r3, #1
 8008b2c:	fab3 f383 	clz	r3, r3
 8008b30:	095b      	lsrs	r3, r3, #5
 8008b32:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8008b36:	428b      	cmp	r3, r1
 8008b38:	da0b      	bge.n	8008b52 <ai_buffer_get_size+0x46>
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d102      	bne.n	8008b44 <ai_buffer_get_size+0x38>
 8008b3e:	2902      	cmp	r1, #2
 8008b40:	d007      	beq.n	8008b52 <ai_buffer_get_size+0x46>
 8008b42:	2302      	movs	r3, #2
 8008b44:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	428b      	cmp	r3, r1
 8008b4c:	fb00 f202 	mul.w	r2, r0, r2
 8008b50:	d1f3      	bne.n	8008b3a <ai_buffer_get_size+0x2e>
 8008b52:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8008b56:	bc30      	pop	{r4, r5}
 8008b58:	4770      	bx	lr
 8008b5a:	2900      	cmp	r1, #0
 8008b5c:	d0e2      	beq.n	8008b24 <ai_buffer_get_size+0x18>
 8008b5e:	321f      	adds	r2, #31
 8008b60:	f022 021f 	bic.w	r2, r2, #31
 8008b64:	e7de      	b.n	8008b24 <ai_buffer_get_size+0x18>
 8008b66:	4770      	bx	lr
 8008b68:	000400c0 	.word	0x000400c0

08008b6c <ai_buffer_array_sane>:
 8008b6c:	b138      	cbz	r0, 8008b7e <ai_buffer_array_sane+0x12>
 8008b6e:	6843      	ldr	r3, [r0, #4]
 8008b70:	b123      	cbz	r3, 8008b7c <ai_buffer_array_sane+0x10>
 8008b72:	8840      	ldrh	r0, [r0, #2]
 8008b74:	3000      	adds	r0, #0
 8008b76:	bf18      	it	ne
 8008b78:	2001      	movne	r0, #1
 8008b7a:	4770      	bx	lr
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	4770      	bx	lr

08008b80 <ai_buffer_array_item_set_address>:
 8008b80:	b120      	cbz	r0, 8008b8c <ai_buffer_array_item_set_address+0xc>
 8008b82:	6843      	ldr	r3, [r0, #4]
 8008b84:	b11b      	cbz	r3, 8008b8e <ai_buffer_array_item_set_address+0xe>
 8008b86:	8840      	ldrh	r0, [r0, #2]
 8008b88:	b918      	cbnz	r0, 8008b92 <ai_buffer_array_item_set_address+0x12>
 8008b8a:	4770      	bx	lr
 8008b8c:	4770      	bx	lr
 8008b8e:	4618      	mov	r0, r3
 8008b90:	4770      	bx	lr
 8008b92:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8008b96:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 8008b9a:	d0f7      	beq.n	8008b8c <ai_buffer_array_item_set_address+0xc>
 8008b9c:	6042      	str	r2, [r0, #4]
 8008b9e:	2001      	movs	r0, #1
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop

08008ba4 <_ai_platform_acquire_crc>:
 8008ba4:	2001      	movs	r0, #1
 8008ba6:	4770      	bx	lr

08008ba8 <_ai_platform_release_crc>:
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop

08008bac <ai_platform_get_weights_map>:
 8008bac:	b192      	cbz	r2, 8008bd4 <ai_platform_get_weights_map+0x28>
 8008bae:	b188      	cbz	r0, 8008bd4 <ai_platform_get_weights_map+0x28>
 8008bb0:	b181      	cbz	r1, 8008bd4 <ai_platform_get_weights_map+0x28>
 8008bb2:	b570      	push	{r4, r5, r6, lr}
 8008bb4:	4b24      	ldr	r3, [pc, #144]	; (8008c48 <ai_platform_get_weights_map+0x9c>)
 8008bb6:	6814      	ldr	r4, [r2, #0]
 8008bb8:	429c      	cmp	r4, r3
 8008bba:	d00d      	beq.n	8008bd8 <ai_platform_get_weights_map+0x2c>
 8008bbc:	6854      	ldr	r4, [r2, #4]
 8008bbe:	b194      	cbz	r4, 8008be6 <ai_platform_get_weights_map+0x3a>
 8008bc0:	6825      	ldr	r5, [r4, #0]
 8008bc2:	429d      	cmp	r5, r3
 8008bc4:	d027      	beq.n	8008c16 <ai_platform_get_weights_map+0x6a>
 8008bc6:	6004      	str	r4, [r0, #0]
 8008bc8:	f1a1 0001 	sub.w	r0, r1, #1
 8008bcc:	fab0 f080 	clz	r0, r0
 8008bd0:	0940      	lsrs	r0, r0, #5
 8008bd2:	bd70      	pop	{r4, r5, r6, pc}
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	4770      	bx	lr
 8008bd8:	4605      	mov	r5, r0
 8008bda:	1d10      	adds	r0, r2, #4
 8008bdc:	4616      	mov	r6, r2
 8008bde:	460c      	mov	r4, r1
 8008be0:	f7ff ffc4 	bl	8008b6c <ai_buffer_array_sane>
 8008be4:	b908      	cbnz	r0, 8008bea <ai_platform_get_weights_map+0x3e>
 8008be6:	2000      	movs	r0, #0
 8008be8:	bd70      	pop	{r4, r5, r6, pc}
 8008bea:	88f3      	ldrh	r3, [r6, #6]
 8008bec:	429c      	cmp	r4, r3
 8008bee:	d1fa      	bne.n	8008be6 <ai_platform_get_weights_map+0x3a>
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	1f2b      	subs	r3, r5, #4
 8008bf4:	4608      	mov	r0, r1
 8008bf6:	68b2      	ldr	r2, [r6, #8]
 8008bf8:	440a      	add	r2, r1
 8008bfa:	311c      	adds	r1, #28
 8008bfc:	6852      	ldr	r2, [r2, #4]
 8008bfe:	b12a      	cbz	r2, 8008c0c <ai_platform_get_weights_map+0x60>
 8008c00:	3001      	adds	r0, #1
 8008c02:	4284      	cmp	r4, r0
 8008c04:	f843 2f04 	str.w	r2, [r3, #4]!
 8008c08:	d1f5      	bne.n	8008bf6 <ai_platform_get_weights_map+0x4a>
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	1a20      	subs	r0, r4, r0
 8008c0e:	fab0 f080 	clz	r0, r0
 8008c12:	0940      	lsrs	r0, r0, #5
 8008c14:	bd70      	pop	{r4, r5, r6, pc}
 8008c16:	6863      	ldr	r3, [r4, #4]
 8008c18:	42ab      	cmp	r3, r5
 8008c1a:	f104 0404 	add.w	r4, r4, #4
 8008c1e:	d0e2      	beq.n	8008be6 <ai_platform_get_weights_map+0x3a>
 8008c20:	3804      	subs	r0, #4
 8008c22:	4626      	mov	r6, r4
 8008c24:	2200      	movs	r2, #0
 8008c26:	e003      	b.n	8008c30 <ai_platform_get_weights_map+0x84>
 8008c28:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8008c2c:	42ab      	cmp	r3, r5
 8008c2e:	d0da      	beq.n	8008be6 <ai_platform_get_weights_map+0x3a>
 8008c30:	3201      	adds	r2, #1
 8008c32:	4291      	cmp	r1, r2
 8008c34:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c38:	d1f6      	bne.n	8008c28 <ai_platform_get_weights_map+0x7c>
 8008c3a:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8008c3e:	4b02      	ldr	r3, [pc, #8]	; (8008c48 <ai_platform_get_weights_map+0x9c>)
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d1d0      	bne.n	8008be6 <ai_platform_get_weights_map+0x3a>
 8008c44:	2001      	movs	r0, #1
 8008c46:	bd70      	pop	{r4, r5, r6, pc}
 8008c48:	a1facade 	.word	0xa1facade

08008c4c <ai_platform_get_activations_map>:
 8008c4c:	b192      	cbz	r2, 8008c74 <ai_platform_get_activations_map+0x28>
 8008c4e:	b188      	cbz	r0, 8008c74 <ai_platform_get_activations_map+0x28>
 8008c50:	b181      	cbz	r1, 8008c74 <ai_platform_get_activations_map+0x28>
 8008c52:	b570      	push	{r4, r5, r6, lr}
 8008c54:	4b25      	ldr	r3, [pc, #148]	; (8008cec <ai_platform_get_activations_map+0xa0>)
 8008c56:	6814      	ldr	r4, [r2, #0]
 8008c58:	429c      	cmp	r4, r3
 8008c5a:	d00d      	beq.n	8008c78 <ai_platform_get_activations_map+0x2c>
 8008c5c:	6a14      	ldr	r4, [r2, #32]
 8008c5e:	b19c      	cbz	r4, 8008c88 <ai_platform_get_activations_map+0x3c>
 8008c60:	6825      	ldr	r5, [r4, #0]
 8008c62:	429d      	cmp	r5, r3
 8008c64:	d028      	beq.n	8008cb8 <ai_platform_get_activations_map+0x6c>
 8008c66:	6004      	str	r4, [r0, #0]
 8008c68:	f1a1 0001 	sub.w	r0, r1, #1
 8008c6c:	fab0 f080 	clz	r0, r0
 8008c70:	0940      	lsrs	r0, r0, #5
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
 8008c74:	2000      	movs	r0, #0
 8008c76:	4770      	bx	lr
 8008c78:	4605      	mov	r5, r0
 8008c7a:	f102 000c 	add.w	r0, r2, #12
 8008c7e:	4616      	mov	r6, r2
 8008c80:	460c      	mov	r4, r1
 8008c82:	f7ff ff73 	bl	8008b6c <ai_buffer_array_sane>
 8008c86:	b908      	cbnz	r0, 8008c8c <ai_platform_get_activations_map+0x40>
 8008c88:	2000      	movs	r0, #0
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	89f3      	ldrh	r3, [r6, #14]
 8008c8e:	429c      	cmp	r4, r3
 8008c90:	d1fa      	bne.n	8008c88 <ai_platform_get_activations_map+0x3c>
 8008c92:	2100      	movs	r1, #0
 8008c94:	1f2b      	subs	r3, r5, #4
 8008c96:	4608      	mov	r0, r1
 8008c98:	6932      	ldr	r2, [r6, #16]
 8008c9a:	440a      	add	r2, r1
 8008c9c:	311c      	adds	r1, #28
 8008c9e:	6852      	ldr	r2, [r2, #4]
 8008ca0:	b12a      	cbz	r2, 8008cae <ai_platform_get_activations_map+0x62>
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	4284      	cmp	r4, r0
 8008ca6:	f843 2f04 	str.w	r2, [r3, #4]!
 8008caa:	d1f5      	bne.n	8008c98 <ai_platform_get_activations_map+0x4c>
 8008cac:	4620      	mov	r0, r4
 8008cae:	1a20      	subs	r0, r4, r0
 8008cb0:	fab0 f080 	clz	r0, r0
 8008cb4:	0940      	lsrs	r0, r0, #5
 8008cb6:	bd70      	pop	{r4, r5, r6, pc}
 8008cb8:	6863      	ldr	r3, [r4, #4]
 8008cba:	42ab      	cmp	r3, r5
 8008cbc:	f104 0404 	add.w	r4, r4, #4
 8008cc0:	d0e2      	beq.n	8008c88 <ai_platform_get_activations_map+0x3c>
 8008cc2:	3804      	subs	r0, #4
 8008cc4:	4626      	mov	r6, r4
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	e003      	b.n	8008cd2 <ai_platform_get_activations_map+0x86>
 8008cca:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8008cce:	42ab      	cmp	r3, r5
 8008cd0:	d0da      	beq.n	8008c88 <ai_platform_get_activations_map+0x3c>
 8008cd2:	3201      	adds	r2, #1
 8008cd4:	4291      	cmp	r1, r2
 8008cd6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008cda:	d1f6      	bne.n	8008cca <ai_platform_get_activations_map+0x7e>
 8008cdc:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8008ce0:	4b02      	ldr	r3, [pc, #8]	; (8008cec <ai_platform_get_activations_map+0xa0>)
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d1d0      	bne.n	8008c88 <ai_platform_get_activations_map+0x3c>
 8008ce6:	2001      	movs	r0, #1
 8008ce8:	bd70      	pop	{r4, r5, r6, pc}
 8008cea:	bf00      	nop
 8008cec:	a1facade 	.word	0xa1facade

08008cf0 <ai_platform_bind_network_params>:
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	b190      	cbz	r0, 8008d1a <ai_platform_bind_network_params+0x2a>
 8008cf4:	b1a1      	cbz	r1, 8008d20 <ai_platform_bind_network_params+0x30>
 8008cf6:	b18a      	cbz	r2, 8008d1c <ai_platform_bind_network_params+0x2c>
 8008cf8:	b410      	push	{r4}
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	4809      	ldr	r0, [pc, #36]	; (8008d24 <ai_platform_bind_network_params+0x34>)
 8008cfe:	f844 0b04 	str.w	r0, [r4], #4
 8008d02:	c903      	ldmia	r1, {r0, r1}
 8008d04:	e884 0003 	stmia.w	r4, {r0, r1}
 8008d08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d0c:	330c      	adds	r3, #12
 8008d0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008d12:	2001      	movs	r0, #1
 8008d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	4770      	bx	lr
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4770      	bx	lr
 8008d20:	4608      	mov	r0, r1
 8008d22:	4770      	bx	lr
 8008d24:	a1facade 	.word	0xa1facade

08008d28 <ai_platform_network_get_error>:
 8008d28:	b510      	push	{r4, lr}
 8008d2a:	b120      	cbz	r0, 8008d36 <ai_platform_network_get_error+0xe>
 8008d2c:	4b32      	ldr	r3, [pc, #200]	; (8008df8 <ai_platform_network_get_error+0xd0>)
 8008d2e:	6802      	ldr	r2, [r0, #0]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	4604      	mov	r4, r0
 8008d34:	d02e      	beq.n	8008d94 <ai_platform_network_get_error+0x6c>
 8008d36:	4a31      	ldr	r2, [pc, #196]	; (8008dfc <ai_platform_network_get_error+0xd4>)
 8008d38:	6813      	ldr	r3, [r2, #0]
 8008d3a:	f023 0301 	bic.w	r3, r3, #1
 8008d3e:	6013      	str	r3, [r2, #0]
 8008d40:	f7ff ff30 	bl	8008ba4 <_ai_platform_acquire_crc>
 8008d44:	4b2e      	ldr	r3, [pc, #184]	; (8008e00 <ai_platform_network_get_error+0xd8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d50:	d00d      	beq.n	8008d6e <ai_platform_network_get_error+0x46>
 8008d52:	4b2c      	ldr	r3, [pc, #176]	; (8008e04 <ai_platform_network_get_error+0xdc>)
 8008d54:	2201      	movs	r2, #1
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	2a00      	cmp	r2, #0
 8008d5c:	d1fc      	bne.n	8008d58 <ai_platform_network_get_error+0x30>
 8008d5e:	4b2a      	ldr	r3, [pc, #168]	; (8008e08 <ai_platform_network_get_error+0xe0>)
 8008d60:	4a2a      	ldr	r2, [pc, #168]	; (8008e0c <ai_platform_network_get_error+0xe4>)
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	4b2a      	ldr	r3, [pc, #168]	; (8008e10 <ai_platform_network_get_error+0xe8>)
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d00d      	beq.n	8008d88 <ai_platform_network_get_error+0x60>
 8008d6c:	e7fe      	b.n	8008d6c <ai_platform_network_get_error+0x44>
 8008d6e:	4b29      	ldr	r3, [pc, #164]	; (8008e14 <ai_platform_network_get_error+0xec>)
 8008d70:	2201      	movs	r2, #1
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	2a00      	cmp	r2, #0
 8008d78:	d1fc      	bne.n	8008d74 <ai_platform_network_get_error+0x4c>
 8008d7a:	4b27      	ldr	r3, [pc, #156]	; (8008e18 <ai_platform_network_get_error+0xf0>)
 8008d7c:	4a23      	ldr	r2, [pc, #140]	; (8008e0c <ai_platform_network_get_error+0xe4>)
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	4b23      	ldr	r3, [pc, #140]	; (8008e10 <ai_platform_network_get_error+0xe8>)
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d104      	bne.n	8008d92 <ai_platform_network_get_error+0x6a>
 8008d88:	f7ff ff0e 	bl	8008ba8 <_ai_platform_release_crc>
 8008d8c:	f241 0010 	movw	r0, #4112	; 0x1010
 8008d90:	bd10      	pop	{r4, pc}
 8008d92:	e7fe      	b.n	8008d92 <ai_platform_network_get_error+0x6a>
 8008d94:	4a19      	ldr	r2, [pc, #100]	; (8008dfc <ai_platform_network_get_error+0xd4>)
 8008d96:	6813      	ldr	r3, [r2, #0]
 8008d98:	f023 0301 	bic.w	r3, r3, #1
 8008d9c:	6013      	str	r3, [r2, #0]
 8008d9e:	f7ff ff01 	bl	8008ba4 <_ai_platform_acquire_crc>
 8008da2:	4b17      	ldr	r3, [pc, #92]	; (8008e00 <ai_platform_network_get_error+0xd8>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dae:	d00d      	beq.n	8008dcc <ai_platform_network_get_error+0xa4>
 8008db0:	4b14      	ldr	r3, [pc, #80]	; (8008e04 <ai_platform_network_get_error+0xdc>)
 8008db2:	2201      	movs	r2, #1
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	d1fc      	bne.n	8008db6 <ai_platform_network_get_error+0x8e>
 8008dbc:	4b12      	ldr	r3, [pc, #72]	; (8008e08 <ai_platform_network_get_error+0xe0>)
 8008dbe:	4a13      	ldr	r2, [pc, #76]	; (8008e0c <ai_platform_network_get_error+0xe4>)
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	4b12      	ldr	r3, [pc, #72]	; (8008e10 <ai_platform_network_get_error+0xe8>)
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d00e      	beq.n	8008de8 <ai_platform_network_get_error+0xc0>
 8008dca:	e7fe      	b.n	8008dca <ai_platform_network_get_error+0xa2>
 8008dcc:	4b11      	ldr	r3, [pc, #68]	; (8008e14 <ai_platform_network_get_error+0xec>)
 8008dce:	2201      	movs	r2, #1
 8008dd0:	601a      	str	r2, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	2a00      	cmp	r2, #0
 8008dd6:	d1fc      	bne.n	8008dd2 <ai_platform_network_get_error+0xaa>
 8008dd8:	4b0f      	ldr	r3, [pc, #60]	; (8008e18 <ai_platform_network_get_error+0xf0>)
 8008dda:	4a0c      	ldr	r2, [pc, #48]	; (8008e0c <ai_platform_network_get_error+0xe4>)
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <ai_platform_network_get_error+0xe8>)
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d000      	beq.n	8008de8 <ai_platform_network_get_error+0xc0>
 8008de6:	e7fe      	b.n	8008de6 <ai_platform_network_get_error+0xbe>
 8008de8:	f7ff fede 	bl	8008ba8 <_ai_platform_release_crc>
 8008dec:	f104 0010 	add.w	r0, r4, #16
 8008df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008df4:	f000 bef4 	b.w	8009be0 <core_get_error>
 8008df8:	a1c00100 	.word	0xa1c00100
 8008dfc:	e0002000 	.word	0xe0002000
 8008e00:	e0042000 	.word	0xe0042000
 8008e04:	58024c08 	.word	0x58024c08
 8008e08:	58024c00 	.word	0x58024c00
 8008e0c:	f407a5c2 	.word	0xf407a5c2
 8008e10:	b5e8b5cd 	.word	0xb5e8b5cd
 8008e14:	40023008 	.word	0x40023008
 8008e18:	40023000 	.word	0x40023000

08008e1c <ai_platform_network_set_error>:
 8008e1c:	b110      	cbz	r0, 8008e24 <ai_platform_network_set_error+0x8>
 8008e1e:	3010      	adds	r0, #16
 8008e20:	f000 bee4 	b.w	8009bec <core_set_error>
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop

08008e28 <ai_platform_inputs_get>:
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	b085      	sub	sp, #20
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f000 80a1 	beq.w	8008f76 <ai_platform_inputs_get+0x14e>
 8008e34:	4b6d      	ldr	r3, [pc, #436]	; (8008fec <ai_platform_inputs_get+0x1c4>)
 8008e36:	6802      	ldr	r2, [r0, #0]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	4607      	mov	r7, r0
 8008e3c:	f040 809b 	bne.w	8008f76 <ai_platform_inputs_get+0x14e>
 8008e40:	4a6b      	ldr	r2, [pc, #428]	; (8008ff0 <ai_platform_inputs_get+0x1c8>)
 8008e42:	6813      	ldr	r3, [r2, #0]
 8008e44:	f023 0301 	bic.w	r3, r3, #1
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	468b      	mov	fp, r1
 8008e4c:	f7ff feaa 	bl	8008ba4 <_ai_platform_acquire_crc>
 8008e50:	4b68      	ldr	r3, [pc, #416]	; (8008ff4 <ai_platform_inputs_get+0x1cc>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e5c:	d00d      	beq.n	8008e7a <ai_platform_inputs_get+0x52>
 8008e5e:	4b66      	ldr	r3, [pc, #408]	; (8008ff8 <ai_platform_inputs_get+0x1d0>)
 8008e60:	2201      	movs	r2, #1
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	2a00      	cmp	r2, #0
 8008e68:	d1fc      	bne.n	8008e64 <ai_platform_inputs_get+0x3c>
 8008e6a:	4b64      	ldr	r3, [pc, #400]	; (8008ffc <ai_platform_inputs_get+0x1d4>)
 8008e6c:	4a64      	ldr	r2, [pc, #400]	; (8009000 <ai_platform_inputs_get+0x1d8>)
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	4b64      	ldr	r3, [pc, #400]	; (8009004 <ai_platform_inputs_get+0x1dc>)
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d00d      	beq.n	8008e94 <ai_platform_inputs_get+0x6c>
 8008e78:	e7fe      	b.n	8008e78 <ai_platform_inputs_get+0x50>
 8008e7a:	4b63      	ldr	r3, [pc, #396]	; (8009008 <ai_platform_inputs_get+0x1e0>)
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	2a00      	cmp	r2, #0
 8008e84:	d1fc      	bne.n	8008e80 <ai_platform_inputs_get+0x58>
 8008e86:	4b61      	ldr	r3, [pc, #388]	; (800900c <ai_platform_inputs_get+0x1e4>)
 8008e88:	4a5d      	ldr	r2, [pc, #372]	; (8009000 <ai_platform_inputs_get+0x1d8>)
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	4b5d      	ldr	r3, [pc, #372]	; (8009004 <ai_platform_inputs_get+0x1dc>)
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d16f      	bne.n	8008f74 <ai_platform_inputs_get+0x14c>
 8008e94:	f7ff fe88 	bl	8008ba8 <_ai_platform_release_crc>
 8008e98:	f1bb 0f00 	cmp.w	fp, #0
 8008e9c:	d002      	beq.n	8008ea4 <ai_platform_inputs_get+0x7c>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f8ab 3000 	strh.w	r3, [fp]
 8008ea4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f000 8081 	beq.w	8008fae <ai_platform_inputs_get+0x186>
 8008eac:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8008eae:	2e00      	cmp	r6, #0
 8008eb0:	d07d      	beq.n	8008fae <ai_platform_inputs_get+0x186>
 8008eb2:	8833      	ldrh	r3, [r6, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d07a      	beq.n	8008fae <ai_platform_inputs_get+0x186>
 8008eb8:	6873      	ldr	r3, [r6, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d077      	beq.n	8008fae <ai_platform_inputs_get+0x186>
 8008ebe:	681d      	ldr	r5, [r3, #0]
 8008ec0:	2d00      	cmp	r5, #0
 8008ec2:	d074      	beq.n	8008fae <ai_platform_inputs_get+0x186>
 8008ec4:	f04f 0800 	mov.w	r8, #0
 8008ec8:	f8cd b008 	str.w	fp, [sp, #8]
 8008ecc:	46c1      	mov	r9, r8
 8008ece:	46bb      	mov	fp, r7
 8008ed0:	68b0      	ldr	r0, [r6, #8]
 8008ed2:	69aa      	ldr	r2, [r5, #24]
 8008ed4:	68ab      	ldr	r3, [r5, #8]
 8008ed6:	6844      	ldr	r4, [r0, #4]
 8008ed8:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8008edc:	6810      	ldr	r0, [r2, #0]
 8008ede:	68ef      	ldr	r7, [r5, #12]
 8008ee0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8008ee4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	9203      	str	r2, [sp, #12]
 8008eec:	f001 fbd6 	bl	800a69c <ai_array_to_buffer_fmt>
 8008ef0:	9a03      	ldr	r2, [sp, #12]
 8008ef2:	4601      	mov	r1, r0
 8008ef4:	69a8      	ldr	r0, [r5, #24]
 8008ef6:	eb0a 0302 	add.w	r3, sl, r2
 8008efa:	4444      	add	r4, r8
 8008efc:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8008f00:	b16b      	cbz	r3, 8008f1e <ai_platform_inputs_get+0xf6>
 8008f02:	2000      	movs	r0, #0
 8008f04:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8008f08:	6828      	ldr	r0, [r5, #0]
 8008f0a:	6058      	str	r0, [r3, #4]
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d058      	beq.n	8008fc2 <ai_platform_inputs_get+0x19a>
 8008f10:	8840      	ldrh	r0, [r0, #2]
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d055      	beq.n	8008fc2 <ai_platform_inputs_get+0x19a>
 8008f16:	2001      	movs	r0, #1
 8008f18:	f84a 0002 	str.w	r0, [sl, r2]
 8008f1c:	69a8      	ldr	r0, [r5, #24]
 8008f1e:	6842      	ldr	r2, [r0, #4]
 8008f20:	6122      	str	r2, [r4, #16]
 8008f22:	f04f 0001 	mov.w	r0, #1
 8008f26:	7520      	strb	r0, [r4, #20]
 8008f28:	9a01      	ldr	r2, [sp, #4]
 8008f2a:	6960      	ldr	r0, [r4, #20]
 8008f2c:	60a3      	str	r3, [r4, #8]
 8008f2e:	f362 201f 	bfi	r0, r2, #8, #24
 8008f32:	e9c4 1e00 	strd	r1, lr, [r4]
 8008f36:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60e3      	str	r3, [r4, #12]
 8008f3e:	8830      	ldrh	r0, [r6, #0]
 8008f40:	f109 0301 	add.w	r3, r9, #1
 8008f44:	4283      	cmp	r3, r0
 8008f46:	4699      	mov	r9, r3
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	d207      	bcs.n	8008f5c <ai_platform_inputs_get+0x134>
 8008f4c:	6870      	ldr	r0, [r6, #4]
 8008f4e:	b128      	cbz	r0, 8008f5c <ai_platform_inputs_get+0x134>
 8008f50:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8008f54:	f108 081c 	add.w	r8, r8, #28
 8008f58:	2d00      	cmp	r5, #0
 8008f5a:	d1b9      	bne.n	8008ed0 <ai_platform_inputs_get+0xa8>
 8008f5c:	465f      	mov	r7, fp
 8008f5e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008f62:	b322      	cbz	r2, 8008fae <ai_platform_inputs_get+0x186>
 8008f64:	68b3      	ldr	r3, [r6, #8]
 8008f66:	6858      	ldr	r0, [r3, #4]
 8008f68:	f1bb 0f00 	cmp.w	fp, #0
 8008f6c:	d026      	beq.n	8008fbc <ai_platform_inputs_get+0x194>
 8008f6e:	f8ab 2000 	strh.w	r2, [fp]
 8008f72:	e023      	b.n	8008fbc <ai_platform_inputs_get+0x194>
 8008f74:	e7fe      	b.n	8008f74 <ai_platform_inputs_get+0x14c>
 8008f76:	4a1e      	ldr	r2, [pc, #120]	; (8008ff0 <ai_platform_inputs_get+0x1c8>)
 8008f78:	6813      	ldr	r3, [r2, #0]
 8008f7a:	f023 0301 	bic.w	r3, r3, #1
 8008f7e:	6013      	str	r3, [r2, #0]
 8008f80:	f7ff fe10 	bl	8008ba4 <_ai_platform_acquire_crc>
 8008f84:	4b1b      	ldr	r3, [pc, #108]	; (8008ff4 <ai_platform_inputs_get+0x1cc>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f90:	d01a      	beq.n	8008fc8 <ai_platform_inputs_get+0x1a0>
 8008f92:	4b19      	ldr	r3, [pc, #100]	; (8008ff8 <ai_platform_inputs_get+0x1d0>)
 8008f94:	2201      	movs	r2, #1
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	2a00      	cmp	r2, #0
 8008f9c:	d1fc      	bne.n	8008f98 <ai_platform_inputs_get+0x170>
 8008f9e:	4b17      	ldr	r3, [pc, #92]	; (8008ffc <ai_platform_inputs_get+0x1d4>)
 8008fa0:	4a17      	ldr	r2, [pc, #92]	; (8009000 <ai_platform_inputs_get+0x1d8>)
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	4b17      	ldr	r3, [pc, #92]	; (8009004 <ai_platform_inputs_get+0x1dc>)
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d01b      	beq.n	8008fe4 <ai_platform_inputs_get+0x1bc>
 8008fac:	e7fe      	b.n	8008fac <ai_platform_inputs_get+0x184>
 8008fae:	f107 0010 	add.w	r0, r7, #16
 8008fb2:	2218      	movs	r2, #24
 8008fb4:	2111      	movs	r1, #17
 8008fb6:	f000 fe19 	bl	8009bec <core_set_error>
 8008fba:	2000      	movs	r0, #0
 8008fbc:	b005      	add	sp, #20
 8008fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc2:	69a8      	ldr	r0, [r5, #24]
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	e7aa      	b.n	8008f1e <ai_platform_inputs_get+0xf6>
 8008fc8:	4b0f      	ldr	r3, [pc, #60]	; (8009008 <ai_platform_inputs_get+0x1e0>)
 8008fca:	2201      	movs	r2, #1
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	2a00      	cmp	r2, #0
 8008fd2:	d1fc      	bne.n	8008fce <ai_platform_inputs_get+0x1a6>
 8008fd4:	4b0d      	ldr	r3, [pc, #52]	; (800900c <ai_platform_inputs_get+0x1e4>)
 8008fd6:	4a0a      	ldr	r2, [pc, #40]	; (8009000 <ai_platform_inputs_get+0x1d8>)
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	4b09      	ldr	r3, [pc, #36]	; (8009004 <ai_platform_inputs_get+0x1dc>)
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d000      	beq.n	8008fe4 <ai_platform_inputs_get+0x1bc>
 8008fe2:	e7fe      	b.n	8008fe2 <ai_platform_inputs_get+0x1ba>
 8008fe4:	f7ff fde0 	bl	8008ba8 <_ai_platform_release_crc>
 8008fe8:	2000      	movs	r0, #0
 8008fea:	e7e7      	b.n	8008fbc <ai_platform_inputs_get+0x194>
 8008fec:	a1c00100 	.word	0xa1c00100
 8008ff0:	e0002000 	.word	0xe0002000
 8008ff4:	e0042000 	.word	0xe0042000
 8008ff8:	58024c08 	.word	0x58024c08
 8008ffc:	58024c00 	.word	0x58024c00
 8009000:	f407a5c2 	.word	0xf407a5c2
 8009004:	b5e8b5cd 	.word	0xb5e8b5cd
 8009008:	40023008 	.word	0x40023008
 800900c:	40023000 	.word	0x40023000

08009010 <ai_platform_outputs_get>:
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	b085      	sub	sp, #20
 8009016:	2800      	cmp	r0, #0
 8009018:	f000 80a9 	beq.w	800916e <ai_platform_outputs_get+0x15e>
 800901c:	4b70      	ldr	r3, [pc, #448]	; (80091e0 <ai_platform_outputs_get+0x1d0>)
 800901e:	6802      	ldr	r2, [r0, #0]
 8009020:	429a      	cmp	r2, r3
 8009022:	4607      	mov	r7, r0
 8009024:	f040 80a3 	bne.w	800916e <ai_platform_outputs_get+0x15e>
 8009028:	4a6e      	ldr	r2, [pc, #440]	; (80091e4 <ai_platform_outputs_get+0x1d4>)
 800902a:	6813      	ldr	r3, [r2, #0]
 800902c:	f023 0301 	bic.w	r3, r3, #1
 8009030:	6013      	str	r3, [r2, #0]
 8009032:	468b      	mov	fp, r1
 8009034:	f7ff fdb6 	bl	8008ba4 <_ai_platform_acquire_crc>
 8009038:	4b6b      	ldr	r3, [pc, #428]	; (80091e8 <ai_platform_outputs_get+0x1d8>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009044:	d00d      	beq.n	8009062 <ai_platform_outputs_get+0x52>
 8009046:	4b69      	ldr	r3, [pc, #420]	; (80091ec <ai_platform_outputs_get+0x1dc>)
 8009048:	2201      	movs	r2, #1
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	2a00      	cmp	r2, #0
 8009050:	d1fc      	bne.n	800904c <ai_platform_outputs_get+0x3c>
 8009052:	4b67      	ldr	r3, [pc, #412]	; (80091f0 <ai_platform_outputs_get+0x1e0>)
 8009054:	4a67      	ldr	r2, [pc, #412]	; (80091f4 <ai_platform_outputs_get+0x1e4>)
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	4b67      	ldr	r3, [pc, #412]	; (80091f8 <ai_platform_outputs_get+0x1e8>)
 800905c:	429a      	cmp	r2, r3
 800905e:	d00d      	beq.n	800907c <ai_platform_outputs_get+0x6c>
 8009060:	e7fe      	b.n	8009060 <ai_platform_outputs_get+0x50>
 8009062:	4b66      	ldr	r3, [pc, #408]	; (80091fc <ai_platform_outputs_get+0x1ec>)
 8009064:	2201      	movs	r2, #1
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	2a00      	cmp	r2, #0
 800906c:	d1fc      	bne.n	8009068 <ai_platform_outputs_get+0x58>
 800906e:	4b64      	ldr	r3, [pc, #400]	; (8009200 <ai_platform_outputs_get+0x1f0>)
 8009070:	4a60      	ldr	r2, [pc, #384]	; (80091f4 <ai_platform_outputs_get+0x1e4>)
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	4b60      	ldr	r3, [pc, #384]	; (80091f8 <ai_platform_outputs_get+0x1e8>)
 8009078:	429a      	cmp	r2, r3
 800907a:	d177      	bne.n	800916c <ai_platform_outputs_get+0x15c>
 800907c:	f7ff fd94 	bl	8008ba8 <_ai_platform_release_crc>
 8009080:	f1bb 0f00 	cmp.w	fp, #0
 8009084:	d002      	beq.n	800908c <ai_platform_outputs_get+0x7c>
 8009086:	2300      	movs	r3, #0
 8009088:	f8ab 3000 	strh.w	r3, [fp]
 800908c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800908e:	2b01      	cmp	r3, #1
 8009090:	f240 809a 	bls.w	80091c8 <ai_platform_outputs_get+0x1b8>
 8009094:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8009096:	f116 0f0c 	cmn.w	r6, #12
 800909a:	f000 8095 	beq.w	80091c8 <ai_platform_outputs_get+0x1b8>
 800909e:	89b3      	ldrh	r3, [r6, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 8091 	beq.w	80091c8 <ai_platform_outputs_get+0x1b8>
 80090a6:	6933      	ldr	r3, [r6, #16]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 808d 	beq.w	80091c8 <ai_platform_outputs_get+0x1b8>
 80090ae:	681d      	ldr	r5, [r3, #0]
 80090b0:	2d00      	cmp	r5, #0
 80090b2:	f000 8089 	beq.w	80091c8 <ai_platform_outputs_get+0x1b8>
 80090b6:	f04f 0800 	mov.w	r8, #0
 80090ba:	f8cd b008 	str.w	fp, [sp, #8]
 80090be:	46c1      	mov	r9, r8
 80090c0:	46bb      	mov	fp, r7
 80090c2:	6970      	ldr	r0, [r6, #20]
 80090c4:	69aa      	ldr	r2, [r5, #24]
 80090c6:	68ab      	ldr	r3, [r5, #8]
 80090c8:	6844      	ldr	r4, [r0, #4]
 80090ca:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80090ce:	6810      	ldr	r0, [r2, #0]
 80090d0:	68ef      	ldr	r7, [r5, #12]
 80090d2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80090d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80090da:	9301      	str	r3, [sp, #4]
 80090dc:	9203      	str	r2, [sp, #12]
 80090de:	f001 fadd 	bl	800a69c <ai_array_to_buffer_fmt>
 80090e2:	9a03      	ldr	r2, [sp, #12]
 80090e4:	4601      	mov	r1, r0
 80090e6:	69a8      	ldr	r0, [r5, #24]
 80090e8:	eb0a 0302 	add.w	r3, sl, r2
 80090ec:	4444      	add	r4, r8
 80090ee:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80090f2:	b16b      	cbz	r3, 8009110 <ai_platform_outputs_get+0x100>
 80090f4:	2000      	movs	r0, #0
 80090f6:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 80090fa:	6828      	ldr	r0, [r5, #0]
 80090fc:	6058      	str	r0, [r3, #4]
 80090fe:	2800      	cmp	r0, #0
 8009100:	d051      	beq.n	80091a6 <ai_platform_outputs_get+0x196>
 8009102:	8840      	ldrh	r0, [r0, #2]
 8009104:	2800      	cmp	r0, #0
 8009106:	d04e      	beq.n	80091a6 <ai_platform_outputs_get+0x196>
 8009108:	2001      	movs	r0, #1
 800910a:	f84a 0002 	str.w	r0, [sl, r2]
 800910e:	69a8      	ldr	r0, [r5, #24]
 8009110:	6842      	ldr	r2, [r0, #4]
 8009112:	6122      	str	r2, [r4, #16]
 8009114:	f04f 0001 	mov.w	r0, #1
 8009118:	7520      	strb	r0, [r4, #20]
 800911a:	9a01      	ldr	r2, [sp, #4]
 800911c:	6960      	ldr	r0, [r4, #20]
 800911e:	60a3      	str	r3, [r4, #8]
 8009120:	f362 201f 	bfi	r0, r2, #8, #24
 8009124:	e9c4 1e00 	strd	r1, lr, [r4]
 8009128:	e9c4 0705 	strd	r0, r7, [r4, #20]
 800912c:	2300      	movs	r3, #0
 800912e:	60e3      	str	r3, [r4, #12]
 8009130:	89b0      	ldrh	r0, [r6, #12]
 8009132:	f109 0301 	add.w	r3, r9, #1
 8009136:	4283      	cmp	r3, r0
 8009138:	4699      	mov	r9, r3
 800913a:	b29a      	uxth	r2, r3
 800913c:	d207      	bcs.n	800914e <ai_platform_outputs_get+0x13e>
 800913e:	6930      	ldr	r0, [r6, #16]
 8009140:	b128      	cbz	r0, 800914e <ai_platform_outputs_get+0x13e>
 8009142:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8009146:	f108 081c 	add.w	r8, r8, #28
 800914a:	2d00      	cmp	r5, #0
 800914c:	d1b9      	bne.n	80090c2 <ai_platform_outputs_get+0xb2>
 800914e:	465f      	mov	r7, fp
 8009150:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009154:	2a00      	cmp	r2, #0
 8009156:	d037      	beq.n	80091c8 <ai_platform_outputs_get+0x1b8>
 8009158:	6973      	ldr	r3, [r6, #20]
 800915a:	6858      	ldr	r0, [r3, #4]
 800915c:	f1bb 0f00 	cmp.w	fp, #0
 8009160:	d001      	beq.n	8009166 <ai_platform_outputs_get+0x156>
 8009162:	f8ab 2000 	strh.w	r2, [fp]
 8009166:	b005      	add	sp, #20
 8009168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916c:	e7fe      	b.n	800916c <ai_platform_outputs_get+0x15c>
 800916e:	4a1d      	ldr	r2, [pc, #116]	; (80091e4 <ai_platform_outputs_get+0x1d4>)
 8009170:	6813      	ldr	r3, [r2, #0]
 8009172:	f023 0301 	bic.w	r3, r3, #1
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	f7ff fd14 	bl	8008ba4 <_ai_platform_acquire_crc>
 800917c:	4b1a      	ldr	r3, [pc, #104]	; (80091e8 <ai_platform_outputs_get+0x1d8>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009188:	d010      	beq.n	80091ac <ai_platform_outputs_get+0x19c>
 800918a:	4b18      	ldr	r3, [pc, #96]	; (80091ec <ai_platform_outputs_get+0x1dc>)
 800918c:	2201      	movs	r2, #1
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	2a00      	cmp	r2, #0
 8009194:	d1fc      	bne.n	8009190 <ai_platform_outputs_get+0x180>
 8009196:	4b16      	ldr	r3, [pc, #88]	; (80091f0 <ai_platform_outputs_get+0x1e0>)
 8009198:	4a16      	ldr	r2, [pc, #88]	; (80091f4 <ai_platform_outputs_get+0x1e4>)
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	4b16      	ldr	r3, [pc, #88]	; (80091f8 <ai_platform_outputs_get+0x1e8>)
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d019      	beq.n	80091d8 <ai_platform_outputs_get+0x1c8>
 80091a4:	e7fe      	b.n	80091a4 <ai_platform_outputs_get+0x194>
 80091a6:	69a8      	ldr	r0, [r5, #24]
 80091a8:	2300      	movs	r3, #0
 80091aa:	e7b1      	b.n	8009110 <ai_platform_outputs_get+0x100>
 80091ac:	4b13      	ldr	r3, [pc, #76]	; (80091fc <ai_platform_outputs_get+0x1ec>)
 80091ae:	2201      	movs	r2, #1
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	2a00      	cmp	r2, #0
 80091b6:	d1fc      	bne.n	80091b2 <ai_platform_outputs_get+0x1a2>
 80091b8:	4b11      	ldr	r3, [pc, #68]	; (8009200 <ai_platform_outputs_get+0x1f0>)
 80091ba:	4a0e      	ldr	r2, [pc, #56]	; (80091f4 <ai_platform_outputs_get+0x1e4>)
 80091bc:	601a      	str	r2, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	4b0d      	ldr	r3, [pc, #52]	; (80091f8 <ai_platform_outputs_get+0x1e8>)
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d008      	beq.n	80091d8 <ai_platform_outputs_get+0x1c8>
 80091c6:	e7fe      	b.n	80091c6 <ai_platform_outputs_get+0x1b6>
 80091c8:	f107 0010 	add.w	r0, r7, #16
 80091cc:	2218      	movs	r2, #24
 80091ce:	2111      	movs	r1, #17
 80091d0:	f000 fd0c 	bl	8009bec <core_set_error>
 80091d4:	2000      	movs	r0, #0
 80091d6:	e7c6      	b.n	8009166 <ai_platform_outputs_get+0x156>
 80091d8:	f7ff fce6 	bl	8008ba8 <_ai_platform_release_crc>
 80091dc:	2000      	movs	r0, #0
 80091de:	e7c2      	b.n	8009166 <ai_platform_outputs_get+0x156>
 80091e0:	a1c00100 	.word	0xa1c00100
 80091e4:	e0002000 	.word	0xe0002000
 80091e8:	e0042000 	.word	0xe0042000
 80091ec:	58024c08 	.word	0x58024c08
 80091f0:	58024c00 	.word	0x58024c00
 80091f4:	f407a5c2 	.word	0xf407a5c2
 80091f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80091fc:	40023008 	.word	0x40023008
 8009200:	40023000 	.word	0x40023000

08009204 <ai_platform_network_create>:
 8009204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009208:	b083      	sub	sp, #12
 800920a:	4606      	mov	r6, r0
 800920c:	4615      	mov	r5, r2
 800920e:	461f      	mov	r7, r3
 8009210:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8009214:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8009218:	f7ff fcc4 	bl	8008ba4 <_ai_platform_acquire_crc>
 800921c:	b178      	cbz	r0, 800923e <ai_platform_network_create+0x3a>
 800921e:	4b5f      	ldr	r3, [pc, #380]	; (800939c <ai_platform_network_create+0x198>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800922a:	4602      	mov	r2, r0
 800922c:	d00d      	beq.n	800924a <ai_platform_network_create+0x46>
 800922e:	4b5c      	ldr	r3, [pc, #368]	; (80093a0 <ai_platform_network_create+0x19c>)
 8009230:	2118      	movs	r1, #24
 8009232:	6019      	str	r1, [r3, #0]
 8009234:	6819      	ldr	r1, [r3, #0]
 8009236:	2918      	cmp	r1, #24
 8009238:	d01a      	beq.n	8009270 <ai_platform_network_create+0x6c>
 800923a:	f7ff fcb5 	bl	8008ba8 <_ai_platform_release_crc>
 800923e:	f244 1333 	movw	r3, #16691	; 0x4133
 8009242:	4618      	mov	r0, r3
 8009244:	b003      	add	sp, #12
 8009246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800924a:	4b56      	ldr	r3, [pc, #344]	; (80093a4 <ai_platform_network_create+0x1a0>)
 800924c:	2101      	movs	r1, #1
 800924e:	6019      	str	r1, [r3, #0]
 8009250:	2114      	movs	r1, #20
 8009252:	e001      	b.n	8009258 <ai_platform_network_create+0x54>
 8009254:	3901      	subs	r1, #1
 8009256:	d002      	beq.n	800925e <ai_platform_network_create+0x5a>
 8009258:	6818      	ldr	r0, [r3, #0]
 800925a:	2800      	cmp	r0, #0
 800925c:	d1fa      	bne.n	8009254 <ai_platform_network_create+0x50>
 800925e:	4b51      	ldr	r3, [pc, #324]	; (80093a4 <ai_platform_network_create+0x1a0>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	b91b      	cbnz	r3, 800926c <ai_platform_network_create+0x68>
 8009264:	4b50      	ldr	r3, [pc, #320]	; (80093a8 <ai_platform_network_create+0x1a4>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3301      	adds	r3, #1
 800926a:	d006      	beq.n	800927a <ai_platform_network_create+0x76>
 800926c:	4610      	mov	r0, r2
 800926e:	e7e4      	b.n	800923a <ai_platform_network_create+0x36>
 8009270:	2101      	movs	r1, #1
 8009272:	6019      	str	r1, [r3, #0]
 8009274:	6819      	ldr	r1, [r3, #0]
 8009276:	2900      	cmp	r1, #0
 8009278:	d1fc      	bne.n	8009274 <ai_platform_network_create+0x70>
 800927a:	4610      	mov	r0, r2
 800927c:	f7ff fc94 	bl	8008ba8 <_ai_platform_release_crc>
 8009280:	4a4a      	ldr	r2, [pc, #296]	; (80093ac <ai_platform_network_create+0x1a8>)
 8009282:	6813      	ldr	r3, [r2, #0]
 8009284:	f023 0301 	bic.w	r3, r3, #1
 8009288:	6013      	str	r3, [r2, #0]
 800928a:	f7ff fc8b 	bl	8008ba4 <_ai_platform_acquire_crc>
 800928e:	4b43      	ldr	r3, [pc, #268]	; (800939c <ai_platform_network_create+0x198>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800929a:	d00d      	beq.n	80092b8 <ai_platform_network_create+0xb4>
 800929c:	4b40      	ldr	r3, [pc, #256]	; (80093a0 <ai_platform_network_create+0x19c>)
 800929e:	2201      	movs	r2, #1
 80092a0:	601a      	str	r2, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	2a00      	cmp	r2, #0
 80092a6:	d1fc      	bne.n	80092a2 <ai_platform_network_create+0x9e>
 80092a8:	4b41      	ldr	r3, [pc, #260]	; (80093b0 <ai_platform_network_create+0x1ac>)
 80092aa:	4a42      	ldr	r2, [pc, #264]	; (80093b4 <ai_platform_network_create+0x1b0>)
 80092ac:	601a      	str	r2, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	4b41      	ldr	r3, [pc, #260]	; (80093b8 <ai_platform_network_create+0x1b4>)
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d00e      	beq.n	80092d4 <ai_platform_network_create+0xd0>
 80092b6:	e7fe      	b.n	80092b6 <ai_platform_network_create+0xb2>
 80092b8:	4b3a      	ldr	r3, [pc, #232]	; (80093a4 <ai_platform_network_create+0x1a0>)
 80092ba:	2201      	movs	r2, #1
 80092bc:	601a      	str	r2, [r3, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	2a00      	cmp	r2, #0
 80092c2:	d1fc      	bne.n	80092be <ai_platform_network_create+0xba>
 80092c4:	4b38      	ldr	r3, [pc, #224]	; (80093a8 <ai_platform_network_create+0x1a4>)
 80092c6:	4a3b      	ldr	r2, [pc, #236]	; (80093b4 <ai_platform_network_create+0x1b0>)
 80092c8:	601a      	str	r2, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	4b3a      	ldr	r3, [pc, #232]	; (80093b8 <ai_platform_network_create+0x1b4>)
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d000      	beq.n	80092d4 <ai_platform_network_create+0xd0>
 80092d2:	e7fe      	b.n	80092d2 <ai_platform_network_create+0xce>
 80092d4:	f7ff fc68 	bl	8008ba8 <_ai_platform_release_crc>
 80092d8:	b1ae      	cbz	r6, 8009306 <ai_platform_network_create+0x102>
 80092da:	4b38      	ldr	r3, [pc, #224]	; (80093bc <ai_platform_network_create+0x1b8>)
 80092dc:	602b      	str	r3, [r5, #0]
 80092de:	6035      	str	r5, [r6, #0]
 80092e0:	f000 fc7c 	bl	8009bdc <core_init>
 80092e4:	b990      	cbnz	r0, 800930c <ai_platform_network_create+0x108>
 80092e6:	2430      	movs	r4, #48	; 0x30
 80092e8:	2300      	movs	r3, #0
 80092ea:	6033      	str	r3, [r6, #0]
 80092ec:	2610      	movs	r6, #16
 80092ee:	464a      	mov	r2, r9
 80092f0:	4641      	mov	r1, r8
 80092f2:	4638      	mov	r0, r7
 80092f4:	f001 f9b8 	bl	800a668 <ai_version_get>
 80092f8:	2300      	movs	r3, #0
 80092fa:	f364 0307 	bfi	r3, r4, #0, #8
 80092fe:	6468      	str	r0, [r5, #68]	; 0x44
 8009300:	f366 231f 	bfi	r3, r6, #8, #24
 8009304:	e79d      	b.n	8009242 <ai_platform_network_create+0x3e>
 8009306:	f241 0310 	movw	r3, #4112	; 0x1010
 800930a:	e79a      	b.n	8009242 <ai_platform_network_create+0x3e>
 800930c:	4a27      	ldr	r2, [pc, #156]	; (80093ac <ai_platform_network_create+0x1a8>)
 800930e:	6813      	ldr	r3, [r2, #0]
 8009310:	f023 0301 	bic.w	r3, r3, #1
 8009314:	6013      	str	r3, [r2, #0]
 8009316:	f7ff fc45 	bl	8008ba4 <_ai_platform_acquire_crc>
 800931a:	4b20      	ldr	r3, [pc, #128]	; (800939c <ai_platform_network_create+0x198>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009326:	d00d      	beq.n	8009344 <ai_platform_network_create+0x140>
 8009328:	4b1d      	ldr	r3, [pc, #116]	; (80093a0 <ai_platform_network_create+0x19c>)
 800932a:	2201      	movs	r2, #1
 800932c:	601a      	str	r2, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	2a00      	cmp	r2, #0
 8009332:	d1fc      	bne.n	800932e <ai_platform_network_create+0x12a>
 8009334:	4b1e      	ldr	r3, [pc, #120]	; (80093b0 <ai_platform_network_create+0x1ac>)
 8009336:	4a1f      	ldr	r2, [pc, #124]	; (80093b4 <ai_platform_network_create+0x1b0>)
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	4b1e      	ldr	r3, [pc, #120]	; (80093b8 <ai_platform_network_create+0x1b4>)
 800933e:	429a      	cmp	r2, r3
 8009340:	d00e      	beq.n	8009360 <ai_platform_network_create+0x15c>
 8009342:	e7fe      	b.n	8009342 <ai_platform_network_create+0x13e>
 8009344:	4b17      	ldr	r3, [pc, #92]	; (80093a4 <ai_platform_network_create+0x1a0>)
 8009346:	2201      	movs	r2, #1
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	2a00      	cmp	r2, #0
 800934e:	d1fc      	bne.n	800934a <ai_platform_network_create+0x146>
 8009350:	4b15      	ldr	r3, [pc, #84]	; (80093a8 <ai_platform_network_create+0x1a4>)
 8009352:	4a18      	ldr	r2, [pc, #96]	; (80093b4 <ai_platform_network_create+0x1b0>)
 8009354:	601a      	str	r2, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	4b17      	ldr	r3, [pc, #92]	; (80093b8 <ai_platform_network_create+0x1b4>)
 800935a:	429a      	cmp	r2, r3
 800935c:	d000      	beq.n	8009360 <ai_platform_network_create+0x15c>
 800935e:	e7fe      	b.n	800935e <ai_platform_network_create+0x15a>
 8009360:	f7ff fc22 	bl	8008ba8 <_ai_platform_release_crc>
 8009364:	2200      	movs	r2, #0
 8009366:	4641      	mov	r1, r8
 8009368:	4638      	mov	r0, r7
 800936a:	f001 f97d 	bl	800a668 <ai_version_get>
 800936e:	2200      	movs	r2, #0
 8009370:	4604      	mov	r4, r0
 8009372:	2105      	movs	r1, #5
 8009374:	2001      	movs	r0, #1
 8009376:	f001 f977 	bl	800a668 <ai_version_get>
 800937a:	4284      	cmp	r4, r0
 800937c:	d001      	beq.n	8009382 <ai_platform_network_create+0x17e>
 800937e:	2401      	movs	r4, #1
 8009380:	e7b2      	b.n	80092e8 <ai_platform_network_create+0xe4>
 8009382:	a802      	add	r0, sp, #8
 8009384:	4b0e      	ldr	r3, [pc, #56]	; (80093c0 <ai_platform_network_create+0x1bc>)
 8009386:	f840 3d04 	str.w	r3, [r0, #-4]!
 800938a:	f001 f8c9 	bl	800a520 <ai_check_custom_types>
 800938e:	b110      	cbz	r0, 8009396 <ai_platform_network_create+0x192>
 8009390:	2600      	movs	r6, #0
 8009392:	4634      	mov	r4, r6
 8009394:	e7ab      	b.n	80092ee <ai_platform_network_create+0xea>
 8009396:	2402      	movs	r4, #2
 8009398:	e7a6      	b.n	80092e8 <ai_platform_network_create+0xe4>
 800939a:	bf00      	nop
 800939c:	e0042000 	.word	0xe0042000
 80093a0:	58024c08 	.word	0x58024c08
 80093a4:	40023008 	.word	0x40023008
 80093a8:	40023000 	.word	0x40023000
 80093ac:	e0002000 	.word	0xe0002000
 80093b0:	58024c00 	.word	0x58024c00
 80093b4:	f407a5c2 	.word	0xf407a5c2
 80093b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80093bc:	a1c00100 	.word	0xa1c00100
 80093c0:	84048403 	.word	0x84048403

080093c4 <ai_platform_network_init>:
 80093c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d04b      	beq.n	8009464 <ai_platform_network_init+0xa0>
 80093cc:	4b79      	ldr	r3, [pc, #484]	; (80095b4 <ai_platform_network_init+0x1f0>)
 80093ce:	6802      	ldr	r2, [r0, #0]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	4604      	mov	r4, r0
 80093d4:	d146      	bne.n	8009464 <ai_platform_network_init+0xa0>
 80093d6:	4a78      	ldr	r2, [pc, #480]	; (80095b8 <ai_platform_network_init+0x1f4>)
 80093d8:	6813      	ldr	r3, [r2, #0]
 80093da:	f023 0301 	bic.w	r3, r3, #1
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	460e      	mov	r6, r1
 80093e2:	f7ff fbdf 	bl	8008ba4 <_ai_platform_acquire_crc>
 80093e6:	4b75      	ldr	r3, [pc, #468]	; (80095bc <ai_platform_network_init+0x1f8>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093f2:	d00d      	beq.n	8009410 <ai_platform_network_init+0x4c>
 80093f4:	4b72      	ldr	r3, [pc, #456]	; (80095c0 <ai_platform_network_init+0x1fc>)
 80093f6:	2201      	movs	r2, #1
 80093f8:	601a      	str	r2, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	2a00      	cmp	r2, #0
 80093fe:	d1fc      	bne.n	80093fa <ai_platform_network_init+0x36>
 8009400:	4b70      	ldr	r3, [pc, #448]	; (80095c4 <ai_platform_network_init+0x200>)
 8009402:	4a71      	ldr	r2, [pc, #452]	; (80095c8 <ai_platform_network_init+0x204>)
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	4b70      	ldr	r3, [pc, #448]	; (80095cc <ai_platform_network_init+0x208>)
 800940a:	429a      	cmp	r2, r3
 800940c:	d00d      	beq.n	800942a <ai_platform_network_init+0x66>
 800940e:	e7fe      	b.n	800940e <ai_platform_network_init+0x4a>
 8009410:	4b6f      	ldr	r3, [pc, #444]	; (80095d0 <ai_platform_network_init+0x20c>)
 8009412:	2201      	movs	r2, #1
 8009414:	601a      	str	r2, [r3, #0]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	2a00      	cmp	r2, #0
 800941a:	d1fc      	bne.n	8009416 <ai_platform_network_init+0x52>
 800941c:	4b6d      	ldr	r3, [pc, #436]	; (80095d4 <ai_platform_network_init+0x210>)
 800941e:	4a6a      	ldr	r2, [pc, #424]	; (80095c8 <ai_platform_network_init+0x204>)
 8009420:	601a      	str	r2, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	4b69      	ldr	r3, [pc, #420]	; (80095cc <ai_platform_network_init+0x208>)
 8009426:	429a      	cmp	r2, r3
 8009428:	d11b      	bne.n	8009462 <ai_platform_network_init+0x9e>
 800942a:	f7ff fbbd 	bl	8008ba8 <_ai_platform_release_crc>
 800942e:	2e00      	cmp	r6, #0
 8009430:	d034      	beq.n	800949c <ai_platform_network_init+0xd8>
 8009432:	4b69      	ldr	r3, [pc, #420]	; (80095d8 <ai_platform_network_init+0x214>)
 8009434:	6832      	ldr	r2, [r6, #0]
 8009436:	429a      	cmp	r2, r3
 8009438:	d149      	bne.n	80094ce <ai_platform_network_init+0x10a>
 800943a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800943e:	6930      	ldr	r0, [r6, #16]
 8009440:	89b3      	ldrh	r3, [r6, #12]
 8009442:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 8009446:	62a0      	str	r0, [r4, #40]	; 0x28
 8009448:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800944c:	2203      	movs	r2, #3
 800944e:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8009452:	84a3      	strh	r3, [r4, #36]	; 0x24
 8009454:	60e2      	str	r2, [r4, #12]
 8009456:	4620      	mov	r0, r4
 8009458:	f001 f88c 	bl	800a574 <ai_layers_init_all>
 800945c:	4620      	mov	r0, r4
 800945e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009462:	e7fe      	b.n	8009462 <ai_platform_network_init+0x9e>
 8009464:	4a54      	ldr	r2, [pc, #336]	; (80095b8 <ai_platform_network_init+0x1f4>)
 8009466:	6813      	ldr	r3, [r2, #0]
 8009468:	f023 0301 	bic.w	r3, r3, #1
 800946c:	6013      	str	r3, [r2, #0]
 800946e:	f7ff fb99 	bl	8008ba4 <_ai_platform_acquire_crc>
 8009472:	4b52      	ldr	r3, [pc, #328]	; (80095bc <ai_platform_network_init+0x1f8>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800947a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800947e:	d015      	beq.n	80094ac <ai_platform_network_init+0xe8>
 8009480:	4b4f      	ldr	r3, [pc, #316]	; (80095c0 <ai_platform_network_init+0x1fc>)
 8009482:	2201      	movs	r2, #1
 8009484:	601a      	str	r2, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	2a00      	cmp	r2, #0
 800948a:	d1fc      	bne.n	8009486 <ai_platform_network_init+0xc2>
 800948c:	4b4d      	ldr	r3, [pc, #308]	; (80095c4 <ai_platform_network_init+0x200>)
 800948e:	4a4e      	ldr	r2, [pc, #312]	; (80095c8 <ai_platform_network_init+0x204>)
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	4b4d      	ldr	r3, [pc, #308]	; (80095cc <ai_platform_network_init+0x208>)
 8009496:	429a      	cmp	r2, r3
 8009498:	d015      	beq.n	80094c6 <ai_platform_network_init+0x102>
 800949a:	e7fe      	b.n	800949a <ai_platform_network_init+0xd6>
 800949c:	f104 0010 	add.w	r0, r4, #16
 80094a0:	2211      	movs	r2, #17
 80094a2:	2110      	movs	r1, #16
 80094a4:	4634      	mov	r4, r6
 80094a6:	f000 fba1 	bl	8009bec <core_set_error>
 80094aa:	e7d7      	b.n	800945c <ai_platform_network_init+0x98>
 80094ac:	4b48      	ldr	r3, [pc, #288]	; (80095d0 <ai_platform_network_init+0x20c>)
 80094ae:	2201      	movs	r2, #1
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	2a00      	cmp	r2, #0
 80094b6:	d1fc      	bne.n	80094b2 <ai_platform_network_init+0xee>
 80094b8:	4b46      	ldr	r3, [pc, #280]	; (80095d4 <ai_platform_network_init+0x210>)
 80094ba:	4a43      	ldr	r2, [pc, #268]	; (80095c8 <ai_platform_network_init+0x204>)
 80094bc:	601a      	str	r2, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	4b42      	ldr	r3, [pc, #264]	; (80095cc <ai_platform_network_init+0x208>)
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d16d      	bne.n	80095a2 <ai_platform_network_init+0x1de>
 80094c6:	f7ff fb6f 	bl	8008ba8 <_ai_platform_release_crc>
 80094ca:	2400      	movs	r4, #0
 80094cc:	e7c6      	b.n	800945c <ai_platform_network_init+0x98>
 80094ce:	4630      	mov	r0, r6
 80094d0:	2101      	movs	r1, #1
 80094d2:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80094d6:	f7ff fb19 	bl	8008b0c <ai_buffer_get_size>
 80094da:	4635      	mov	r5, r6
 80094dc:	f106 071c 	add.w	r7, r6, #28
 80094e0:	2101      	movs	r1, #1
 80094e2:	4606      	mov	r6, r0
 80094e4:	4638      	mov	r0, r7
 80094e6:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80094ea:	f7ff fb0f 	bl	8008b0c <ai_buffer_get_size>
 80094ee:	2e00      	cmp	r6, #0
 80094f0:	bf0a      	itet	eq
 80094f2:	46b6      	moveq	lr, r6
 80094f4:	f04f 0e01 	movne.w	lr, #1
 80094f8:	4635      	moveq	r5, r6
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d14b      	bne.n	8009596 <ai_platform_network_init+0x1d2>
 80094fe:	4607      	mov	r7, r0
 8009500:	4684      	mov	ip, r0
 8009502:	f1b8 0f00 	cmp.w	r8, #0
 8009506:	d023      	beq.n	8009550 <ai_platform_network_init+0x18c>
 8009508:	8be3      	ldrh	r3, [r4, #30]
 800950a:	4573      	cmp	r3, lr
 800950c:	d207      	bcs.n	800951e <ai_platform_network_init+0x15a>
 800950e:	f104 0010 	add.w	r0, r4, #16
 8009512:	2212      	movs	r2, #18
 8009514:	2116      	movs	r1, #22
 8009516:	f000 fb69 	bl	8009bec <core_set_error>
 800951a:	2400      	movs	r4, #0
 800951c:	e79e      	b.n	800945c <ai_platform_network_init+0x98>
 800951e:	f1be 0f00 	cmp.w	lr, #0
 8009522:	d006      	beq.n	8009532 <ai_platform_network_init+0x16e>
 8009524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009526:	6a26      	ldr	r6, [r4, #32]
 8009528:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800952a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800952e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8009532:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009534:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8009538:	2600      	movs	r6, #0
 800953a:	4563      	cmp	r3, ip
 800953c:	83a6      	strh	r6, [r4, #28]
 800953e:	d211      	bcs.n	8009564 <ai_platform_network_init+0x1a0>
 8009540:	f104 0010 	add.w	r0, r4, #16
 8009544:	2213      	movs	r2, #19
 8009546:	2116      	movs	r1, #22
 8009548:	f000 fb50 	bl	8009bec <core_set_error>
 800954c:	4634      	mov	r4, r6
 800954e:	e785      	b.n	800945c <ai_platform_network_init+0x98>
 8009550:	2e00      	cmp	r6, #0
 8009552:	d0d9      	beq.n	8009508 <ai_platform_network_init+0x144>
 8009554:	f104 0010 	add.w	r0, r4, #16
 8009558:	2212      	movs	r2, #18
 800955a:	2110      	movs	r1, #16
 800955c:	4644      	mov	r4, r8
 800955e:	f000 fb45 	bl	8009bec <core_set_error>
 8009562:	e77b      	b.n	800945c <ai_platform_network_init+0x98>
 8009564:	f1bc 0f00 	cmp.w	ip, #0
 8009568:	d013      	beq.n	8009592 <ai_platform_network_init+0x1ce>
 800956a:	f04f 081c 	mov.w	r8, #28
 800956e:	fb08 f80c 	mul.w	r8, r8, ip
 8009572:	eb07 0e06 	add.w	lr, r7, r6
 8009576:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800957a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800957c:	4435      	add	r5, r6
 800957e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009580:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8009584:	361c      	adds	r6, #28
 8009586:	4546      	cmp	r6, r8
 8009588:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800958c:	d1f1      	bne.n	8009572 <ai_platform_network_init+0x1ae>
 800958e:	2300      	movs	r3, #0
 8009590:	e75c      	b.n	800944c <ai_platform_network_init+0x88>
 8009592:	4663      	mov	r3, ip
 8009594:	e75a      	b.n	800944c <ai_platform_network_init+0x88>
 8009596:	f1b9 0f00 	cmp.w	r9, #0
 800959a:	d003      	beq.n	80095a4 <ai_platform_network_init+0x1e0>
 800959c:	f04f 0c01 	mov.w	ip, #1
 80095a0:	e7af      	b.n	8009502 <ai_platform_network_init+0x13e>
 80095a2:	e7fe      	b.n	80095a2 <ai_platform_network_init+0x1de>
 80095a4:	f104 0010 	add.w	r0, r4, #16
 80095a8:	2213      	movs	r2, #19
 80095aa:	2110      	movs	r1, #16
 80095ac:	464c      	mov	r4, r9
 80095ae:	f000 fb1d 	bl	8009bec <core_set_error>
 80095b2:	e753      	b.n	800945c <ai_platform_network_init+0x98>
 80095b4:	a1c00100 	.word	0xa1c00100
 80095b8:	e0002000 	.word	0xe0002000
 80095bc:	e0042000 	.word	0xe0042000
 80095c0:	58024c08 	.word	0x58024c08
 80095c4:	58024c00 	.word	0x58024c00
 80095c8:	f407a5c2 	.word	0xf407a5c2
 80095cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80095d0:	40023008 	.word	0x40023008
 80095d4:	40023000 	.word	0x40023000
 80095d8:	a1facade 	.word	0xa1facade

080095dc <ai_platform_network_post_init>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	b120      	cbz	r0, 80095ea <ai_platform_network_post_init+0xe>
 80095e0:	4b3f      	ldr	r3, [pc, #252]	; (80096e0 <ai_platform_network_post_init+0x104>)
 80095e2:	6802      	ldr	r2, [r0, #0]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	4604      	mov	r4, r0
 80095e8:	d02d      	beq.n	8009646 <ai_platform_network_post_init+0x6a>
 80095ea:	4a3e      	ldr	r2, [pc, #248]	; (80096e4 <ai_platform_network_post_init+0x108>)
 80095ec:	6813      	ldr	r3, [r2, #0]
 80095ee:	f023 0301 	bic.w	r3, r3, #1
 80095f2:	6013      	str	r3, [r2, #0]
 80095f4:	f7ff fad6 	bl	8008ba4 <_ai_platform_acquire_crc>
 80095f8:	4b3b      	ldr	r3, [pc, #236]	; (80096e8 <ai_platform_network_post_init+0x10c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009604:	d00d      	beq.n	8009622 <ai_platform_network_post_init+0x46>
 8009606:	4b39      	ldr	r3, [pc, #228]	; (80096ec <ai_platform_network_post_init+0x110>)
 8009608:	2201      	movs	r2, #1
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	2a00      	cmp	r2, #0
 8009610:	d1fc      	bne.n	800960c <ai_platform_network_post_init+0x30>
 8009612:	4b37      	ldr	r3, [pc, #220]	; (80096f0 <ai_platform_network_post_init+0x114>)
 8009614:	4a37      	ldr	r2, [pc, #220]	; (80096f4 <ai_platform_network_post_init+0x118>)
 8009616:	601a      	str	r2, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	4b37      	ldr	r3, [pc, #220]	; (80096f8 <ai_platform_network_post_init+0x11c>)
 800961c:	429a      	cmp	r2, r3
 800961e:	d00d      	beq.n	800963c <ai_platform_network_post_init+0x60>
 8009620:	e7fe      	b.n	8009620 <ai_platform_network_post_init+0x44>
 8009622:	4b36      	ldr	r3, [pc, #216]	; (80096fc <ai_platform_network_post_init+0x120>)
 8009624:	2201      	movs	r2, #1
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	2a00      	cmp	r2, #0
 800962c:	d1fc      	bne.n	8009628 <ai_platform_network_post_init+0x4c>
 800962e:	4b34      	ldr	r3, [pc, #208]	; (8009700 <ai_platform_network_post_init+0x124>)
 8009630:	4a30      	ldr	r2, [pc, #192]	; (80096f4 <ai_platform_network_post_init+0x118>)
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	4b30      	ldr	r3, [pc, #192]	; (80096f8 <ai_platform_network_post_init+0x11c>)
 8009638:	429a      	cmp	r2, r3
 800963a:	d103      	bne.n	8009644 <ai_platform_network_post_init+0x68>
 800963c:	f7ff fab4 	bl	8008ba8 <_ai_platform_release_crc>
 8009640:	2000      	movs	r0, #0
 8009642:	bd38      	pop	{r3, r4, r5, pc}
 8009644:	e7fe      	b.n	8009644 <ai_platform_network_post_init+0x68>
 8009646:	4a27      	ldr	r2, [pc, #156]	; (80096e4 <ai_platform_network_post_init+0x108>)
 8009648:	6813      	ldr	r3, [r2, #0]
 800964a:	f023 0301 	bic.w	r3, r3, #1
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	f7ff faa8 	bl	8008ba4 <_ai_platform_acquire_crc>
 8009654:	4b24      	ldr	r3, [pc, #144]	; (80096e8 <ai_platform_network_post_init+0x10c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800965c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009660:	d00d      	beq.n	800967e <ai_platform_network_post_init+0xa2>
 8009662:	4b22      	ldr	r3, [pc, #136]	; (80096ec <ai_platform_network_post_init+0x110>)
 8009664:	2201      	movs	r2, #1
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	2a00      	cmp	r2, #0
 800966c:	d1fc      	bne.n	8009668 <ai_platform_network_post_init+0x8c>
 800966e:	4b20      	ldr	r3, [pc, #128]	; (80096f0 <ai_platform_network_post_init+0x114>)
 8009670:	4a20      	ldr	r2, [pc, #128]	; (80096f4 <ai_platform_network_post_init+0x118>)
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	4b20      	ldr	r3, [pc, #128]	; (80096f8 <ai_platform_network_post_init+0x11c>)
 8009678:	429a      	cmp	r2, r3
 800967a:	d00e      	beq.n	800969a <ai_platform_network_post_init+0xbe>
 800967c:	e7fe      	b.n	800967c <ai_platform_network_post_init+0xa0>
 800967e:	4b1f      	ldr	r3, [pc, #124]	; (80096fc <ai_platform_network_post_init+0x120>)
 8009680:	2201      	movs	r2, #1
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	2a00      	cmp	r2, #0
 8009688:	d1fc      	bne.n	8009684 <ai_platform_network_post_init+0xa8>
 800968a:	4b1d      	ldr	r3, [pc, #116]	; (8009700 <ai_platform_network_post_init+0x124>)
 800968c:	4a19      	ldr	r2, [pc, #100]	; (80096f4 <ai_platform_network_post_init+0x118>)
 800968e:	601a      	str	r2, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	4b19      	ldr	r3, [pc, #100]	; (80096f8 <ai_platform_network_post_init+0x11c>)
 8009694:	429a      	cmp	r2, r3
 8009696:	d000      	beq.n	800969a <ai_platform_network_post_init+0xbe>
 8009698:	e7fe      	b.n	8009698 <ai_platform_network_post_init+0xbc>
 800969a:	f7ff fa85 	bl	8008ba8 <_ai_platform_release_crc>
 800969e:	68e3      	ldr	r3, [r4, #12]
 80096a0:	f013 0502 	ands.w	r5, r3, #2
 80096a4:	d011      	beq.n	80096ca <ai_platform_network_post_init+0xee>
 80096a6:	4620      	mov	r0, r4
 80096a8:	f000 ff78 	bl	800a59c <ai_layers_post_init_all>
 80096ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80096ae:	b1a3      	cbz	r3, 80096da <ai_platform_network_post_init+0xfe>
 80096b0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80096b2:	b195      	cbz	r5, 80096da <ai_platform_network_post_init+0xfe>
 80096b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80096b6:	4629      	mov	r1, r5
 80096b8:	2000      	movs	r0, #0
 80096ba:	4798      	blx	r3
 80096bc:	692b      	ldr	r3, [r5, #16]
 80096be:	42ab      	cmp	r3, r5
 80096c0:	d00b      	beq.n	80096da <ai_platform_network_post_init+0xfe>
 80096c2:	461d      	mov	r5, r3
 80096c4:	b14b      	cbz	r3, 80096da <ai_platform_network_post_init+0xfe>
 80096c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80096c8:	e7f4      	b.n	80096b4 <ai_platform_network_post_init+0xd8>
 80096ca:	f104 0010 	add.w	r0, r4, #16
 80096ce:	2210      	movs	r2, #16
 80096d0:	2111      	movs	r1, #17
 80096d2:	f000 fa8b 	bl	8009bec <core_set_error>
 80096d6:	4628      	mov	r0, r5
 80096d8:	bd38      	pop	{r3, r4, r5, pc}
 80096da:	2001      	movs	r0, #1
 80096dc:	bd38      	pop	{r3, r4, r5, pc}
 80096de:	bf00      	nop
 80096e0:	a1c00100 	.word	0xa1c00100
 80096e4:	e0002000 	.word	0xe0002000
 80096e8:	e0042000 	.word	0xe0042000
 80096ec:	58024c08 	.word	0x58024c08
 80096f0:	58024c00 	.word	0x58024c00
 80096f4:	f407a5c2 	.word	0xf407a5c2
 80096f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80096fc:	40023008 	.word	0x40023008
 8009700:	40023000 	.word	0x40023000

08009704 <ai_platform_network_process>:
 8009704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009708:	b085      	sub	sp, #20
 800970a:	460d      	mov	r5, r1
 800970c:	9202      	str	r2, [sp, #8]
 800970e:	4604      	mov	r4, r0
 8009710:	b120      	cbz	r0, 800971c <ai_platform_network_process+0x18>
 8009712:	4b73      	ldr	r3, [pc, #460]	; (80098e0 <ai_platform_network_process+0x1dc>)
 8009714:	6802      	ldr	r2, [r0, #0]
 8009716:	429a      	cmp	r2, r3
 8009718:	bf18      	it	ne
 800971a:	2400      	movne	r4, #0
 800971c:	4a71      	ldr	r2, [pc, #452]	; (80098e4 <ai_platform_network_process+0x1e0>)
 800971e:	6813      	ldr	r3, [r2, #0]
 8009720:	f023 0301 	bic.w	r3, r3, #1
 8009724:	6013      	str	r3, [r2, #0]
 8009726:	f7ff fa3d 	bl	8008ba4 <_ai_platform_acquire_crc>
 800972a:	4b6f      	ldr	r3, [pc, #444]	; (80098e8 <ai_platform_network_process+0x1e4>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009736:	d00d      	beq.n	8009754 <ai_platform_network_process+0x50>
 8009738:	4b6c      	ldr	r3, [pc, #432]	; (80098ec <ai_platform_network_process+0x1e8>)
 800973a:	2201      	movs	r2, #1
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	2a00      	cmp	r2, #0
 8009742:	d1fc      	bne.n	800973e <ai_platform_network_process+0x3a>
 8009744:	4b6a      	ldr	r3, [pc, #424]	; (80098f0 <ai_platform_network_process+0x1ec>)
 8009746:	4a6b      	ldr	r2, [pc, #428]	; (80098f4 <ai_platform_network_process+0x1f0>)
 8009748:	601a      	str	r2, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	4b6a      	ldr	r3, [pc, #424]	; (80098f8 <ai_platform_network_process+0x1f4>)
 800974e:	429a      	cmp	r2, r3
 8009750:	d00e      	beq.n	8009770 <ai_platform_network_process+0x6c>
 8009752:	e7fe      	b.n	8009752 <ai_platform_network_process+0x4e>
 8009754:	4b69      	ldr	r3, [pc, #420]	; (80098fc <ai_platform_network_process+0x1f8>)
 8009756:	2201      	movs	r2, #1
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	2a00      	cmp	r2, #0
 800975e:	d1fc      	bne.n	800975a <ai_platform_network_process+0x56>
 8009760:	4b67      	ldr	r3, [pc, #412]	; (8009900 <ai_platform_network_process+0x1fc>)
 8009762:	4a64      	ldr	r2, [pc, #400]	; (80098f4 <ai_platform_network_process+0x1f0>)
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	4b63      	ldr	r3, [pc, #396]	; (80098f8 <ai_platform_network_process+0x1f4>)
 800976a:	429a      	cmp	r2, r3
 800976c:	d000      	beq.n	8009770 <ai_platform_network_process+0x6c>
 800976e:	e7fe      	b.n	800976e <ai_platform_network_process+0x6a>
 8009770:	f7ff fa1a 	bl	8008ba8 <_ai_platform_release_crc>
 8009774:	2c00      	cmp	r4, #0
 8009776:	f000 8089 	beq.w	800988c <ai_platform_network_process+0x188>
 800977a:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800977c:	2f00      	cmp	r7, #0
 800977e:	f040 822b 	bne.w	8009bd8 <ai_platform_network_process+0x4d4>
 8009782:	68e3      	ldr	r3, [r4, #12]
 8009784:	f003 0303 	and.w	r3, r3, #3
 8009788:	2600      	movs	r6, #0
 800978a:	2b03      	cmp	r3, #3
 800978c:	6166      	str	r6, [r4, #20]
 800978e:	f040 821b 	bne.w	8009bc8 <ai_platform_network_process+0x4c4>
 8009792:	2d00      	cmp	r5, #0
 8009794:	f000 809c 	beq.w	80098d0 <ai_platform_network_process+0x1cc>
 8009798:	2f00      	cmp	r7, #0
 800979a:	f000 8099 	beq.w	80098d0 <ai_platform_network_process+0x1cc>
 800979e:	883b      	ldrh	r3, [r7, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 8095 	beq.w	80098d0 <ai_platform_network_process+0x1cc>
 80097a6:	69aa      	ldr	r2, [r5, #24]
 80097a8:	9401      	str	r4, [sp, #4]
 80097aa:	f8d2 8000 	ldr.w	r8, [r2]
 80097ae:	429e      	cmp	r6, r3
 80097b0:	f080 80a8 	bcs.w	8009904 <ai_platform_network_process+0x200>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f000 80a4 	beq.w	8009904 <ai_platform_network_process+0x200>
 80097bc:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 80097c0:	2c00      	cmp	r4, #0
 80097c2:	f000 809f 	beq.w	8009904 <ai_platform_network_process+0x200>
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	f8d3 b000 	ldr.w	fp, [r3]
 80097cc:	ea4f 1906 	mov.w	r9, r6, lsl #4
 80097d0:	eb1b 0a09 	adds.w	sl, fp, r9
 80097d4:	d07b      	beq.n	80098ce <ai_platform_network_process+0x1ca>
 80097d6:	69a3      	ldr	r3, [r4, #24]
 80097d8:	2101      	movs	r1, #1
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	9303      	str	r3, [sp, #12]
 80097de:	4628      	mov	r0, r5
 80097e0:	f7ff f994 	bl	8008b0c <ai_buffer_get_size>
 80097e4:	9b03      	ldr	r3, [sp, #12]
 80097e6:	4283      	cmp	r3, r0
 80097e8:	d368      	bcc.n	80098bc <ai_platform_network_process+0x1b8>
 80097ea:	68e0      	ldr	r0, [r4, #12]
 80097ec:	69a9      	ldr	r1, [r5, #24]
 80097ee:	68c2      	ldr	r2, [r0, #12]
 80097f0:	68cb      	ldr	r3, [r1, #12]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d162      	bne.n	80098bc <ai_platform_network_process+0x1b8>
 80097f6:	6882      	ldr	r2, [r0, #8]
 80097f8:	688b      	ldr	r3, [r1, #8]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d15e      	bne.n	80098bc <ai_platform_network_process+0x1b8>
 80097fe:	6842      	ldr	r2, [r0, #4]
 8009800:	684b      	ldr	r3, [r1, #4]
 8009802:	429a      	cmp	r2, r3
 8009804:	d15a      	bne.n	80098bc <ai_platform_network_process+0x1b8>
 8009806:	69a3      	ldr	r3, [r4, #24]
 8009808:	e9d3 0100 	ldrd	r0, r1, [r3]
 800980c:	f000 ffc0 	bl	800a790 <ai_array_get_data_byte_size>
 8009810:	9003      	str	r0, [sp, #12]
 8009812:	4620      	mov	r0, r4
 8009814:	f000 ff2e 	bl	800a674 <get_tensor_byte_size>
 8009818:	9b03      	ldr	r3, [sp, #12]
 800981a:	4283      	cmp	r3, r0
 800981c:	d34e      	bcc.n	80098bc <ai_platform_network_process+0x1b8>
 800981e:	69a3      	ldr	r3, [r4, #24]
 8009820:	6818      	ldr	r0, [r3, #0]
 8009822:	f000 ff3b 	bl	800a69c <ai_array_to_buffer_fmt>
 8009826:	682b      	ldr	r3, [r5, #0]
 8009828:	4043      	eors	r3, r0
 800982a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800982e:	d13c      	bne.n	80098aa <ai_platform_network_process+0x1a6>
 8009830:	686b      	ldr	r3, [r5, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d04b      	beq.n	80098ce <ai_platform_network_process+0x1ca>
 8009836:	69ab      	ldr	r3, [r5, #24]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	b362      	cbz	r2, 8009896 <ai_platform_network_process+0x192>
 800983c:	4620      	mov	r0, r4
 800983e:	9203      	str	r2, [sp, #12]
 8009840:	f000 ff18 	bl	800a674 <get_tensor_byte_size>
 8009844:	f8ca 0008 	str.w	r0, [sl, #8]
 8009848:	69ab      	ldr	r3, [r5, #24]
 800984a:	9a03      	ldr	r2, [sp, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	fb03 f000 	mul.w	r0, r3, r0
 8009852:	f8ca 000c 	str.w	r0, [sl, #12]
 8009856:	6869      	ldr	r1, [r5, #4]
 8009858:	f8ca 1004 	str.w	r1, [sl, #4]
 800985c:	686b      	ldr	r3, [r5, #4]
 800985e:	4403      	add	r3, r0
 8009860:	f84b 3009 	str.w	r3, [fp, r9]
 8009864:	69a0      	ldr	r0, [r4, #24]
 8009866:	6803      	ldr	r3, [r0, #0]
 8009868:	4590      	cmp	r8, r2
 800986a:	bf38      	it	cc
 800986c:	4690      	movcc	r8, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	d408      	bmi.n	8009884 <ai_platform_network_process+0x180>
 8009872:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009876:	1a9b      	subs	r3, r3, r2
 8009878:	4419      	add	r1, r3
 800987a:	6081      	str	r1, [r0, #8]
 800987c:	69a3      	ldr	r3, [r4, #24]
 800987e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009882:	60da      	str	r2, [r3, #12]
 8009884:	883b      	ldrh	r3, [r7, #0]
 8009886:	3601      	adds	r6, #1
 8009888:	351c      	adds	r5, #28
 800988a:	e790      	b.n	80097ae <ai_platform_network_process+0xaa>
 800988c:	4623      	mov	r3, r4
 800988e:	4618      	mov	r0, r3
 8009890:	b005      	add	sp, #20
 8009892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009896:	9c01      	ldr	r4, [sp, #4]
 8009898:	4692      	mov	sl, r2
 800989a:	f104 0010 	add.w	r0, r4, #16
 800989e:	2221      	movs	r2, #33	; 0x21
 80098a0:	2112      	movs	r1, #18
 80098a2:	f000 f9a3 	bl	8009bec <core_set_error>
 80098a6:	4653      	mov	r3, sl
 80098a8:	e7f1      	b.n	800988e <ai_platform_network_process+0x18a>
 80098aa:	9c01      	ldr	r4, [sp, #4]
 80098ac:	2219      	movs	r2, #25
 80098ae:	f104 0010 	add.w	r0, r4, #16
 80098b2:	2112      	movs	r1, #18
 80098b4:	f000 f99a 	bl	8009bec <core_set_error>
 80098b8:	2300      	movs	r3, #0
 80098ba:	e7e8      	b.n	800988e <ai_platform_network_process+0x18a>
 80098bc:	9c01      	ldr	r4, [sp, #4]
 80098be:	2218      	movs	r2, #24
 80098c0:	f104 0010 	add.w	r0, r4, #16
 80098c4:	2112      	movs	r1, #18
 80098c6:	f000 f991 	bl	8009bec <core_set_error>
 80098ca:	2300      	movs	r3, #0
 80098cc:	e7df      	b.n	800988e <ai_platform_network_process+0x18a>
 80098ce:	9c01      	ldr	r4, [sp, #4]
 80098d0:	f104 0010 	add.w	r0, r4, #16
 80098d4:	2217      	movs	r2, #23
 80098d6:	2112      	movs	r1, #18
 80098d8:	f000 f988 	bl	8009bec <core_set_error>
 80098dc:	2300      	movs	r3, #0
 80098de:	e7d6      	b.n	800988e <ai_platform_network_process+0x18a>
 80098e0:	a1c00100 	.word	0xa1c00100
 80098e4:	e0002000 	.word	0xe0002000
 80098e8:	e0042000 	.word	0xe0042000
 80098ec:	58024c08 	.word	0x58024c08
 80098f0:	58024c00 	.word	0x58024c00
 80098f4:	f407a5c2 	.word	0xf407a5c2
 80098f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80098fc:	40023008 	.word	0x40023008
 8009900:	40023000 	.word	0x40023000
 8009904:	9c01      	ldr	r4, [sp, #4]
 8009906:	9a02      	ldr	r2, [sp, #8]
 8009908:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800990a:	2a00      	cmp	r2, #0
 800990c:	f000 80ab 	beq.w	8009a66 <ai_platform_network_process+0x362>
 8009910:	2b01      	cmp	r3, #1
 8009912:	f240 809e 	bls.w	8009a52 <ai_platform_network_process+0x34e>
 8009916:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 800991a:	f119 0f0c 	cmn.w	r9, #12
 800991e:	f000 8098 	beq.w	8009a52 <ai_platform_network_process+0x34e>
 8009922:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 8093 	beq.w	8009a52 <ai_platform_network_process+0x34e>
 800992c:	9d02      	ldr	r5, [sp, #8]
 800992e:	9401      	str	r4, [sp, #4]
 8009930:	2700      	movs	r7, #0
 8009932:	429f      	cmp	r7, r3
 8009934:	f080 8095 	bcs.w	8009a62 <ai_platform_network_process+0x35e>
 8009938:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 8090 	beq.w	8009a62 <ai_platform_network_process+0x35e>
 8009942:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8009946:	2c00      	cmp	r4, #0
 8009948:	f000 808b 	beq.w	8009a62 <ai_platform_network_process+0x35e>
 800994c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009950:	f8d3 b000 	ldr.w	fp, [r3]
 8009954:	013e      	lsls	r6, r7, #4
 8009956:	eb1b 0a06 	adds.w	sl, fp, r6
 800995a:	f000 812c 	beq.w	8009bb6 <ai_platform_network_process+0x4b2>
 800995e:	69a3      	ldr	r3, [r4, #24]
 8009960:	2101      	movs	r1, #1
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	9302      	str	r3, [sp, #8]
 8009966:	4628      	mov	r0, r5
 8009968:	f7ff f8d0 	bl	8008b0c <ai_buffer_get_size>
 800996c:	9b02      	ldr	r3, [sp, #8]
 800996e:	4283      	cmp	r3, r0
 8009970:	d36e      	bcc.n	8009a50 <ai_platform_network_process+0x34c>
 8009972:	68e0      	ldr	r0, [r4, #12]
 8009974:	69a9      	ldr	r1, [r5, #24]
 8009976:	68c2      	ldr	r2, [r0, #12]
 8009978:	68cb      	ldr	r3, [r1, #12]
 800997a:	429a      	cmp	r2, r3
 800997c:	d168      	bne.n	8009a50 <ai_platform_network_process+0x34c>
 800997e:	6882      	ldr	r2, [r0, #8]
 8009980:	688b      	ldr	r3, [r1, #8]
 8009982:	429a      	cmp	r2, r3
 8009984:	d164      	bne.n	8009a50 <ai_platform_network_process+0x34c>
 8009986:	6842      	ldr	r2, [r0, #4]
 8009988:	684b      	ldr	r3, [r1, #4]
 800998a:	429a      	cmp	r2, r3
 800998c:	d160      	bne.n	8009a50 <ai_platform_network_process+0x34c>
 800998e:	69a3      	ldr	r3, [r4, #24]
 8009990:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009994:	f000 fefc 	bl	800a790 <ai_array_get_data_byte_size>
 8009998:	9002      	str	r0, [sp, #8]
 800999a:	4620      	mov	r0, r4
 800999c:	f000 fe6a 	bl	800a674 <get_tensor_byte_size>
 80099a0:	9b02      	ldr	r3, [sp, #8]
 80099a2:	4283      	cmp	r3, r0
 80099a4:	d354      	bcc.n	8009a50 <ai_platform_network_process+0x34c>
 80099a6:	69a3      	ldr	r3, [r4, #24]
 80099a8:	6818      	ldr	r0, [r3, #0]
 80099aa:	f000 fe77 	bl	800a69c <ai_array_to_buffer_fmt>
 80099ae:	682b      	ldr	r3, [r5, #0]
 80099b0:	4043      	eors	r3, r0
 80099b2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80099b6:	d142      	bne.n	8009a3e <ai_platform_network_process+0x33a>
 80099b8:	686b      	ldr	r3, [r5, #4]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d035      	beq.n	8009a2a <ai_platform_network_process+0x326>
 80099be:	69ab      	ldr	r3, [r5, #24]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	b342      	cbz	r2, 8009a16 <ai_platform_network_process+0x312>
 80099c4:	4620      	mov	r0, r4
 80099c6:	9202      	str	r2, [sp, #8]
 80099c8:	f000 fe54 	bl	800a674 <get_tensor_byte_size>
 80099cc:	f8ca 0008 	str.w	r0, [sl, #8]
 80099d0:	69ab      	ldr	r3, [r5, #24]
 80099d2:	9a02      	ldr	r2, [sp, #8]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	fb03 f000 	mul.w	r0, r3, r0
 80099da:	f8ca 000c 	str.w	r0, [sl, #12]
 80099de:	6869      	ldr	r1, [r5, #4]
 80099e0:	f8ca 1004 	str.w	r1, [sl, #4]
 80099e4:	686b      	ldr	r3, [r5, #4]
 80099e6:	4403      	add	r3, r0
 80099e8:	f84b 3006 	str.w	r3, [fp, r6]
 80099ec:	69a0      	ldr	r0, [r4, #24]
 80099ee:	6803      	ldr	r3, [r0, #0]
 80099f0:	4590      	cmp	r8, r2
 80099f2:	bf38      	it	cc
 80099f4:	4690      	movcc	r8, r2
 80099f6:	009e      	lsls	r6, r3, #2
 80099f8:	d408      	bmi.n	8009a0c <ai_platform_network_process+0x308>
 80099fa:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80099fe:	1a9b      	subs	r3, r3, r2
 8009a00:	4419      	add	r1, r3
 8009a02:	6081      	str	r1, [r0, #8]
 8009a04:	69a3      	ldr	r3, [r4, #24]
 8009a06:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009a0a:	60da      	str	r2, [r3, #12]
 8009a0c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009a10:	3701      	adds	r7, #1
 8009a12:	351c      	adds	r5, #28
 8009a14:	e78d      	b.n	8009932 <ai_platform_network_process+0x22e>
 8009a16:	9c01      	ldr	r4, [sp, #4]
 8009a18:	4692      	mov	sl, r2
 8009a1a:	f104 0010 	add.w	r0, r4, #16
 8009a1e:	2221      	movs	r2, #33	; 0x21
 8009a20:	2113      	movs	r1, #19
 8009a22:	f000 f8e3 	bl	8009bec <core_set_error>
 8009a26:	4653      	mov	r3, sl
 8009a28:	e731      	b.n	800988e <ai_platform_network_process+0x18a>
 8009a2a:	9c01      	ldr	r4, [sp, #4]
 8009a2c:	469a      	mov	sl, r3
 8009a2e:	f104 0010 	add.w	r0, r4, #16
 8009a32:	2217      	movs	r2, #23
 8009a34:	2113      	movs	r1, #19
 8009a36:	f000 f8d9 	bl	8009bec <core_set_error>
 8009a3a:	4653      	mov	r3, sl
 8009a3c:	e727      	b.n	800988e <ai_platform_network_process+0x18a>
 8009a3e:	9c01      	ldr	r4, [sp, #4]
 8009a40:	2219      	movs	r2, #25
 8009a42:	f104 0010 	add.w	r0, r4, #16
 8009a46:	2113      	movs	r1, #19
 8009a48:	f000 f8d0 	bl	8009bec <core_set_error>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	e71e      	b.n	800988e <ai_platform_network_process+0x18a>
 8009a50:	9c01      	ldr	r4, [sp, #4]
 8009a52:	f104 0010 	add.w	r0, r4, #16
 8009a56:	2218      	movs	r2, #24
 8009a58:	2113      	movs	r1, #19
 8009a5a:	f000 f8c7 	bl	8009bec <core_set_error>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	e715      	b.n	800988e <ai_platform_network_process+0x18a>
 8009a62:	9c01      	ldr	r4, [sp, #4]
 8009a64:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8009a66:	f8a4 8014 	strh.w	r8, [r4, #20]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f000 80a0 	beq.w	8009bb0 <ai_platform_network_process+0x4ac>
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8009a74:	f240 809a 	bls.w	8009bac <ai_platform_network_process+0x4a8>
 8009a78:	f105 070c 	add.w	r7, r5, #12
 8009a7c:	8ae3      	ldrh	r3, [r4, #22]
 8009a7e:	8aa2      	ldrh	r2, [r4, #20]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	f67f af04 	bls.w	800988e <ai_platform_network_process+0x18a>
 8009a86:	46a3      	mov	fp, r4
 8009a88:	2d00      	cmp	r5, #0
 8009a8a:	d036      	beq.n	8009afa <ai_platform_network_process+0x3f6>
 8009a8c:	882b      	ldrh	r3, [r5, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d033      	beq.n	8009afa <ai_platform_network_process+0x3f6>
 8009a92:	686b      	ldr	r3, [r5, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d030      	beq.n	8009afa <ai_platform_network_process+0x3f6>
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f04f 0800 	mov.w	r8, #0
 8009a9e:	b9db      	cbnz	r3, 8009ad8 <ai_platform_network_process+0x3d4>
 8009aa0:	e02b      	b.n	8009afa <ai_platform_network_process+0x3f6>
 8009aa2:	68d4      	ldr	r4, [r2, #12]
 8009aa4:	1b00      	subs	r0, r0, r4
 8009aa6:	4401      	add	r1, r0
 8009aa8:	6091      	str	r1, [r2, #8]
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	6872      	ldr	r2, [r6, #4]
 8009aae:	60da      	str	r2, [r3, #12]
 8009ab0:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8009ab4:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009ab8:	440b      	add	r3, r1
 8009aba:	4293      	cmp	r3, r2
 8009abc:	bf24      	itt	cs
 8009abe:	68f3      	ldrcs	r3, [r6, #12]
 8009ac0:	1ad3      	subcs	r3, r2, r3
 8009ac2:	6073      	str	r3, [r6, #4]
 8009ac4:	882b      	ldrh	r3, [r5, #0]
 8009ac6:	f108 0801 	add.w	r8, r8, #1
 8009aca:	4598      	cmp	r8, r3
 8009acc:	d215      	bcs.n	8009afa <ai_platform_network_process+0x3f6>
 8009ace:	686b      	ldr	r3, [r5, #4]
 8009ad0:	b19b      	cbz	r3, 8009afa <ai_platform_network_process+0x3f6>
 8009ad2:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009ad6:	b183      	cbz	r3, 8009afa <ai_platform_network_process+0x3f6>
 8009ad8:	68a9      	ldr	r1, [r5, #8]
 8009ada:	699a      	ldr	r2, [r3, #24]
 8009adc:	f8d1 a000 	ldr.w	sl, [r1]
 8009ae0:	6814      	ldr	r4, [r2, #0]
 8009ae2:	6890      	ldr	r0, [r2, #8]
 8009ae4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8009ae8:	eb0a 0609 	add.w	r6, sl, r9
 8009aec:	00a4      	lsls	r4, r4, #2
 8009aee:	6871      	ldr	r1, [r6, #4]
 8009af0:	d5d7      	bpl.n	8009aa2 <ai_platform_network_process+0x39e>
 8009af2:	68b2      	ldr	r2, [r6, #8]
 8009af4:	f000 fe86 	bl	800a804 <memcpy>
 8009af8:	e7da      	b.n	8009ab0 <ai_platform_network_process+0x3ac>
 8009afa:	4658      	mov	r0, fp
 8009afc:	f000 fd66 	bl	800a5cc <ai_layers_forward_all>
 8009b00:	2f00      	cmp	r7, #0
 8009b02:	d047      	beq.n	8009b94 <ai_platform_network_process+0x490>
 8009b04:	883b      	ldrh	r3, [r7, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d044      	beq.n	8009b94 <ai_platform_network_process+0x490>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d041      	beq.n	8009b94 <ai_platform_network_process+0x490>
 8009b10:	6818      	ldr	r0, [r3, #0]
 8009b12:	2800      	cmp	r0, #0
 8009b14:	d03e      	beq.n	8009b94 <ai_platform_network_process+0x490>
 8009b16:	f04f 0800 	mov.w	r8, #0
 8009b1a:	e019      	b.n	8009b50 <ai_platform_network_process+0x44c>
 8009b1c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009b20:	4293      	cmp	r3, r2
 8009b22:	bf24      	itt	cs
 8009b24:	68f3      	ldrcs	r3, [r6, #12]
 8009b26:	1ad3      	subcs	r3, r2, r3
 8009b28:	6073      	str	r3, [r6, #4]
 8009b2a:	6981      	ldr	r1, [r0, #24]
 8009b2c:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8009b30:	1b12      	subs	r2, r2, r4
 8009b32:	4413      	add	r3, r2
 8009b34:	608b      	str	r3, [r1, #8]
 8009b36:	6983      	ldr	r3, [r0, #24]
 8009b38:	6872      	ldr	r2, [r6, #4]
 8009b3a:	60da      	str	r2, [r3, #12]
 8009b3c:	883b      	ldrh	r3, [r7, #0]
 8009b3e:	f108 0801 	add.w	r8, r8, #1
 8009b42:	4598      	cmp	r8, r3
 8009b44:	d226      	bcs.n	8009b94 <ai_platform_network_process+0x490>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	b323      	cbz	r3, 8009b94 <ai_platform_network_process+0x490>
 8009b4a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009b4e:	b308      	cbz	r0, 8009b94 <ai_platform_network_process+0x490>
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	6981      	ldr	r1, [r0, #24]
 8009b54:	f8d3 a000 	ldr.w	sl, [r3]
 8009b58:	680c      	ldr	r4, [r1, #0]
 8009b5a:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8009b5e:	eb0a 0609 	add.w	r6, sl, r9
 8009b62:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8009b66:	00a4      	lsls	r4, r4, #2
 8009b68:	eb0c 0302 	add.w	r3, ip, r2
 8009b6c:	d5d6      	bpl.n	8009b1c <ai_platform_network_process+0x418>
 8009b6e:	6889      	ldr	r1, [r1, #8]
 8009b70:	4660      	mov	r0, ip
 8009b72:	f000 fe47 	bl	800a804 <memcpy>
 8009b76:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8009b7a:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009b7e:	440b      	add	r3, r1
 8009b80:	4293      	cmp	r3, r2
 8009b82:	bf24      	itt	cs
 8009b84:	68f3      	ldrcs	r3, [r6, #12]
 8009b86:	1ad3      	subcs	r3, r2, r3
 8009b88:	6073      	str	r3, [r6, #4]
 8009b8a:	883b      	ldrh	r3, [r7, #0]
 8009b8c:	f108 0801 	add.w	r8, r8, #1
 8009b90:	4598      	cmp	r8, r3
 8009b92:	d3d8      	bcc.n	8009b46 <ai_platform_network_process+0x442>
 8009b94:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 8009b98:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	f8ab 3016 	strh.w	r3, [fp, #22]
 8009ba6:	f63f af6f 	bhi.w	8009a88 <ai_platform_network_process+0x384>
 8009baa:	e670      	b.n	800988e <ai_platform_network_process+0x18a>
 8009bac:	2700      	movs	r7, #0
 8009bae:	e765      	b.n	8009a7c <ai_platform_network_process+0x378>
 8009bb0:	461d      	mov	r5, r3
 8009bb2:	461f      	mov	r7, r3
 8009bb4:	e762      	b.n	8009a7c <ai_platform_network_process+0x378>
 8009bb6:	9c01      	ldr	r4, [sp, #4]
 8009bb8:	2217      	movs	r2, #23
 8009bba:	f104 0010 	add.w	r0, r4, #16
 8009bbe:	2113      	movs	r1, #19
 8009bc0:	f000 f814 	bl	8009bec <core_set_error>
 8009bc4:	4653      	mov	r3, sl
 8009bc6:	e662      	b.n	800988e <ai_platform_network_process+0x18a>
 8009bc8:	f104 0010 	add.w	r0, r4, #16
 8009bcc:	2230      	movs	r2, #48	; 0x30
 8009bce:	2111      	movs	r1, #17
 8009bd0:	f000 f80c 	bl	8009bec <core_set_error>
 8009bd4:	4633      	mov	r3, r6
 8009bd6:	e65a      	b.n	800988e <ai_platform_network_process+0x18a>
 8009bd8:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8009bda:	e5d2      	b.n	8009782 <ai_platform_network_process+0x7e>

08009bdc <core_init>:
 8009bdc:	2001      	movs	r0, #1
 8009bde:	4770      	bx	lr

08009be0 <core_get_error>:
 8009be0:	4603      	mov	r3, r0
 8009be2:	2200      	movs	r2, #0
 8009be4:	6800      	ldr	r0, [r0, #0]
 8009be6:	601a      	str	r2, [r3, #0]
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop

08009bec <core_set_error>:
 8009bec:	7803      	ldrb	r3, [r0, #0]
 8009bee:	b933      	cbnz	r3, 8009bfe <core_set_error+0x12>
 8009bf0:	7001      	strb	r1, [r0, #0]
 8009bf2:	6803      	ldr	r3, [r0, #0]
 8009bf4:	f362 231f 	bfi	r3, r2, #8, #24
 8009bf8:	6003      	str	r3, [r0, #0]
 8009bfa:	2001      	movs	r0, #1
 8009bfc:	4770      	bx	lr
 8009bfe:	2000      	movs	r0, #0
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop

08009c04 <forward_dense>:
 8009c04:	6983      	ldr	r3, [r0, #24]
 8009c06:	881a      	ldrh	r2, [r3, #0]
 8009c08:	2a00      	cmp	r2, #0
 8009c0a:	f000 8193 	beq.w	8009f34 <forward_dense+0x330>
 8009c0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c12:	ed2d 8b10 	vpush	{d8-d15}
 8009c16:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8009c1a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009c1e:	b099      	sub	sp, #100	; 0x64
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 8194 	beq.w	8009f4e <forward_dense+0x34a>
 8009c26:	f8d3 8000 	ldr.w	r8, [r3]
 8009c2a:	2a01      	cmp	r2, #1
 8009c2c:	f240 817f 	bls.w	8009f2e <forward_dense+0x32a>
 8009c30:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8009c34:	b104      	cbz	r4, 8009c38 <forward_dense+0x34>
 8009c36:	6824      	ldr	r4, [r4, #0]
 8009c38:	2a02      	cmp	r2, #2
 8009c3a:	f000 817d 	beq.w	8009f38 <forward_dense+0x334>
 8009c3e:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f040 817b 	bne.w	8009f3e <forward_dense+0x33a>
 8009c48:	f11c 0118 	adds.w	r1, ip, #24
 8009c4c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c4e:	f000 817c 	beq.w	8009f4a <forward_dense+0x346>
 8009c52:	f8bc 1018 	ldrh.w	r1, [ip, #24]
 8009c56:	2901      	cmp	r1, #1
 8009c58:	f240 83ab 	bls.w	800a3b2 <forward_dense+0x7ae>
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 8178 	beq.w	8009f52 <forward_dense+0x34e>
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c68:	68e7      	ldr	r7, [r4, #12]
 8009c6a:	6998      	ldr	r0, [r3, #24]
 8009c6c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8009c70:	6803      	ldr	r3, [r0, #0]
 8009c72:	6849      	ldr	r1, [r1, #4]
 8009c74:	9115      	str	r1, [sp, #84]	; 0x54
 8009c76:	e9d7 6501 	ldrd	r6, r5, [r7, #4]
 8009c7a:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8009c7e:	f3c3 5141 	ubfx	r1, r3, #21, #2
 8009c82:	fa4e f101 	asr.w	r1, lr, r1
 8009c86:	2a03      	cmp	r2, #3
 8009c88:	68ff      	ldr	r7, [r7, #12]
 8009c8a:	9113      	str	r1, [sp, #76]	; 0x4c
 8009c8c:	fb05 f506 	mul.w	r5, r5, r6
 8009c90:	f000 8373 	beq.w	800a37a <forward_dense+0x776>
 8009c94:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8009c98:	2a00      	cmp	r2, #0
 8009c9a:	f000 8371 	beq.w	800a380 <forward_dense+0x77c>
 8009c9e:	6812      	ldr	r2, [r2, #0]
 8009ca0:	2a00      	cmp	r2, #0
 8009ca2:	f000 836d 	beq.w	800a380 <forward_dense+0x77c>
 8009ca6:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8009caa:	2b04      	cmp	r3, #4
 8009cac:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8009cb0:	f000 836c 	beq.w	800a38c <forward_dense+0x788>
 8009cb4:	2b08      	cmp	r3, #8
 8009cb6:	f000 8369 	beq.w	800a38c <forward_dense+0x788>
 8009cba:	f04f 0a00 	mov.w	sl, #0
 8009cbe:	69a3      	ldr	r3, [r4, #24]
 8009cc0:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8009cc4:	6899      	ldr	r1, [r3, #8]
 8009cc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cc8:	9102      	str	r1, [sp, #8]
 8009cca:	695b      	ldr	r3, [r3, #20]
 8009ccc:	6892      	ldr	r2, [r2, #8]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	9305      	str	r3, [sp, #20]
 8009cd2:	00ad      	lsls	r5, r5, #2
 8009cd4:	fb07 1005 	mla	r0, r7, r5, r1
 8009cd8:	00b4      	lsls	r4, r6, #2
 8009cda:	4281      	cmp	r1, r0
 8009cdc:	9011      	str	r0, [sp, #68]	; 0x44
 8009cde:	9410      	str	r4, [sp, #64]	; 0x40
 8009ce0:	eb01 0804 	add.w	r8, r1, r4
 8009ce4:	f080 811e 	bcs.w	8009f24 <forward_dense+0x320>
 8009ce8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009cea:	eddf faa0 	vldr	s31, [pc, #640]	; 8009f6c <forward_dense+0x368>
 8009cee:	08e8      	lsrs	r0, r5, #3
 8009cf0:	0141      	lsls	r1, r0, #5
 8009cf2:	f025 0301 	bic.w	r3, r5, #1
 8009cf6:	4606      	mov	r6, r0
 8009cf8:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
 8009cfc:	9001      	str	r0, [sp, #4]
 8009cfe:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 8009d02:	00f7      	lsls	r7, r6, #3
 8009d04:	9316      	str	r3, [sp, #88]	; 0x58
 8009d06:	0143      	lsls	r3, r0, #5
 8009d08:	00b6      	lsls	r6, r6, #2
 8009d0a:	f1a5 0410 	sub.w	r4, r5, #16
 8009d0e:	9307      	str	r3, [sp, #28]
 8009d10:	f107 0308 	add.w	r3, r7, #8
 8009d14:	0924      	lsrs	r4, r4, #4
 8009d16:	9304      	str	r3, [sp, #16]
 8009d18:	1d33      	adds	r3, r6, #4
 8009d1a:	3401      	adds	r4, #1
 8009d1c:	930d      	str	r3, [sp, #52]	; 0x34
 8009d1e:	f005 0301 	and.w	r3, r5, #1
 8009d22:	01a4      	lsls	r4, r4, #6
 8009d24:	f005 0907 	and.w	r9, r5, #7
 8009d28:	9309      	str	r3, [sp, #36]	; 0x24
 8009d2a:	00ab      	lsls	r3, r5, #2
 8009d2c:	9312      	str	r3, [sp, #72]	; 0x48
 8009d2e:	9703      	str	r7, [sp, #12]
 8009d30:	960c      	str	r6, [sp, #48]	; 0x30
 8009d32:	9417      	str	r4, [sp, #92]	; 0x5c
 8009d34:	eb02 0b01 	add.w	fp, r2, r1
 8009d38:	4653      	mov	r3, sl
 8009d3a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8009d3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d40:	9907      	ldr	r1, [sp, #28]
 8009d42:	6992      	ldr	r2, [r2, #24]
 8009d44:	6894      	ldr	r4, [r2, #8]
 8009d46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d48:	4459      	add	r1, fp
 8009d4a:	9106      	str	r1, [sp, #24]
 8009d4c:	2a00      	cmp	r2, #0
 8009d4e:	f000 810f 	beq.w	8009f70 <forward_dense+0x36c>
 8009d52:	6992      	ldr	r2, [r2, #24]
 8009d54:	6896      	ldr	r6, [r2, #8]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f000 810e 	beq.w	8009f78 <forward_dense+0x374>
 8009d5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d5e:	2a04      	cmp	r2, #4
 8009d60:	f000 821e 	beq.w	800a1a0 <forward_dense+0x59c>
 8009d64:	9a02      	ldr	r2, [sp, #8]
 8009d66:	4590      	cmp	r8, r2
 8009d68:	f240 80d3 	bls.w	8009f12 <forward_dense+0x30e>
 8009d6c:	4694      	mov	ip, r2
 8009d6e:	9a07      	ldr	r2, [sp, #28]
 8009d70:	f8dd a014 	ldr.w	sl, [sp, #20]
 8009d74:	f102 0e20 	add.w	lr, r2, #32
 8009d78:	46b1      	mov	r9, r6
 8009d7a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009d7c:	44de      	add	lr, fp
 8009d7e:	f1b9 0f00 	cmp.w	r9, #0
 8009d82:	f000 80e8 	beq.w	8009f56 <forward_dense+0x352>
 8009d86:	9a01      	ldr	r2, [sp, #4]
 8009d88:	edd9 2a00 	vldr	s5, [r9]
 8009d8c:	eddf 6a77 	vldr	s13, [pc, #476]	; 8009f6c <forward_dense+0x368>
 8009d90:	f109 0904 	add.w	r9, r9, #4
 8009d94:	2a00      	cmp	r2, #0
 8009d96:	f000 80e6 	beq.w	8009f66 <forward_dense+0x362>
 8009d9a:	9904      	ldr	r1, [sp, #16]
 8009d9c:	f104 0208 	add.w	r2, r4, #8
 8009da0:	190f      	adds	r7, r1, r4
 8009da2:	4671      	mov	r1, lr
 8009da4:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 8009da8:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 8009dac:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 8009db0:	ed11 3a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
 8009db4:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8009db8:	ed11 5a05 	vldr	s10, [r1, #-20]	; 0xffffffec
 8009dbc:	ed51 3a04 	vldr	s7, [r1, #-16]
 8009dc0:	ed51 4a03 	vldr	s9, [r1, #-12]
 8009dc4:	ed51 5a02 	vldr	s11, [r1, #-8]
 8009dc8:	ed11 6a01 	vldr	s12, [r1, #-4]
 8009dcc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009dd0:	ed95 7a00 	vldr	s14, [r5]
 8009dd4:	f812 5c06 	ldrb.w	r5, [r2, #-6]
 8009dd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de0:	ed90 7a00 	vldr	s14, [r0]
 8009de4:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 8009de8:	eee7 7a03 	vfma.f32	s15, s14, s6
 8009dec:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009df0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009df4:	ed95 3a00 	vldr	s6, [r5]
 8009df8:	ed90 7a00 	vldr	s14, [r0]
 8009dfc:	f812 5c04 	ldrb.w	r5, [r2, #-4]
 8009e00:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 8009e04:	eee3 7a04 	vfma.f32	s15, s6, s8
 8009e08:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009e0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e10:	ed95 3a00 	vldr	s6, [r5]
 8009e14:	ed90 4a00 	vldr	s8, [r0]
 8009e18:	f812 5c02 	ldrb.w	r5, [r2, #-2]
 8009e1c:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8009e20:	eee7 7a05 	vfma.f32	s15, s14, s10
 8009e24:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009e28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e2c:	ed95 5a00 	vldr	s10, [r5]
 8009e30:	ed90 7a00 	vldr	s14, [r0]
 8009e34:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009e38:	3208      	adds	r2, #8
 8009e3a:	4297      	cmp	r7, r2
 8009e3c:	f101 0120 	add.w	r1, r1, #32
 8009e40:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009e44:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009e48:	eee7 7a06 	vfma.f32	s15, s14, s12
 8009e4c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009e50:	d1a8      	bne.n	8009da4 <forward_dense+0x1a0>
 8009e52:	9a03      	ldr	r2, [sp, #12]
 8009e54:	18a1      	adds	r1, r4, r2
 8009e56:	465a      	mov	r2, fp
 8009e58:	2e00      	cmp	r6, #0
 8009e5a:	d04a      	beq.n	8009ef2 <forward_dense+0x2ee>
 8009e5c:	7808      	ldrb	r0, [r1, #0]
 8009e5e:	ed92 7a00 	vldr	s14, [r2]
 8009e62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e66:	edd0 7a00 	vldr	s15, [r0]
 8009e6a:	2e01      	cmp	r6, #1
 8009e6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009e70:	d03f      	beq.n	8009ef2 <forward_dense+0x2ee>
 8009e72:	7848      	ldrb	r0, [r1, #1]
 8009e74:	edd2 7a01 	vldr	s15, [r2, #4]
 8009e78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e7c:	ed90 7a00 	vldr	s14, [r0]
 8009e80:	2e02      	cmp	r6, #2
 8009e82:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009e86:	d034      	beq.n	8009ef2 <forward_dense+0x2ee>
 8009e88:	7888      	ldrb	r0, [r1, #2]
 8009e8a:	edd2 7a02 	vldr	s15, [r2, #8]
 8009e8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e92:	ed90 7a00 	vldr	s14, [r0]
 8009e96:	2e03      	cmp	r6, #3
 8009e98:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009e9c:	d029      	beq.n	8009ef2 <forward_dense+0x2ee>
 8009e9e:	78c8      	ldrb	r0, [r1, #3]
 8009ea0:	edd2 7a03 	vldr	s15, [r2, #12]
 8009ea4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ea8:	ed90 7a00 	vldr	s14, [r0]
 8009eac:	2e04      	cmp	r6, #4
 8009eae:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009eb2:	d01e      	beq.n	8009ef2 <forward_dense+0x2ee>
 8009eb4:	7908      	ldrb	r0, [r1, #4]
 8009eb6:	edd2 7a04 	vldr	s15, [r2, #16]
 8009eba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ebe:	ed90 7a00 	vldr	s14, [r0]
 8009ec2:	2e05      	cmp	r6, #5
 8009ec4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009ec8:	d013      	beq.n	8009ef2 <forward_dense+0x2ee>
 8009eca:	7948      	ldrb	r0, [r1, #5]
 8009ecc:	edd2 7a05 	vldr	s15, [r2, #20]
 8009ed0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ed4:	ed90 7a00 	vldr	s14, [r0]
 8009ed8:	2e06      	cmp	r6, #6
 8009eda:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009ede:	d008      	beq.n	8009ef2 <forward_dense+0x2ee>
 8009ee0:	7989      	ldrb	r1, [r1, #6]
 8009ee2:	edd2 7a06 	vldr	s15, [r2, #24]
 8009ee6:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 8009eea:	ed92 7a00 	vldr	s14, [r2]
 8009eee:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009ef2:	4454      	add	r4, sl
 8009ef4:	ee72 6aa6 	vadd.f32	s13, s5, s13
 8009ef8:	ecec 6a01 	vstmia	ip!, {s13}
 8009efc:	45c4      	cmp	ip, r8
 8009efe:	f4ff af3e 	bcc.w	8009d7e <forward_dense+0x17a>
 8009f02:	9902      	ldr	r1, [sp, #8]
 8009f04:	43ca      	mvns	r2, r1
 8009f06:	4442      	add	r2, r8
 8009f08:	f022 0203 	bic.w	r2, r2, #3
 8009f0c:	3204      	adds	r2, #4
 8009f0e:	188a      	adds	r2, r1, r2
 8009f10:	9202      	str	r2, [sp, #8]
 8009f12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f14:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009f16:	4490      	add	r8, r2
 8009f18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f1a:	4493      	add	fp, r2
 8009f1c:	9a02      	ldr	r2, [sp, #8]
 8009f1e:	428a      	cmp	r2, r1
 8009f20:	f4ff af0d 	bcc.w	8009d3e <forward_dense+0x13a>
 8009f24:	b019      	add	sp, #100	; 0x64
 8009f26:	ecbd 8b10 	vpop	{d8-d15}
 8009f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2e:	2300      	movs	r3, #0
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	deff      	udf	#255	; 0xff
 8009f34:	6853      	ldr	r3, [r2, #4]
 8009f36:	deff      	udf	#255	; 0xff
 8009f38:	2300      	movs	r3, #0
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	deff      	udf	#255	; 0xff
 8009f3e:	6819      	ldr	r1, [r3, #0]
 8009f40:	910e      	str	r1, [sp, #56]	; 0x38
 8009f42:	f11c 0118 	adds.w	r1, ip, #24
 8009f46:	f47f ae84 	bne.w	8009c52 <forward_dense+0x4e>
 8009f4a:	910f      	str	r1, [sp, #60]	; 0x3c
 8009f4c:	e68b      	b.n	8009c66 <forward_dense+0x62>
 8009f4e:	4698      	mov	r8, r3
 8009f50:	e66b      	b.n	8009c2a <forward_dense+0x26>
 8009f52:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f54:	e687      	b.n	8009c66 <forward_dense+0x62>
 8009f56:	9a01      	ldr	r2, [sp, #4]
 8009f58:	eddf 6a04 	vldr	s13, [pc, #16]	; 8009f6c <forward_dense+0x368>
 8009f5c:	eef0 2a6f 	vmov.f32	s5, s31
 8009f60:	2a00      	cmp	r2, #0
 8009f62:	f47f af1a 	bne.w	8009d9a <forward_dense+0x196>
 8009f66:	9a06      	ldr	r2, [sp, #24]
 8009f68:	4621      	mov	r1, r4
 8009f6a:	e775      	b.n	8009e58 <forward_dense+0x254>
 8009f6c:	00000000 	.word	0x00000000
 8009f70:	4616      	mov	r6, r2
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f47f aef2 	bne.w	8009d5c <forward_dense+0x158>
 8009f78:	9a02      	ldr	r2, [sp, #8]
 8009f7a:	4590      	cmp	r8, r2
 8009f7c:	d9c9      	bls.n	8009f12 <forward_dense+0x30e>
 8009f7e:	4615      	mov	r5, r2
 8009f80:	9a07      	ldr	r2, [sp, #28]
 8009f82:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009f84:	9308      	str	r3, [sp, #32]
 8009f86:	f102 0740 	add.w	r7, r2, #64	; 0x40
 8009f8a:	9a06      	ldr	r2, [sp, #24]
 8009f8c:	9b05      	ldr	r3, [sp, #20]
 8009f8e:	4610      	mov	r0, r2
 8009f90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f92:	445f      	add	r7, fp
 8009f94:	eb00 0c02 	add.w	ip, r0, r2
 8009f98:	f001 0e0f 	and.w	lr, r1, #15
 8009f9c:	468a      	mov	sl, r1
 8009f9e:	4691      	mov	r9, r2
 8009fa0:	2e00      	cmp	r6, #0
 8009fa2:	f000 81de 	beq.w	800a362 <forward_dense+0x75e>
 8009fa6:	f1ba 0f0f 	cmp.w	sl, #15
 8009faa:	ed96 fa00 	vldr	s30, [r6]
 8009fae:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 8009f6c <forward_dense+0x368>
 8009fb2:	f106 0604 	add.w	r6, r6, #4
 8009fb6:	f240 81dc 	bls.w	800a372 <forward_dense+0x76e>
 8009fba:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8009fbe:	463a      	mov	r2, r7
 8009fc0:	4650      	mov	r0, sl
 8009fc2:	ed52 ea0f 	vldr	s29, [r2, #-60]	; 0xffffffc4
 8009fc6:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 8009fca:	ed11 ea10 	vldr	s28, [r1, #-64]	; 0xffffffc0
 8009fce:	ed52 da10 	vldr	s27, [r2, #-64]	; 0xffffffc0
 8009fd2:	ed11 da0e 	vldr	s26, [r1, #-56]	; 0xffffffc8
 8009fd6:	ed51 ca0d 	vldr	s25, [r1, #-52]	; 0xffffffcc
 8009fda:	ed12 ca0d 	vldr	s24, [r2, #-52]	; 0xffffffcc
 8009fde:	ed52 ba0c 	vldr	s23, [r2, #-48]	; 0xffffffd0
 8009fe2:	ed11 ba0c 	vldr	s22, [r1, #-48]	; 0xffffffd0
 8009fe6:	ed52 aa0b 	vldr	s21, [r2, #-44]	; 0xffffffd4
 8009fea:	ed11 aa0b 	vldr	s20, [r1, #-44]	; 0xffffffd4
 8009fee:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8009ff2:	ed11 9a0a 	vldr	s18, [r1, #-40]	; 0xffffffd8
 8009ff6:	ed51 8a09 	vldr	s17, [r1, #-36]	; 0xffffffdc
 8009ffa:	ed12 8a09 	vldr	s16, [r2, #-36]	; 0xffffffdc
 8009ffe:	ed11 0a08 	vldr	s0, [r1, #-32]	; 0xffffffe0
 800a002:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800a006:	ed11 1a07 	vldr	s2, [r1, #-28]	; 0xffffffe4
 800a00a:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800a00e:	ed11 2a06 	vldr	s4, [r1, #-24]	; 0xffffffe8
 800a012:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800a016:	ed11 3a05 	vldr	s6, [r1, #-20]	; 0xffffffec
 800a01a:	ed52 3a05 	vldr	s7, [r2, #-20]	; 0xffffffec
 800a01e:	ed12 4a04 	vldr	s8, [r2, #-16]
 800a022:	ed51 4a04 	vldr	s9, [r1, #-16]
 800a026:	ed12 5a03 	vldr	s10, [r2, #-12]
 800a02a:	ed51 5a03 	vldr	s11, [r1, #-12]
 800a02e:	ed12 6a02 	vldr	s12, [r2, #-8]
 800a032:	ed11 7a02 	vldr	s14, [r1, #-8]
 800a036:	ee67 7aae 	vmul.f32	s15, s15, s29
 800a03a:	ed52 ea0e 	vldr	s29, [r2, #-56]	; 0xffffffc8
 800a03e:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800a042:	3810      	subs	r0, #16
 800a044:	280f      	cmp	r0, #15
 800a046:	ed11 ea01 	vldr	s28, [r1, #-4]
 800a04a:	ed52 da01 	vldr	s27, [r2, #-4]
 800a04e:	eeed 7a2e 	vfma.f32	s15, s26, s29
 800a052:	f101 0140 	add.w	r1, r1, #64	; 0x40
 800a056:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800a05a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800a05e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a062:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a066:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a06a:	eee8 7a88 	vfma.f32	s15, s17, s16
 800a06e:	eee0 7a20 	vfma.f32	s15, s0, s1
 800a072:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a076:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a07a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a07e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a082:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a086:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a08a:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800a08e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a092:	d896      	bhi.n	8009fc2 <forward_dense+0x3be>
 800a094:	eb04 0009 	add.w	r0, r4, r9
 800a098:	4672      	mov	r2, lr
 800a09a:	4661      	mov	r1, ip
 800a09c:	2a00      	cmp	r2, #0
 800a09e:	d075      	beq.n	800a18c <forward_dense+0x588>
 800a0a0:	ed90 7a00 	vldr	s14, [r0]
 800a0a4:	edd1 7a00 	vldr	s15, [r1]
 800a0a8:	2a01      	cmp	r2, #1
 800a0aa:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0ae:	d06d      	beq.n	800a18c <forward_dense+0x588>
 800a0b0:	ed90 7a01 	vldr	s14, [r0, #4]
 800a0b4:	edd1 7a01 	vldr	s15, [r1, #4]
 800a0b8:	2a02      	cmp	r2, #2
 800a0ba:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0be:	d065      	beq.n	800a18c <forward_dense+0x588>
 800a0c0:	ed90 7a02 	vldr	s14, [r0, #8]
 800a0c4:	edd1 7a02 	vldr	s15, [r1, #8]
 800a0c8:	2a03      	cmp	r2, #3
 800a0ca:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0ce:	d05d      	beq.n	800a18c <forward_dense+0x588>
 800a0d0:	ed90 7a03 	vldr	s14, [r0, #12]
 800a0d4:	edd1 7a03 	vldr	s15, [r1, #12]
 800a0d8:	2a04      	cmp	r2, #4
 800a0da:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0de:	d055      	beq.n	800a18c <forward_dense+0x588>
 800a0e0:	ed90 7a04 	vldr	s14, [r0, #16]
 800a0e4:	edd1 7a04 	vldr	s15, [r1, #16]
 800a0e8:	2a05      	cmp	r2, #5
 800a0ea:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0ee:	d04d      	beq.n	800a18c <forward_dense+0x588>
 800a0f0:	ed90 7a05 	vldr	s14, [r0, #20]
 800a0f4:	edd1 7a05 	vldr	s15, [r1, #20]
 800a0f8:	2a06      	cmp	r2, #6
 800a0fa:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0fe:	d045      	beq.n	800a18c <forward_dense+0x588>
 800a100:	ed90 7a06 	vldr	s14, [r0, #24]
 800a104:	edd1 7a06 	vldr	s15, [r1, #24]
 800a108:	2a07      	cmp	r2, #7
 800a10a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a10e:	d03d      	beq.n	800a18c <forward_dense+0x588>
 800a110:	ed90 7a07 	vldr	s14, [r0, #28]
 800a114:	edd1 7a07 	vldr	s15, [r1, #28]
 800a118:	2a08      	cmp	r2, #8
 800a11a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a11e:	d035      	beq.n	800a18c <forward_dense+0x588>
 800a120:	ed90 7a08 	vldr	s14, [r0, #32]
 800a124:	edd1 7a08 	vldr	s15, [r1, #32]
 800a128:	2a09      	cmp	r2, #9
 800a12a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a12e:	d02d      	beq.n	800a18c <forward_dense+0x588>
 800a130:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 800a134:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 800a138:	2a0a      	cmp	r2, #10
 800a13a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a13e:	d025      	beq.n	800a18c <forward_dense+0x588>
 800a140:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 800a144:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 800a148:	2a0b      	cmp	r2, #11
 800a14a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a14e:	d01d      	beq.n	800a18c <forward_dense+0x588>
 800a150:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 800a154:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 800a158:	2a0c      	cmp	r2, #12
 800a15a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a15e:	d015      	beq.n	800a18c <forward_dense+0x588>
 800a160:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 800a164:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 800a168:	2a0d      	cmp	r2, #13
 800a16a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a16e:	d00d      	beq.n	800a18c <forward_dense+0x588>
 800a170:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800a174:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 800a178:	2a0e      	cmp	r2, #14
 800a17a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a17e:	d005      	beq.n	800a18c <forward_dense+0x588>
 800a180:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 800a184:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 800a188:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a18c:	441c      	add	r4, r3
 800a18e:	ee7f 6a26 	vadd.f32	s13, s30, s13
 800a192:	ece5 6a01 	vstmia	r5!, {s13}
 800a196:	4545      	cmp	r5, r8
 800a198:	f4ff af02 	bcc.w	8009fa0 <forward_dense+0x39c>
 800a19c:	9b08      	ldr	r3, [sp, #32]
 800a19e:	e6b0      	b.n	8009f02 <forward_dense+0x2fe>
 800a1a0:	9902      	ldr	r1, [sp, #8]
 800a1a2:	4588      	cmp	r8, r1
 800a1a4:	f67f aeb5 	bls.w	8009f12 <forward_dense+0x30e>
 800a1a8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a1aa:	eb02 000b 	add.w	r0, r2, fp
 800a1ae:	9a07      	ldr	r2, [sp, #28]
 800a1b0:	9008      	str	r0, [sp, #32]
 800a1b2:	3220      	adds	r2, #32
 800a1b4:	3007      	adds	r0, #7
 800a1b6:	445a      	add	r2, fp
 800a1b8:	900b      	str	r0, [sp, #44]	; 0x2c
 800a1ba:	920a      	str	r2, [sp, #40]	; 0x28
 800a1bc:	4689      	mov	r9, r1
 800a1be:	2e00      	cmp	r6, #0
 800a1c0:	f000 80b9 	beq.w	800a336 <forward_dense+0x732>
 800a1c4:	9a01      	ldr	r2, [sp, #4]
 800a1c6:	edd6 2a00 	vldr	s5, [r6]
 800a1ca:	ed5f 6a98 	vldr	s13, [pc, #-608]	; 8009f6c <forward_dense+0x368>
 800a1ce:	3604      	adds	r6, #4
 800a1d0:	2a00      	cmp	r2, #0
 800a1d2:	f000 80b8 	beq.w	800a346 <forward_dense+0x742>
 800a1d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1d8:	1917      	adds	r7, r2, r4
 800a1da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1dc:	1d21      	adds	r1, r4, #4
 800a1de:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 800a1e2:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 800a1e6:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800a1ea:	ed12 3a08 	vldr	s6, [r2, #-32]	; 0xffffffe0
 800a1ee:	ed52 3a06 	vldr	s7, [r2, #-24]	; 0xffffffe8
 800a1f2:	ed12 4a05 	vldr	s8, [r2, #-20]	; 0xffffffec
 800a1f6:	ed52 4a04 	vldr	s9, [r2, #-16]
 800a1fa:	ed12 5a03 	vldr	s10, [r2, #-12]
 800a1fe:	ed52 5a02 	vldr	s11, [r2, #-8]
 800a202:	ed12 6a01 	vldr	s12, [r2, #-4]
 800a206:	f005 0e0f 	and.w	lr, r5, #15
 800a20a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800a20e:	ed9e 7a00 	vldr	s14, [lr]
 800a212:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 800a216:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a21a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a21e:	ed9c 7a00 	vldr	s14, [ip]
 800a222:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 800a226:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 800a22a:	eee7 7a03 	vfma.f32	s15, s14, s6
 800a22e:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800a232:	f000 0c0f 	and.w	ip, r0, #15
 800a236:	ed9e 7a00 	vldr	s14, [lr]
 800a23a:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800a23e:	eee7 7a23 	vfma.f32	s15, s14, s7
 800a242:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a246:	3104      	adds	r1, #4
 800a248:	ed9c 7a00 	vldr	s14, [ip]
 800a24c:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 800a250:	eee7 7a04 	vfma.f32	s15, s14, s8
 800a254:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a258:	f005 050f 	and.w	r5, r5, #15
 800a25c:	ed9c 7a00 	vldr	s14, [ip]
 800a260:	eee7 7a24 	vfma.f32	s15, s14, s9
 800a264:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a268:	428f      	cmp	r7, r1
 800a26a:	ed95 7a00 	vldr	s14, [r5]
 800a26e:	ea4f 1510 	mov.w	r5, r0, lsr #4
 800a272:	eee7 7a05 	vfma.f32	s15, s14, s10
 800a276:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a27a:	f000 000f 	and.w	r0, r0, #15
 800a27e:	ed95 7a00 	vldr	s14, [r5]
 800a282:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a286:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a28a:	f102 0220 	add.w	r2, r2, #32
 800a28e:	ed90 7a00 	vldr	s14, [r0]
 800a292:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a296:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a29a:	d1a0      	bne.n	800a1de <forward_dense+0x5da>
 800a29c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a29e:	46de      	mov	lr, fp
 800a2a0:	eb04 0a02 	add.w	sl, r4, r2
 800a2a4:	9a08      	ldr	r2, [sp, #32]
 800a2a6:	4596      	cmp	lr, r2
 800a2a8:	d22c      	bcs.n	800a304 <forward_dense+0x700>
 800a2aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2ac:	f10e 0108 	add.w	r1, lr, #8
 800a2b0:	eba2 0c01 	sub.w	ip, r2, r1
 800a2b4:	f02c 0207 	bic.w	r2, ip, #7
 800a2b8:	f10e 0710 	add.w	r7, lr, #16
 800a2bc:	4417      	add	r7, r2
 800a2be:	f10a 35ff 	add.w	r5, sl, #4294967295
 800a2c2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a2c6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a2ca:	ed11 6a02 	vldr	s12, [r1, #-8]
 800a2ce:	f002 000f 	and.w	r0, r2, #15
 800a2d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a2d6:	ed90 7a00 	vldr	s14, [r0]
 800a2da:	0912      	lsrs	r2, r2, #4
 800a2dc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a2e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2e4:	ed92 7a00 	vldr	s14, [r2]
 800a2e8:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a2ec:	3108      	adds	r1, #8
 800a2ee:	428f      	cmp	r7, r1
 800a2f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a2f4:	d1e5      	bne.n	800a2c2 <forward_dense+0x6be>
 800a2f6:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800a2fa:	f10c 0c01 	add.w	ip, ip, #1
 800a2fe:	44e2      	add	sl, ip
 800a300:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 800a304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a306:	b312      	cbz	r2, 800a34e <forward_dense+0x74a>
 800a308:	f89a 2000 	ldrb.w	r2, [sl]
 800a30c:	edde 7a00 	vldr	s15, [lr]
 800a310:	0912      	lsrs	r2, r2, #4
 800a312:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a316:	ed92 7a00 	vldr	s14, [r2]
 800a31a:	9a05      	ldr	r2, [sp, #20]
 800a31c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a320:	4414      	add	r4, r2
 800a322:	ee76 2aa2 	vadd.f32	s5, s13, s5
 800a326:	ece9 2a01 	vstmia	r9!, {s5}
 800a32a:	45c8      	cmp	r8, r9
 800a32c:	f67f ade9 	bls.w	8009f02 <forward_dense+0x2fe>
 800a330:	2e00      	cmp	r6, #0
 800a332:	f47f af47 	bne.w	800a1c4 <forward_dense+0x5c0>
 800a336:	9a01      	ldr	r2, [sp, #4]
 800a338:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a3b8 <forward_dense+0x7b4>
 800a33c:	eef0 2a6f 	vmov.f32	s5, s31
 800a340:	2a00      	cmp	r2, #0
 800a342:	f47f af48 	bne.w	800a1d6 <forward_dense+0x5d2>
 800a346:	f8dd e018 	ldr.w	lr, [sp, #24]
 800a34a:	46a2      	mov	sl, r4
 800a34c:	e7aa      	b.n	800a2a4 <forward_dense+0x6a0>
 800a34e:	ee72 6aa6 	vadd.f32	s13, s5, s13
 800a352:	9a05      	ldr	r2, [sp, #20]
 800a354:	ece9 6a01 	vstmia	r9!, {s13}
 800a358:	45c1      	cmp	r9, r8
 800a35a:	4414      	add	r4, r2
 800a35c:	f4ff af2f 	bcc.w	800a1be <forward_dense+0x5ba>
 800a360:	e5cf      	b.n	8009f02 <forward_dense+0x2fe>
 800a362:	f1ba 0f0f 	cmp.w	sl, #15
 800a366:	eeb0 fa6f 	vmov.f32	s30, s31
 800a36a:	eddf 6a13 	vldr	s13, [pc, #76]	; 800a3b8 <forward_dense+0x7b4>
 800a36e:	f63f ae24 	bhi.w	8009fba <forward_dense+0x3b6>
 800a372:	4652      	mov	r2, sl
 800a374:	4620      	mov	r0, r4
 800a376:	9906      	ldr	r1, [sp, #24]
 800a378:	e690      	b.n	800a09c <forward_dense+0x498>
 800a37a:	2300      	movs	r3, #0
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	deff      	udf	#255	; 0xff
 800a380:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800a384:	2b04      	cmp	r3, #4
 800a386:	4691      	mov	r9, r2
 800a388:	f47f ac94 	bne.w	8009cb4 <forward_dense+0xb0>
 800a38c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800a390:	f1b9 0f00 	cmp.w	r9, #0
 800a394:	f43f ac93 	beq.w	8009cbe <forward_dense+0xba>
 800a398:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a39c:	f000 f9d4 	bl	800a748 <ai_array_get_byte_size>
 800a3a0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	4651      	mov	r1, sl
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 fa2b 	bl	800a804 <memcpy>
 800a3ae:	4682      	mov	sl, r0
 800a3b0:	e485      	b.n	8009cbe <forward_dense+0xba>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3b6:	e456      	b.n	8009c66 <forward_dense+0x62>
 800a3b8:	00000000 	.word	0x00000000

0800a3bc <nl_func_sm_array_f32>:
 800a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c0:	ed2d 8b04 	vpush	{d8-d9}
 800a3c4:	b089      	sub	sp, #36	; 0x24
 800a3c6:	698f      	ldr	r7, [r1, #24]
 800a3c8:	6984      	ldr	r4, [r0, #24]
 800a3ca:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800a3ce:	68bd      	ldr	r5, [r7, #8]
 800a3d0:	9402      	str	r4, [sp, #8]
 800a3d2:	4626      	mov	r6, r4
 800a3d4:	4696      	mov	lr, r2
 800a3d6:	eba2 020c 	sub.w	r2, r2, ip
 800a3da:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800a3de:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	68b6      	ldr	r6, [r6, #8]
 800a3e4:	ebae 0e04 	sub.w	lr, lr, r4
 800a3e8:	4295      	cmp	r5, r2
 800a3ea:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800a3ee:	d354      	bcc.n	800a49a <nl_func_sm_array_f32+0xde>
 800a3f0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800a3f4:	f1cc 0200 	rsb	r2, ip, #0
 800a3f8:	00a4      	lsls	r4, r4, #2
 800a3fa:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800a3fe:	9303      	str	r3, [sp, #12]
 800a400:	9204      	str	r2, [sp, #16]
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4262      	negs	r2, r4
 800a406:	9205      	str	r2, [sp, #20]
 800a408:	9301      	str	r3, [sp, #4]
 800a40a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800a40e:	9b02      	ldr	r3, [sp, #8]
 800a410:	9a07      	ldr	r2, [sp, #28]
 800a412:	60bd      	str	r5, [r7, #8]
 800a414:	609e      	str	r6, [r3, #8]
 800a416:	9b06      	ldr	r3, [sp, #24]
 800a418:	6992      	ldr	r2, [r2, #24]
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	6894      	ldr	r4, [r2, #8]
 800a41e:	9a03      	ldr	r2, [sp, #12]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	2a01      	cmp	r2, #1
 800a424:	ed93 8a00 	vldr	s16, [r3]
 800a428:	d940      	bls.n	800a4ac <nl_func_sm_array_f32+0xf0>
 800a42a:	9901      	ldr	r1, [sp, #4]
 800a42c:	1d1a      	adds	r2, r3, #4
 800a42e:	eb03 0b01 	add.w	fp, r3, r1
 800a432:	ecf2 7a01 	vldmia	r2!, {s15}
 800a436:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a43e:	bfb8      	it	lt
 800a440:	eeb0 8a67 	vmovlt.f32	s16, s15
 800a444:	4593      	cmp	fp, r2
 800a446:	d1f4      	bne.n	800a432 <nl_func_sm_array_f32+0x76>
 800a448:	eddf 8a1b 	vldr	s17, [pc, #108]	; 800a4b8 <nl_func_sm_array_f32+0xfc>
 800a44c:	469a      	mov	sl, r3
 800a44e:	46a1      	mov	r9, r4
 800a450:	46a0      	mov	r8, r4
 800a452:	ecba 0a01 	vldmia	sl!, {s0}
 800a456:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a45a:	f001 f9ed 	bl	800b838 <expf>
 800a45e:	45d3      	cmp	fp, sl
 800a460:	eca8 0a01 	vstmia	r8!, {s0}
 800a464:	ee78 8a80 	vadd.f32	s17, s17, s0
 800a468:	d1f3      	bne.n	800a452 <nl_func_sm_array_f32+0x96>
 800a46a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a472:	d00b      	beq.n	800a48c <nl_func_sm_array_f32+0xd0>
 800a474:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800a478:	9b01      	ldr	r3, [sp, #4]
 800a47a:	441c      	add	r4, r3
 800a47c:	edd9 7a00 	vldr	s15, [r9]
 800a480:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a484:	ece9 7a01 	vstmia	r9!, {s15}
 800a488:	454c      	cmp	r4, r9
 800a48a:	d1f7      	bne.n	800a47c <nl_func_sm_array_f32+0xc0>
 800a48c:	9b04      	ldr	r3, [sp, #16]
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	441d      	add	r5, r3
 800a492:	9b05      	ldr	r3, [sp, #20]
 800a494:	42aa      	cmp	r2, r5
 800a496:	441e      	add	r6, r3
 800a498:	d9b9      	bls.n	800a40e <nl_func_sm_array_f32+0x52>
 800a49a:	60ba      	str	r2, [r7, #8]
 800a49c:	9a02      	ldr	r2, [sp, #8]
 800a49e:	68d3      	ldr	r3, [r2, #12]
 800a4a0:	6093      	str	r3, [r2, #8]
 800a4a2:	b009      	add	sp, #36	; 0x24
 800a4a4:	ecbd 8b04 	vpop	{d8-d9}
 800a4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ac:	2a00      	cmp	r2, #0
 800a4ae:	d0ed      	beq.n	800a48c <nl_func_sm_array_f32+0xd0>
 800a4b0:	9a01      	ldr	r2, [sp, #4]
 800a4b2:	eb03 0b02 	add.w	fp, r3, r2
 800a4b6:	e7c7      	b.n	800a448 <nl_func_sm_array_f32+0x8c>
 800a4b8:	00000000 	.word	0x00000000

0800a4bc <forward_sm>:
 800a4bc:	6982      	ldr	r2, [r0, #24]
 800a4be:	8813      	ldrh	r3, [r2, #0]
 800a4c0:	b32b      	cbz	r3, 800a50e <forward_sm+0x52>
 800a4c2:	6852      	ldr	r2, [r2, #4]
 800a4c4:	6851      	ldr	r1, [r2, #4]
 800a4c6:	b101      	cbz	r1, 800a4ca <forward_sm+0xe>
 800a4c8:	6809      	ldr	r1, [r1, #0]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d91c      	bls.n	800a508 <forward_sm+0x4c>
 800a4ce:	6913      	ldr	r3, [r2, #16]
 800a4d0:	b1c3      	cbz	r3, 800a504 <forward_sm+0x48>
 800a4d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4d4:	6818      	ldr	r0, [r3, #0]
 800a4d6:	688c      	ldr	r4, [r1, #8]
 800a4d8:	68c3      	ldr	r3, [r0, #12]
 800a4da:	68ce      	ldr	r6, [r1, #12]
 800a4dc:	685f      	ldr	r7, [r3, #4]
 800a4de:	6873      	ldr	r3, [r6, #4]
 800a4e0:	0a24      	lsrs	r4, r4, #8
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	d015      	beq.n	800a512 <forward_sm+0x56>
 800a4e6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a4f0:	42a6      	cmp	r6, r4
 800a4f2:	fb05 f202 	mul.w	r2, r5, r2
 800a4f6:	d1f9      	bne.n	800a4ec <forward_sm+0x30>
 800a4f8:	e9cd 3700 	strd	r3, r7, [sp]
 800a4fc:	f7ff ff5e 	bl	800a3bc <nl_func_sm_array_f32>
 800a500:	b003      	add	sp, #12
 800a502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	deff      	udf	#255	; 0xff
 800a508:	2300      	movs	r3, #0
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	deff      	udf	#255	; 0xff
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	deff      	udf	#255	; 0xff
 800a512:	2201      	movs	r2, #1
 800a514:	e9cd 3700 	strd	r3, r7, [sp]
 800a518:	f7ff ff50 	bl	800a3bc <nl_func_sm_array_f32>
 800a51c:	b003      	add	sp, #12
 800a51e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a520 <ai_check_custom_types>:
 800a520:	4b13      	ldr	r3, [pc, #76]	; (800a570 <ai_check_custom_types+0x50>)
 800a522:	b082      	sub	sp, #8
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	9301      	str	r3, [sp, #4]
 800a528:	b118      	cbz	r0, 800a532 <ai_check_custom_types+0x12>
 800a52a:	7803      	ldrb	r3, [r0, #0]
 800a52c:	2b03      	cmp	r3, #3
 800a52e:	d002      	beq.n	800a536 <ai_check_custom_types+0x16>
 800a530:	2000      	movs	r0, #0
 800a532:	b002      	add	sp, #8
 800a534:	4770      	bx	lr
 800a536:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d004      	beq.n	800a548 <ai_check_custom_types+0x28>
 800a53e:	2001      	movs	r0, #1
 800a540:	f080 0001 	eor.w	r0, r0, #1
 800a544:	b002      	add	sp, #8
 800a546:	4770      	bx	lr
 800a548:	7842      	ldrb	r2, [r0, #1]
 800a54a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a54e:	429a      	cmp	r2, r3
 800a550:	f100 0001 	add.w	r0, r0, #1
 800a554:	d1f3      	bne.n	800a53e <ai_check_custom_types+0x1e>
 800a556:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800a55a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d1ed      	bne.n	800a53e <ai_check_custom_types+0x1e>
 800a562:	7842      	ldrb	r2, [r0, #1]
 800a564:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d1e8      	bne.n	800a53e <ai_check_custom_types+0x1e>
 800a56c:	2000      	movs	r0, #0
 800a56e:	e7e7      	b.n	800a540 <ai_check_custom_types+0x20>
 800a570:	0800bc64 	.word	0x0800bc64

0800a574 <ai_layers_init_all>:
 800a574:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a576:	b17a      	cbz	r2, 800a598 <ai_layers_init_all+0x24>
 800a578:	6913      	ldr	r3, [r2, #16]
 800a57a:	60d0      	str	r0, [r2, #12]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	f04f 0201 	mov.w	r2, #1
 800a582:	d009      	beq.n	800a598 <ai_layers_init_all+0x24>
 800a584:	b143      	cbz	r3, 800a598 <ai_layers_init_all+0x24>
 800a586:	6919      	ldr	r1, [r3, #16]
 800a588:	60d8      	str	r0, [r3, #12]
 800a58a:	4299      	cmp	r1, r3
 800a58c:	f102 0201 	add.w	r2, r2, #1
 800a590:	d002      	beq.n	800a598 <ai_layers_init_all+0x24>
 800a592:	460b      	mov	r3, r1
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1f6      	bne.n	800a586 <ai_layers_init_all+0x12>
 800a598:	4610      	mov	r0, r2
 800a59a:	4770      	bx	lr

0800a59c <ai_layers_post_init_all>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a5a0:	b18c      	cbz	r4, 800a5c6 <ai_layers_post_init_all+0x2a>
 800a5a2:	2500      	movs	r5, #0
 800a5a4:	6863      	ldr	r3, [r4, #4]
 800a5a6:	f013 0f01 	tst.w	r3, #1
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	d003      	beq.n	800a5b6 <ai_layers_post_init_all+0x1a>
 800a5ae:	6a23      	ldr	r3, [r4, #32]
 800a5b0:	b10b      	cbz	r3, 800a5b6 <ai_layers_post_init_all+0x1a>
 800a5b2:	4798      	blx	r3
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	6923      	ldr	r3, [r4, #16]
 800a5b8:	42a3      	cmp	r3, r4
 800a5ba:	d002      	beq.n	800a5c2 <ai_layers_post_init_all+0x26>
 800a5bc:	461c      	mov	r4, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1f0      	bne.n	800a5a4 <ai_layers_post_init_all+0x8>
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	bd38      	pop	{r3, r4, r5, pc}
 800a5c6:	4625      	mov	r5, r4
 800a5c8:	e7fb      	b.n	800a5c2 <ai_layers_post_init_all+0x26>
 800a5ca:	bf00      	nop

0800a5cc <ai_layers_forward_all>:
 800a5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d0:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800a5d2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	2f00      	cmp	r7, #0
 800a5d8:	d02c      	beq.n	800a634 <ai_layers_forward_all+0x68>
 800a5da:	2d00      	cmp	r5, #0
 800a5dc:	d03f      	beq.n	800a65e <ai_layers_forward_all+0x92>
 800a5de:	6385      	str	r5, [r0, #56]	; 0x38
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a5e4:	2001      	movs	r0, #1
 800a5e6:	47b8      	blx	r7
 800a5e8:	2600      	movs	r6, #0
 800a5ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a5ec:	46b0      	mov	r8, r6
 800a5ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a5f0:	2002      	movs	r0, #2
 800a5f2:	47b8      	blx	r7
 800a5f4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a5f6:	696b      	ldr	r3, [r5, #20]
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	4798      	blx	r3
 800a5fc:	692b      	ldr	r3, [r5, #16]
 800a5fe:	429d      	cmp	r5, r3
 800a600:	f04f 0003 	mov.w	r0, #3
 800a604:	4619      	mov	r1, r3
 800a606:	d009      	beq.n	800a61c <ai_layers_forward_all+0x50>
 800a608:	63a3      	str	r3, [r4, #56]	; 0x38
 800a60a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a60c:	47b8      	blx	r7
 800a60e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a610:	3601      	adds	r6, #1
 800a612:	2900      	cmp	r1, #0
 800a614:	d1eb      	bne.n	800a5ee <ai_layers_forward_all+0x22>
 800a616:	4630      	mov	r0, r6
 800a618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a61c:	2100      	movs	r1, #0
 800a61e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800a622:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a624:	47b8      	blx	r7
 800a626:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a628:	3601      	adds	r6, #1
 800a62a:	2900      	cmp	r1, #0
 800a62c:	d1df      	bne.n	800a5ee <ai_layers_forward_all+0x22>
 800a62e:	4630      	mov	r0, r6
 800a630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a634:	b19d      	cbz	r5, 800a65e <ai_layers_forward_all+0x92>
 800a636:	6385      	str	r5, [r0, #56]	; 0x38
 800a638:	463e      	mov	r6, r7
 800a63a:	696b      	ldr	r3, [r5, #20]
 800a63c:	4628      	mov	r0, r5
 800a63e:	4798      	blx	r3
 800a640:	692b      	ldr	r3, [r5, #16]
 800a642:	42ab      	cmp	r3, r5
 800a644:	f106 0601 	add.w	r6, r6, #1
 800a648:	d004      	beq.n	800a654 <ai_layers_forward_all+0x88>
 800a64a:	63a3      	str	r3, [r4, #56]	; 0x38
 800a64c:	461d      	mov	r5, r3
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1f3      	bne.n	800a63a <ai_layers_forward_all+0x6e>
 800a652:	e7e0      	b.n	800a616 <ai_layers_forward_all+0x4a>
 800a654:	2300      	movs	r3, #0
 800a656:	63a3      	str	r3, [r4, #56]	; 0x38
 800a658:	4630      	mov	r0, r6
 800a65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a65e:	462e      	mov	r6, r5
 800a660:	4630      	mov	r0, r6
 800a662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a666:	bf00      	nop

0800a668 <ai_version_get>:
 800a668:	0212      	lsls	r2, r2, #8
 800a66a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a66e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800a672:	4770      	bx	lr

0800a674 <get_tensor_byte_size>:
 800a674:	6983      	ldr	r3, [r0, #24]
 800a676:	68c1      	ldr	r1, [r0, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6940      	ldr	r0, [r0, #20]
 800a67c:	4a06      	ldr	r2, [pc, #24]	; (800a698 <get_tensor_byte_size+0x24>)
 800a67e:	68c9      	ldr	r1, [r1, #12]
 800a680:	68c0      	ldr	r0, [r0, #12]
 800a682:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800a686:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a68a:	fb00 f001 	mul.w	r0, r0, r1
 800a68e:	4293      	cmp	r3, r2
 800a690:	bf04      	itt	eq
 800a692:	3007      	addeq	r0, #7
 800a694:	08c0      	lsreq	r0, r0, #3
 800a696:	4770      	bx	lr
 800a698:	000400c0 	.word	0x000400c0

0800a69c <ai_array_to_buffer_fmt>:
 800a69c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d036      	beq.n	800a712 <ai_array_to_buffer_fmt+0x76>
 800a6a4:	4a21      	ldr	r2, [pc, #132]	; (800a72c <ai_array_to_buffer_fmt+0x90>)
 800a6a6:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d00f      	beq.n	800a6ce <ai_array_to_buffer_fmt+0x32>
 800a6ae:	dd12      	ble.n	800a6d6 <ai_array_to_buffer_fmt+0x3a>
 800a6b0:	4a1f      	ldr	r2, [pc, #124]	; (800a730 <ai_array_to_buffer_fmt+0x94>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d00b      	beq.n	800a6ce <ai_array_to_buffer_fmt+0x32>
 800a6b6:	dd1e      	ble.n	800a6f6 <ai_array_to_buffer_fmt+0x5a>
 800a6b8:	4a1e      	ldr	r2, [pc, #120]	; (800a734 <ai_array_to_buffer_fmt+0x98>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d007      	beq.n	800a6ce <ai_array_to_buffer_fmt+0x32>
 800a6be:	dd30      	ble.n	800a722 <ai_array_to_buffer_fmt+0x86>
 800a6c0:	4a1d      	ldr	r2, [pc, #116]	; (800a738 <ai_array_to_buffer_fmt+0x9c>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d003      	beq.n	800a6ce <ai_array_to_buffer_fmt+0x32>
 800a6c6:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d11f      	bne.n	800a70e <ai_array_to_buffer_fmt+0x72>
 800a6ce:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a6d2:	4318      	orrs	r0, r3
 800a6d4:	4770      	bx	lr
 800a6d6:	4a19      	ldr	r2, [pc, #100]	; (800a73c <ai_array_to_buffer_fmt+0xa0>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d0f8      	beq.n	800a6ce <ai_array_to_buffer_fmt+0x32>
 800a6dc:	dd0b      	ble.n	800a6f6 <ai_array_to_buffer_fmt+0x5a>
 800a6de:	4a18      	ldr	r2, [pc, #96]	; (800a740 <ai_array_to_buffer_fmt+0xa4>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d0f4      	beq.n	800a6ce <ai_array_to_buffer_fmt+0x32>
 800a6e4:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d0f0      	beq.n	800a6ce <ai_array_to_buffer_fmt+0x32>
 800a6ec:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d10c      	bne.n	800a70e <ai_array_to_buffer_fmt+0x72>
 800a6f4:	e7eb      	b.n	800a6ce <ai_array_to_buffer_fmt+0x32>
 800a6f6:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d0e7      	beq.n	800a6ce <ai_array_to_buffer_fmt+0x32>
 800a6fe:	f502 7260 	add.w	r2, r2, #896	; 0x380
 800a702:	4293      	cmp	r3, r2
 800a704:	d0e3      	beq.n	800a6ce <ai_array_to_buffer_fmt+0x32>
 800a706:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d0df      	beq.n	800a6ce <ai_array_to_buffer_fmt+0x32>
 800a70e:	2340      	movs	r3, #64	; 0x40
 800a710:	e7dd      	b.n	800a6ce <ai_array_to_buffer_fmt+0x32>
 800a712:	4b0c      	ldr	r3, [pc, #48]	; (800a744 <ai_array_to_buffer_fmt+0xa8>)
 800a714:	4003      	ands	r3, r0
 800a716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a71a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a71e:	4318      	orrs	r0, r3
 800a720:	4770      	bx	lr
 800a722:	3a0f      	subs	r2, #15
 800a724:	4293      	cmp	r3, r2
 800a726:	d0d2      	beq.n	800a6ce <ai_array_to_buffer_fmt+0x32>
 800a728:	e7f1      	b.n	800a70e <ai_array_to_buffer_fmt+0x72>
 800a72a:	bf00      	nop
 800a72c:	00060440 	.word	0x00060440
 800a730:	00840447 	.word	0x00840447
 800a734:	0084084f 	.word	0x0084084f
 800a738:	00841040 	.word	0x00841040
 800a73c:	00040447 	.word	0x00040447
 800a740:	0004084f 	.word	0x0004084f
 800a744:	00803fff 	.word	0x00803fff

0800a748 <ai_array_get_byte_size>:
 800a748:	b1c1      	cbz	r1, 800a77c <ai_array_get_byte_size+0x34>
 800a74a:	11c3      	asrs	r3, r0, #7
 800a74c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a750:	fb01 f102 	mul.w	r1, r1, r2
 800a754:	3107      	adds	r1, #7
 800a756:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800a75a:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800a75e:	f021 0107 	bic.w	r1, r1, #7
 800a762:	2804      	cmp	r0, #4
 800a764:	fa21 f102 	lsr.w	r1, r1, r2
 800a768:	d00a      	beq.n	800a780 <ai_array_get_byte_size+0x38>
 800a76a:	2808      	cmp	r0, #8
 800a76c:	d103      	bne.n	800a776 <ai_array_get_byte_size+0x2e>
 800a76e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a772:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800a776:	3107      	adds	r1, #7
 800a778:	08c8      	lsrs	r0, r1, #3
 800a77a:	4770      	bx	lr
 800a77c:	4608      	mov	r0, r1
 800a77e:	4770      	bx	lr
 800a780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a784:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800a788:	3107      	adds	r1, #7
 800a78a:	08c8      	lsrs	r0, r1, #3
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop

0800a790 <ai_array_get_data_byte_size>:
 800a790:	b161      	cbz	r1, 800a7ac <ai_array_get_data_byte_size+0x1c>
 800a792:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800a796:	fb01 f103 	mul.w	r1, r1, r3
 800a79a:	3107      	adds	r1, #7
 800a79c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800a7a0:	f021 0107 	bic.w	r1, r1, #7
 800a7a4:	40c1      	lsrs	r1, r0
 800a7a6:	3107      	adds	r1, #7
 800a7a8:	08c8      	lsrs	r0, r1, #3
 800a7aa:	4770      	bx	lr
 800a7ac:	4608      	mov	r0, r1
 800a7ae:	4770      	bx	lr

0800a7b0 <__errno>:
 800a7b0:	4b01      	ldr	r3, [pc, #4]	; (800a7b8 <__errno+0x8>)
 800a7b2:	6818      	ldr	r0, [r3, #0]
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	20000468 	.word	0x20000468

0800a7bc <__libc_init_array>:
 800a7bc:	b570      	push	{r4, r5, r6, lr}
 800a7be:	4d0d      	ldr	r5, [pc, #52]	; (800a7f4 <__libc_init_array+0x38>)
 800a7c0:	4c0d      	ldr	r4, [pc, #52]	; (800a7f8 <__libc_init_array+0x3c>)
 800a7c2:	1b64      	subs	r4, r4, r5
 800a7c4:	10a4      	asrs	r4, r4, #2
 800a7c6:	2600      	movs	r6, #0
 800a7c8:	42a6      	cmp	r6, r4
 800a7ca:	d109      	bne.n	800a7e0 <__libc_init_array+0x24>
 800a7cc:	4d0b      	ldr	r5, [pc, #44]	; (800a7fc <__libc_init_array+0x40>)
 800a7ce:	4c0c      	ldr	r4, [pc, #48]	; (800a800 <__libc_init_array+0x44>)
 800a7d0:	f001 f996 	bl	800bb00 <_init>
 800a7d4:	1b64      	subs	r4, r4, r5
 800a7d6:	10a4      	asrs	r4, r4, #2
 800a7d8:	2600      	movs	r6, #0
 800a7da:	42a6      	cmp	r6, r4
 800a7dc:	d105      	bne.n	800a7ea <__libc_init_array+0x2e>
 800a7de:	bd70      	pop	{r4, r5, r6, pc}
 800a7e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7e4:	4798      	blx	r3
 800a7e6:	3601      	adds	r6, #1
 800a7e8:	e7ee      	b.n	800a7c8 <__libc_init_array+0xc>
 800a7ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ee:	4798      	blx	r3
 800a7f0:	3601      	adds	r6, #1
 800a7f2:	e7f2      	b.n	800a7da <__libc_init_array+0x1e>
 800a7f4:	08013800 	.word	0x08013800
 800a7f8:	08013800 	.word	0x08013800
 800a7fc:	08013800 	.word	0x08013800
 800a800:	08013804 	.word	0x08013804

0800a804 <memcpy>:
 800a804:	440a      	add	r2, r1
 800a806:	4291      	cmp	r1, r2
 800a808:	f100 33ff 	add.w	r3, r0, #4294967295
 800a80c:	d100      	bne.n	800a810 <memcpy+0xc>
 800a80e:	4770      	bx	lr
 800a810:	b510      	push	{r4, lr}
 800a812:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a81a:	4291      	cmp	r1, r2
 800a81c:	d1f9      	bne.n	800a812 <memcpy+0xe>
 800a81e:	bd10      	pop	{r4, pc}

0800a820 <memset>:
 800a820:	4402      	add	r2, r0
 800a822:	4603      	mov	r3, r0
 800a824:	4293      	cmp	r3, r2
 800a826:	d100      	bne.n	800a82a <memset+0xa>
 800a828:	4770      	bx	lr
 800a82a:	f803 1b01 	strb.w	r1, [r3], #1
 800a82e:	e7f9      	b.n	800a824 <memset+0x4>

0800a830 <_free_r>:
 800a830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a832:	2900      	cmp	r1, #0
 800a834:	d044      	beq.n	800a8c0 <_free_r+0x90>
 800a836:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a83a:	9001      	str	r0, [sp, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f1a1 0404 	sub.w	r4, r1, #4
 800a842:	bfb8      	it	lt
 800a844:	18e4      	addlt	r4, r4, r3
 800a846:	f000 fc51 	bl	800b0ec <__malloc_lock>
 800a84a:	4a1e      	ldr	r2, [pc, #120]	; (800a8c4 <_free_r+0x94>)
 800a84c:	9801      	ldr	r0, [sp, #4]
 800a84e:	6813      	ldr	r3, [r2, #0]
 800a850:	b933      	cbnz	r3, 800a860 <_free_r+0x30>
 800a852:	6063      	str	r3, [r4, #4]
 800a854:	6014      	str	r4, [r2, #0]
 800a856:	b003      	add	sp, #12
 800a858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a85c:	f000 bc4c 	b.w	800b0f8 <__malloc_unlock>
 800a860:	42a3      	cmp	r3, r4
 800a862:	d908      	bls.n	800a876 <_free_r+0x46>
 800a864:	6825      	ldr	r5, [r4, #0]
 800a866:	1961      	adds	r1, r4, r5
 800a868:	428b      	cmp	r3, r1
 800a86a:	bf01      	itttt	eq
 800a86c:	6819      	ldreq	r1, [r3, #0]
 800a86e:	685b      	ldreq	r3, [r3, #4]
 800a870:	1949      	addeq	r1, r1, r5
 800a872:	6021      	streq	r1, [r4, #0]
 800a874:	e7ed      	b.n	800a852 <_free_r+0x22>
 800a876:	461a      	mov	r2, r3
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	b10b      	cbz	r3, 800a880 <_free_r+0x50>
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	d9fa      	bls.n	800a876 <_free_r+0x46>
 800a880:	6811      	ldr	r1, [r2, #0]
 800a882:	1855      	adds	r5, r2, r1
 800a884:	42a5      	cmp	r5, r4
 800a886:	d10b      	bne.n	800a8a0 <_free_r+0x70>
 800a888:	6824      	ldr	r4, [r4, #0]
 800a88a:	4421      	add	r1, r4
 800a88c:	1854      	adds	r4, r2, r1
 800a88e:	42a3      	cmp	r3, r4
 800a890:	6011      	str	r1, [r2, #0]
 800a892:	d1e0      	bne.n	800a856 <_free_r+0x26>
 800a894:	681c      	ldr	r4, [r3, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	6053      	str	r3, [r2, #4]
 800a89a:	4421      	add	r1, r4
 800a89c:	6011      	str	r1, [r2, #0]
 800a89e:	e7da      	b.n	800a856 <_free_r+0x26>
 800a8a0:	d902      	bls.n	800a8a8 <_free_r+0x78>
 800a8a2:	230c      	movs	r3, #12
 800a8a4:	6003      	str	r3, [r0, #0]
 800a8a6:	e7d6      	b.n	800a856 <_free_r+0x26>
 800a8a8:	6825      	ldr	r5, [r4, #0]
 800a8aa:	1961      	adds	r1, r4, r5
 800a8ac:	428b      	cmp	r3, r1
 800a8ae:	bf04      	itt	eq
 800a8b0:	6819      	ldreq	r1, [r3, #0]
 800a8b2:	685b      	ldreq	r3, [r3, #4]
 800a8b4:	6063      	str	r3, [r4, #4]
 800a8b6:	bf04      	itt	eq
 800a8b8:	1949      	addeq	r1, r1, r5
 800a8ba:	6021      	streq	r1, [r4, #0]
 800a8bc:	6054      	str	r4, [r2, #4]
 800a8be:	e7ca      	b.n	800a856 <_free_r+0x26>
 800a8c0:	b003      	add	sp, #12
 800a8c2:	bd30      	pop	{r4, r5, pc}
 800a8c4:	20003b88 	.word	0x20003b88

0800a8c8 <sbrk_aligned>:
 800a8c8:	b570      	push	{r4, r5, r6, lr}
 800a8ca:	4e0e      	ldr	r6, [pc, #56]	; (800a904 <sbrk_aligned+0x3c>)
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	6831      	ldr	r1, [r6, #0]
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	b911      	cbnz	r1, 800a8da <sbrk_aligned+0x12>
 800a8d4:	f000 f91a 	bl	800ab0c <_sbrk_r>
 800a8d8:	6030      	str	r0, [r6, #0]
 800a8da:	4621      	mov	r1, r4
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f000 f915 	bl	800ab0c <_sbrk_r>
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	d00a      	beq.n	800a8fc <sbrk_aligned+0x34>
 800a8e6:	1cc4      	adds	r4, r0, #3
 800a8e8:	f024 0403 	bic.w	r4, r4, #3
 800a8ec:	42a0      	cmp	r0, r4
 800a8ee:	d007      	beq.n	800a900 <sbrk_aligned+0x38>
 800a8f0:	1a21      	subs	r1, r4, r0
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	f000 f90a 	bl	800ab0c <_sbrk_r>
 800a8f8:	3001      	adds	r0, #1
 800a8fa:	d101      	bne.n	800a900 <sbrk_aligned+0x38>
 800a8fc:	f04f 34ff 	mov.w	r4, #4294967295
 800a900:	4620      	mov	r0, r4
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	20003b8c 	.word	0x20003b8c

0800a908 <_malloc_r>:
 800a908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a90c:	1ccd      	adds	r5, r1, #3
 800a90e:	f025 0503 	bic.w	r5, r5, #3
 800a912:	3508      	adds	r5, #8
 800a914:	2d0c      	cmp	r5, #12
 800a916:	bf38      	it	cc
 800a918:	250c      	movcc	r5, #12
 800a91a:	2d00      	cmp	r5, #0
 800a91c:	4607      	mov	r7, r0
 800a91e:	db01      	blt.n	800a924 <_malloc_r+0x1c>
 800a920:	42a9      	cmp	r1, r5
 800a922:	d905      	bls.n	800a930 <_malloc_r+0x28>
 800a924:	230c      	movs	r3, #12
 800a926:	603b      	str	r3, [r7, #0]
 800a928:	2600      	movs	r6, #0
 800a92a:	4630      	mov	r0, r6
 800a92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a930:	4e2e      	ldr	r6, [pc, #184]	; (800a9ec <_malloc_r+0xe4>)
 800a932:	f000 fbdb 	bl	800b0ec <__malloc_lock>
 800a936:	6833      	ldr	r3, [r6, #0]
 800a938:	461c      	mov	r4, r3
 800a93a:	bb34      	cbnz	r4, 800a98a <_malloc_r+0x82>
 800a93c:	4629      	mov	r1, r5
 800a93e:	4638      	mov	r0, r7
 800a940:	f7ff ffc2 	bl	800a8c8 <sbrk_aligned>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	4604      	mov	r4, r0
 800a948:	d14d      	bne.n	800a9e6 <_malloc_r+0xde>
 800a94a:	6834      	ldr	r4, [r6, #0]
 800a94c:	4626      	mov	r6, r4
 800a94e:	2e00      	cmp	r6, #0
 800a950:	d140      	bne.n	800a9d4 <_malloc_r+0xcc>
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	4631      	mov	r1, r6
 800a956:	4638      	mov	r0, r7
 800a958:	eb04 0803 	add.w	r8, r4, r3
 800a95c:	f000 f8d6 	bl	800ab0c <_sbrk_r>
 800a960:	4580      	cmp	r8, r0
 800a962:	d13a      	bne.n	800a9da <_malloc_r+0xd2>
 800a964:	6821      	ldr	r1, [r4, #0]
 800a966:	3503      	adds	r5, #3
 800a968:	1a6d      	subs	r5, r5, r1
 800a96a:	f025 0503 	bic.w	r5, r5, #3
 800a96e:	3508      	adds	r5, #8
 800a970:	2d0c      	cmp	r5, #12
 800a972:	bf38      	it	cc
 800a974:	250c      	movcc	r5, #12
 800a976:	4629      	mov	r1, r5
 800a978:	4638      	mov	r0, r7
 800a97a:	f7ff ffa5 	bl	800a8c8 <sbrk_aligned>
 800a97e:	3001      	adds	r0, #1
 800a980:	d02b      	beq.n	800a9da <_malloc_r+0xd2>
 800a982:	6823      	ldr	r3, [r4, #0]
 800a984:	442b      	add	r3, r5
 800a986:	6023      	str	r3, [r4, #0]
 800a988:	e00e      	b.n	800a9a8 <_malloc_r+0xa0>
 800a98a:	6822      	ldr	r2, [r4, #0]
 800a98c:	1b52      	subs	r2, r2, r5
 800a98e:	d41e      	bmi.n	800a9ce <_malloc_r+0xc6>
 800a990:	2a0b      	cmp	r2, #11
 800a992:	d916      	bls.n	800a9c2 <_malloc_r+0xba>
 800a994:	1961      	adds	r1, r4, r5
 800a996:	42a3      	cmp	r3, r4
 800a998:	6025      	str	r5, [r4, #0]
 800a99a:	bf18      	it	ne
 800a99c:	6059      	strne	r1, [r3, #4]
 800a99e:	6863      	ldr	r3, [r4, #4]
 800a9a0:	bf08      	it	eq
 800a9a2:	6031      	streq	r1, [r6, #0]
 800a9a4:	5162      	str	r2, [r4, r5]
 800a9a6:	604b      	str	r3, [r1, #4]
 800a9a8:	4638      	mov	r0, r7
 800a9aa:	f104 060b 	add.w	r6, r4, #11
 800a9ae:	f000 fba3 	bl	800b0f8 <__malloc_unlock>
 800a9b2:	f026 0607 	bic.w	r6, r6, #7
 800a9b6:	1d23      	adds	r3, r4, #4
 800a9b8:	1af2      	subs	r2, r6, r3
 800a9ba:	d0b6      	beq.n	800a92a <_malloc_r+0x22>
 800a9bc:	1b9b      	subs	r3, r3, r6
 800a9be:	50a3      	str	r3, [r4, r2]
 800a9c0:	e7b3      	b.n	800a92a <_malloc_r+0x22>
 800a9c2:	6862      	ldr	r2, [r4, #4]
 800a9c4:	42a3      	cmp	r3, r4
 800a9c6:	bf0c      	ite	eq
 800a9c8:	6032      	streq	r2, [r6, #0]
 800a9ca:	605a      	strne	r2, [r3, #4]
 800a9cc:	e7ec      	b.n	800a9a8 <_malloc_r+0xa0>
 800a9ce:	4623      	mov	r3, r4
 800a9d0:	6864      	ldr	r4, [r4, #4]
 800a9d2:	e7b2      	b.n	800a93a <_malloc_r+0x32>
 800a9d4:	4634      	mov	r4, r6
 800a9d6:	6876      	ldr	r6, [r6, #4]
 800a9d8:	e7b9      	b.n	800a94e <_malloc_r+0x46>
 800a9da:	230c      	movs	r3, #12
 800a9dc:	603b      	str	r3, [r7, #0]
 800a9de:	4638      	mov	r0, r7
 800a9e0:	f000 fb8a 	bl	800b0f8 <__malloc_unlock>
 800a9e4:	e7a1      	b.n	800a92a <_malloc_r+0x22>
 800a9e6:	6025      	str	r5, [r4, #0]
 800a9e8:	e7de      	b.n	800a9a8 <_malloc_r+0xa0>
 800a9ea:	bf00      	nop
 800a9ec:	20003b88 	.word	0x20003b88

0800a9f0 <iprintf>:
 800a9f0:	b40f      	push	{r0, r1, r2, r3}
 800a9f2:	4b0a      	ldr	r3, [pc, #40]	; (800aa1c <iprintf+0x2c>)
 800a9f4:	b513      	push	{r0, r1, r4, lr}
 800a9f6:	681c      	ldr	r4, [r3, #0]
 800a9f8:	b124      	cbz	r4, 800aa04 <iprintf+0x14>
 800a9fa:	69a3      	ldr	r3, [r4, #24]
 800a9fc:	b913      	cbnz	r3, 800aa04 <iprintf+0x14>
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f000 fa6e 	bl	800aee0 <__sinit>
 800aa04:	ab05      	add	r3, sp, #20
 800aa06:	9a04      	ldr	r2, [sp, #16]
 800aa08:	68a1      	ldr	r1, [r4, #8]
 800aa0a:	9301      	str	r3, [sp, #4]
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f000 fba3 	bl	800b158 <_vfiprintf_r>
 800aa12:	b002      	add	sp, #8
 800aa14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa18:	b004      	add	sp, #16
 800aa1a:	4770      	bx	lr
 800aa1c:	20000468 	.word	0x20000468

0800aa20 <_puts_r>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	460e      	mov	r6, r1
 800aa24:	4605      	mov	r5, r0
 800aa26:	b118      	cbz	r0, 800aa30 <_puts_r+0x10>
 800aa28:	6983      	ldr	r3, [r0, #24]
 800aa2a:	b90b      	cbnz	r3, 800aa30 <_puts_r+0x10>
 800aa2c:	f000 fa58 	bl	800aee0 <__sinit>
 800aa30:	69ab      	ldr	r3, [r5, #24]
 800aa32:	68ac      	ldr	r4, [r5, #8]
 800aa34:	b913      	cbnz	r3, 800aa3c <_puts_r+0x1c>
 800aa36:	4628      	mov	r0, r5
 800aa38:	f000 fa52 	bl	800aee0 <__sinit>
 800aa3c:	4b2c      	ldr	r3, [pc, #176]	; (800aaf0 <_puts_r+0xd0>)
 800aa3e:	429c      	cmp	r4, r3
 800aa40:	d120      	bne.n	800aa84 <_puts_r+0x64>
 800aa42:	686c      	ldr	r4, [r5, #4]
 800aa44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa46:	07db      	lsls	r3, r3, #31
 800aa48:	d405      	bmi.n	800aa56 <_puts_r+0x36>
 800aa4a:	89a3      	ldrh	r3, [r4, #12]
 800aa4c:	0598      	lsls	r0, r3, #22
 800aa4e:	d402      	bmi.n	800aa56 <_puts_r+0x36>
 800aa50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa52:	f000 fae3 	bl	800b01c <__retarget_lock_acquire_recursive>
 800aa56:	89a3      	ldrh	r3, [r4, #12]
 800aa58:	0719      	lsls	r1, r3, #28
 800aa5a:	d51d      	bpl.n	800aa98 <_puts_r+0x78>
 800aa5c:	6923      	ldr	r3, [r4, #16]
 800aa5e:	b1db      	cbz	r3, 800aa98 <_puts_r+0x78>
 800aa60:	3e01      	subs	r6, #1
 800aa62:	68a3      	ldr	r3, [r4, #8]
 800aa64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	60a3      	str	r3, [r4, #8]
 800aa6c:	bb39      	cbnz	r1, 800aabe <_puts_r+0x9e>
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	da38      	bge.n	800aae4 <_puts_r+0xc4>
 800aa72:	4622      	mov	r2, r4
 800aa74:	210a      	movs	r1, #10
 800aa76:	4628      	mov	r0, r5
 800aa78:	f000 f858 	bl	800ab2c <__swbuf_r>
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	d011      	beq.n	800aaa4 <_puts_r+0x84>
 800aa80:	250a      	movs	r5, #10
 800aa82:	e011      	b.n	800aaa8 <_puts_r+0x88>
 800aa84:	4b1b      	ldr	r3, [pc, #108]	; (800aaf4 <_puts_r+0xd4>)
 800aa86:	429c      	cmp	r4, r3
 800aa88:	d101      	bne.n	800aa8e <_puts_r+0x6e>
 800aa8a:	68ac      	ldr	r4, [r5, #8]
 800aa8c:	e7da      	b.n	800aa44 <_puts_r+0x24>
 800aa8e:	4b1a      	ldr	r3, [pc, #104]	; (800aaf8 <_puts_r+0xd8>)
 800aa90:	429c      	cmp	r4, r3
 800aa92:	bf08      	it	eq
 800aa94:	68ec      	ldreq	r4, [r5, #12]
 800aa96:	e7d5      	b.n	800aa44 <_puts_r+0x24>
 800aa98:	4621      	mov	r1, r4
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	f000 f898 	bl	800abd0 <__swsetup_r>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d0dd      	beq.n	800aa60 <_puts_r+0x40>
 800aaa4:	f04f 35ff 	mov.w	r5, #4294967295
 800aaa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaaa:	07da      	lsls	r2, r3, #31
 800aaac:	d405      	bmi.n	800aaba <_puts_r+0x9a>
 800aaae:	89a3      	ldrh	r3, [r4, #12]
 800aab0:	059b      	lsls	r3, r3, #22
 800aab2:	d402      	bmi.n	800aaba <_puts_r+0x9a>
 800aab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aab6:	f000 fab2 	bl	800b01e <__retarget_lock_release_recursive>
 800aaba:	4628      	mov	r0, r5
 800aabc:	bd70      	pop	{r4, r5, r6, pc}
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	da04      	bge.n	800aacc <_puts_r+0xac>
 800aac2:	69a2      	ldr	r2, [r4, #24]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	dc06      	bgt.n	800aad6 <_puts_r+0xb6>
 800aac8:	290a      	cmp	r1, #10
 800aaca:	d004      	beq.n	800aad6 <_puts_r+0xb6>
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	1c5a      	adds	r2, r3, #1
 800aad0:	6022      	str	r2, [r4, #0]
 800aad2:	7019      	strb	r1, [r3, #0]
 800aad4:	e7c5      	b.n	800aa62 <_puts_r+0x42>
 800aad6:	4622      	mov	r2, r4
 800aad8:	4628      	mov	r0, r5
 800aada:	f000 f827 	bl	800ab2c <__swbuf_r>
 800aade:	3001      	adds	r0, #1
 800aae0:	d1bf      	bne.n	800aa62 <_puts_r+0x42>
 800aae2:	e7df      	b.n	800aaa4 <_puts_r+0x84>
 800aae4:	6823      	ldr	r3, [r4, #0]
 800aae6:	250a      	movs	r5, #10
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	6022      	str	r2, [r4, #0]
 800aaec:	701d      	strb	r5, [r3, #0]
 800aaee:	e7db      	b.n	800aaa8 <_puts_r+0x88>
 800aaf0:	0801376c 	.word	0x0801376c
 800aaf4:	0801378c 	.word	0x0801378c
 800aaf8:	0801374c 	.word	0x0801374c

0800aafc <puts>:
 800aafc:	4b02      	ldr	r3, [pc, #8]	; (800ab08 <puts+0xc>)
 800aafe:	4601      	mov	r1, r0
 800ab00:	6818      	ldr	r0, [r3, #0]
 800ab02:	f7ff bf8d 	b.w	800aa20 <_puts_r>
 800ab06:	bf00      	nop
 800ab08:	20000468 	.word	0x20000468

0800ab0c <_sbrk_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	4d06      	ldr	r5, [pc, #24]	; (800ab28 <_sbrk_r+0x1c>)
 800ab10:	2300      	movs	r3, #0
 800ab12:	4604      	mov	r4, r0
 800ab14:	4608      	mov	r0, r1
 800ab16:	602b      	str	r3, [r5, #0]
 800ab18:	f7f6 f8e6 	bl	8000ce8 <_sbrk>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d102      	bne.n	800ab26 <_sbrk_r+0x1a>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	b103      	cbz	r3, 800ab26 <_sbrk_r+0x1a>
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	20003b94 	.word	0x20003b94

0800ab2c <__swbuf_r>:
 800ab2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2e:	460e      	mov	r6, r1
 800ab30:	4614      	mov	r4, r2
 800ab32:	4605      	mov	r5, r0
 800ab34:	b118      	cbz	r0, 800ab3e <__swbuf_r+0x12>
 800ab36:	6983      	ldr	r3, [r0, #24]
 800ab38:	b90b      	cbnz	r3, 800ab3e <__swbuf_r+0x12>
 800ab3a:	f000 f9d1 	bl	800aee0 <__sinit>
 800ab3e:	4b21      	ldr	r3, [pc, #132]	; (800abc4 <__swbuf_r+0x98>)
 800ab40:	429c      	cmp	r4, r3
 800ab42:	d12b      	bne.n	800ab9c <__swbuf_r+0x70>
 800ab44:	686c      	ldr	r4, [r5, #4]
 800ab46:	69a3      	ldr	r3, [r4, #24]
 800ab48:	60a3      	str	r3, [r4, #8]
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	071a      	lsls	r2, r3, #28
 800ab4e:	d52f      	bpl.n	800abb0 <__swbuf_r+0x84>
 800ab50:	6923      	ldr	r3, [r4, #16]
 800ab52:	b36b      	cbz	r3, 800abb0 <__swbuf_r+0x84>
 800ab54:	6923      	ldr	r3, [r4, #16]
 800ab56:	6820      	ldr	r0, [r4, #0]
 800ab58:	1ac0      	subs	r0, r0, r3
 800ab5a:	6963      	ldr	r3, [r4, #20]
 800ab5c:	b2f6      	uxtb	r6, r6
 800ab5e:	4283      	cmp	r3, r0
 800ab60:	4637      	mov	r7, r6
 800ab62:	dc04      	bgt.n	800ab6e <__swbuf_r+0x42>
 800ab64:	4621      	mov	r1, r4
 800ab66:	4628      	mov	r0, r5
 800ab68:	f000 f926 	bl	800adb8 <_fflush_r>
 800ab6c:	bb30      	cbnz	r0, 800abbc <__swbuf_r+0x90>
 800ab6e:	68a3      	ldr	r3, [r4, #8]
 800ab70:	3b01      	subs	r3, #1
 800ab72:	60a3      	str	r3, [r4, #8]
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	1c5a      	adds	r2, r3, #1
 800ab78:	6022      	str	r2, [r4, #0]
 800ab7a:	701e      	strb	r6, [r3, #0]
 800ab7c:	6963      	ldr	r3, [r4, #20]
 800ab7e:	3001      	adds	r0, #1
 800ab80:	4283      	cmp	r3, r0
 800ab82:	d004      	beq.n	800ab8e <__swbuf_r+0x62>
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	07db      	lsls	r3, r3, #31
 800ab88:	d506      	bpl.n	800ab98 <__swbuf_r+0x6c>
 800ab8a:	2e0a      	cmp	r6, #10
 800ab8c:	d104      	bne.n	800ab98 <__swbuf_r+0x6c>
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4628      	mov	r0, r5
 800ab92:	f000 f911 	bl	800adb8 <_fflush_r>
 800ab96:	b988      	cbnz	r0, 800abbc <__swbuf_r+0x90>
 800ab98:	4638      	mov	r0, r7
 800ab9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab9c:	4b0a      	ldr	r3, [pc, #40]	; (800abc8 <__swbuf_r+0x9c>)
 800ab9e:	429c      	cmp	r4, r3
 800aba0:	d101      	bne.n	800aba6 <__swbuf_r+0x7a>
 800aba2:	68ac      	ldr	r4, [r5, #8]
 800aba4:	e7cf      	b.n	800ab46 <__swbuf_r+0x1a>
 800aba6:	4b09      	ldr	r3, [pc, #36]	; (800abcc <__swbuf_r+0xa0>)
 800aba8:	429c      	cmp	r4, r3
 800abaa:	bf08      	it	eq
 800abac:	68ec      	ldreq	r4, [r5, #12]
 800abae:	e7ca      	b.n	800ab46 <__swbuf_r+0x1a>
 800abb0:	4621      	mov	r1, r4
 800abb2:	4628      	mov	r0, r5
 800abb4:	f000 f80c 	bl	800abd0 <__swsetup_r>
 800abb8:	2800      	cmp	r0, #0
 800abba:	d0cb      	beq.n	800ab54 <__swbuf_r+0x28>
 800abbc:	f04f 37ff 	mov.w	r7, #4294967295
 800abc0:	e7ea      	b.n	800ab98 <__swbuf_r+0x6c>
 800abc2:	bf00      	nop
 800abc4:	0801376c 	.word	0x0801376c
 800abc8:	0801378c 	.word	0x0801378c
 800abcc:	0801374c 	.word	0x0801374c

0800abd0 <__swsetup_r>:
 800abd0:	4b32      	ldr	r3, [pc, #200]	; (800ac9c <__swsetup_r+0xcc>)
 800abd2:	b570      	push	{r4, r5, r6, lr}
 800abd4:	681d      	ldr	r5, [r3, #0]
 800abd6:	4606      	mov	r6, r0
 800abd8:	460c      	mov	r4, r1
 800abda:	b125      	cbz	r5, 800abe6 <__swsetup_r+0x16>
 800abdc:	69ab      	ldr	r3, [r5, #24]
 800abde:	b913      	cbnz	r3, 800abe6 <__swsetup_r+0x16>
 800abe0:	4628      	mov	r0, r5
 800abe2:	f000 f97d 	bl	800aee0 <__sinit>
 800abe6:	4b2e      	ldr	r3, [pc, #184]	; (800aca0 <__swsetup_r+0xd0>)
 800abe8:	429c      	cmp	r4, r3
 800abea:	d10f      	bne.n	800ac0c <__swsetup_r+0x3c>
 800abec:	686c      	ldr	r4, [r5, #4]
 800abee:	89a3      	ldrh	r3, [r4, #12]
 800abf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abf4:	0719      	lsls	r1, r3, #28
 800abf6:	d42c      	bmi.n	800ac52 <__swsetup_r+0x82>
 800abf8:	06dd      	lsls	r5, r3, #27
 800abfa:	d411      	bmi.n	800ac20 <__swsetup_r+0x50>
 800abfc:	2309      	movs	r3, #9
 800abfe:	6033      	str	r3, [r6, #0]
 800ac00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac04:	81a3      	strh	r3, [r4, #12]
 800ac06:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0a:	e03e      	b.n	800ac8a <__swsetup_r+0xba>
 800ac0c:	4b25      	ldr	r3, [pc, #148]	; (800aca4 <__swsetup_r+0xd4>)
 800ac0e:	429c      	cmp	r4, r3
 800ac10:	d101      	bne.n	800ac16 <__swsetup_r+0x46>
 800ac12:	68ac      	ldr	r4, [r5, #8]
 800ac14:	e7eb      	b.n	800abee <__swsetup_r+0x1e>
 800ac16:	4b24      	ldr	r3, [pc, #144]	; (800aca8 <__swsetup_r+0xd8>)
 800ac18:	429c      	cmp	r4, r3
 800ac1a:	bf08      	it	eq
 800ac1c:	68ec      	ldreq	r4, [r5, #12]
 800ac1e:	e7e6      	b.n	800abee <__swsetup_r+0x1e>
 800ac20:	0758      	lsls	r0, r3, #29
 800ac22:	d512      	bpl.n	800ac4a <__swsetup_r+0x7a>
 800ac24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac26:	b141      	cbz	r1, 800ac3a <__swsetup_r+0x6a>
 800ac28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac2c:	4299      	cmp	r1, r3
 800ac2e:	d002      	beq.n	800ac36 <__swsetup_r+0x66>
 800ac30:	4630      	mov	r0, r6
 800ac32:	f7ff fdfd 	bl	800a830 <_free_r>
 800ac36:	2300      	movs	r3, #0
 800ac38:	6363      	str	r3, [r4, #52]	; 0x34
 800ac3a:	89a3      	ldrh	r3, [r4, #12]
 800ac3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac40:	81a3      	strh	r3, [r4, #12]
 800ac42:	2300      	movs	r3, #0
 800ac44:	6063      	str	r3, [r4, #4]
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	f043 0308 	orr.w	r3, r3, #8
 800ac50:	81a3      	strh	r3, [r4, #12]
 800ac52:	6923      	ldr	r3, [r4, #16]
 800ac54:	b94b      	cbnz	r3, 800ac6a <__swsetup_r+0x9a>
 800ac56:	89a3      	ldrh	r3, [r4, #12]
 800ac58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac60:	d003      	beq.n	800ac6a <__swsetup_r+0x9a>
 800ac62:	4621      	mov	r1, r4
 800ac64:	4630      	mov	r0, r6
 800ac66:	f000 fa01 	bl	800b06c <__smakebuf_r>
 800ac6a:	89a0      	ldrh	r0, [r4, #12]
 800ac6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac70:	f010 0301 	ands.w	r3, r0, #1
 800ac74:	d00a      	beq.n	800ac8c <__swsetup_r+0xbc>
 800ac76:	2300      	movs	r3, #0
 800ac78:	60a3      	str	r3, [r4, #8]
 800ac7a:	6963      	ldr	r3, [r4, #20]
 800ac7c:	425b      	negs	r3, r3
 800ac7e:	61a3      	str	r3, [r4, #24]
 800ac80:	6923      	ldr	r3, [r4, #16]
 800ac82:	b943      	cbnz	r3, 800ac96 <__swsetup_r+0xc6>
 800ac84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac88:	d1ba      	bne.n	800ac00 <__swsetup_r+0x30>
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	0781      	lsls	r1, r0, #30
 800ac8e:	bf58      	it	pl
 800ac90:	6963      	ldrpl	r3, [r4, #20]
 800ac92:	60a3      	str	r3, [r4, #8]
 800ac94:	e7f4      	b.n	800ac80 <__swsetup_r+0xb0>
 800ac96:	2000      	movs	r0, #0
 800ac98:	e7f7      	b.n	800ac8a <__swsetup_r+0xba>
 800ac9a:	bf00      	nop
 800ac9c:	20000468 	.word	0x20000468
 800aca0:	0801376c 	.word	0x0801376c
 800aca4:	0801378c 	.word	0x0801378c
 800aca8:	0801374c 	.word	0x0801374c

0800acac <__sflush_r>:
 800acac:	898a      	ldrh	r2, [r1, #12]
 800acae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb2:	4605      	mov	r5, r0
 800acb4:	0710      	lsls	r0, r2, #28
 800acb6:	460c      	mov	r4, r1
 800acb8:	d458      	bmi.n	800ad6c <__sflush_r+0xc0>
 800acba:	684b      	ldr	r3, [r1, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	dc05      	bgt.n	800accc <__sflush_r+0x20>
 800acc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	dc02      	bgt.n	800accc <__sflush_r+0x20>
 800acc6:	2000      	movs	r0, #0
 800acc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800accc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acce:	2e00      	cmp	r6, #0
 800acd0:	d0f9      	beq.n	800acc6 <__sflush_r+0x1a>
 800acd2:	2300      	movs	r3, #0
 800acd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acd8:	682f      	ldr	r7, [r5, #0]
 800acda:	602b      	str	r3, [r5, #0]
 800acdc:	d032      	beq.n	800ad44 <__sflush_r+0x98>
 800acde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ace0:	89a3      	ldrh	r3, [r4, #12]
 800ace2:	075a      	lsls	r2, r3, #29
 800ace4:	d505      	bpl.n	800acf2 <__sflush_r+0x46>
 800ace6:	6863      	ldr	r3, [r4, #4]
 800ace8:	1ac0      	subs	r0, r0, r3
 800acea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acec:	b10b      	cbz	r3, 800acf2 <__sflush_r+0x46>
 800acee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acf0:	1ac0      	subs	r0, r0, r3
 800acf2:	2300      	movs	r3, #0
 800acf4:	4602      	mov	r2, r0
 800acf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acf8:	6a21      	ldr	r1, [r4, #32]
 800acfa:	4628      	mov	r0, r5
 800acfc:	47b0      	blx	r6
 800acfe:	1c43      	adds	r3, r0, #1
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	d106      	bne.n	800ad12 <__sflush_r+0x66>
 800ad04:	6829      	ldr	r1, [r5, #0]
 800ad06:	291d      	cmp	r1, #29
 800ad08:	d82c      	bhi.n	800ad64 <__sflush_r+0xb8>
 800ad0a:	4a2a      	ldr	r2, [pc, #168]	; (800adb4 <__sflush_r+0x108>)
 800ad0c:	40ca      	lsrs	r2, r1
 800ad0e:	07d6      	lsls	r6, r2, #31
 800ad10:	d528      	bpl.n	800ad64 <__sflush_r+0xb8>
 800ad12:	2200      	movs	r2, #0
 800ad14:	6062      	str	r2, [r4, #4]
 800ad16:	04d9      	lsls	r1, r3, #19
 800ad18:	6922      	ldr	r2, [r4, #16]
 800ad1a:	6022      	str	r2, [r4, #0]
 800ad1c:	d504      	bpl.n	800ad28 <__sflush_r+0x7c>
 800ad1e:	1c42      	adds	r2, r0, #1
 800ad20:	d101      	bne.n	800ad26 <__sflush_r+0x7a>
 800ad22:	682b      	ldr	r3, [r5, #0]
 800ad24:	b903      	cbnz	r3, 800ad28 <__sflush_r+0x7c>
 800ad26:	6560      	str	r0, [r4, #84]	; 0x54
 800ad28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad2a:	602f      	str	r7, [r5, #0]
 800ad2c:	2900      	cmp	r1, #0
 800ad2e:	d0ca      	beq.n	800acc6 <__sflush_r+0x1a>
 800ad30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad34:	4299      	cmp	r1, r3
 800ad36:	d002      	beq.n	800ad3e <__sflush_r+0x92>
 800ad38:	4628      	mov	r0, r5
 800ad3a:	f7ff fd79 	bl	800a830 <_free_r>
 800ad3e:	2000      	movs	r0, #0
 800ad40:	6360      	str	r0, [r4, #52]	; 0x34
 800ad42:	e7c1      	b.n	800acc8 <__sflush_r+0x1c>
 800ad44:	6a21      	ldr	r1, [r4, #32]
 800ad46:	2301      	movs	r3, #1
 800ad48:	4628      	mov	r0, r5
 800ad4a:	47b0      	blx	r6
 800ad4c:	1c41      	adds	r1, r0, #1
 800ad4e:	d1c7      	bne.n	800ace0 <__sflush_r+0x34>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d0c4      	beq.n	800ace0 <__sflush_r+0x34>
 800ad56:	2b1d      	cmp	r3, #29
 800ad58:	d001      	beq.n	800ad5e <__sflush_r+0xb2>
 800ad5a:	2b16      	cmp	r3, #22
 800ad5c:	d101      	bne.n	800ad62 <__sflush_r+0xb6>
 800ad5e:	602f      	str	r7, [r5, #0]
 800ad60:	e7b1      	b.n	800acc6 <__sflush_r+0x1a>
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	e7ad      	b.n	800acc8 <__sflush_r+0x1c>
 800ad6c:	690f      	ldr	r7, [r1, #16]
 800ad6e:	2f00      	cmp	r7, #0
 800ad70:	d0a9      	beq.n	800acc6 <__sflush_r+0x1a>
 800ad72:	0793      	lsls	r3, r2, #30
 800ad74:	680e      	ldr	r6, [r1, #0]
 800ad76:	bf08      	it	eq
 800ad78:	694b      	ldreq	r3, [r1, #20]
 800ad7a:	600f      	str	r7, [r1, #0]
 800ad7c:	bf18      	it	ne
 800ad7e:	2300      	movne	r3, #0
 800ad80:	eba6 0807 	sub.w	r8, r6, r7
 800ad84:	608b      	str	r3, [r1, #8]
 800ad86:	f1b8 0f00 	cmp.w	r8, #0
 800ad8a:	dd9c      	ble.n	800acc6 <__sflush_r+0x1a>
 800ad8c:	6a21      	ldr	r1, [r4, #32]
 800ad8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad90:	4643      	mov	r3, r8
 800ad92:	463a      	mov	r2, r7
 800ad94:	4628      	mov	r0, r5
 800ad96:	47b0      	blx	r6
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	dc06      	bgt.n	800adaa <__sflush_r+0xfe>
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ada2:	81a3      	strh	r3, [r4, #12]
 800ada4:	f04f 30ff 	mov.w	r0, #4294967295
 800ada8:	e78e      	b.n	800acc8 <__sflush_r+0x1c>
 800adaa:	4407      	add	r7, r0
 800adac:	eba8 0800 	sub.w	r8, r8, r0
 800adb0:	e7e9      	b.n	800ad86 <__sflush_r+0xda>
 800adb2:	bf00      	nop
 800adb4:	20400001 	.word	0x20400001

0800adb8 <_fflush_r>:
 800adb8:	b538      	push	{r3, r4, r5, lr}
 800adba:	690b      	ldr	r3, [r1, #16]
 800adbc:	4605      	mov	r5, r0
 800adbe:	460c      	mov	r4, r1
 800adc0:	b913      	cbnz	r3, 800adc8 <_fflush_r+0x10>
 800adc2:	2500      	movs	r5, #0
 800adc4:	4628      	mov	r0, r5
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	b118      	cbz	r0, 800add2 <_fflush_r+0x1a>
 800adca:	6983      	ldr	r3, [r0, #24]
 800adcc:	b90b      	cbnz	r3, 800add2 <_fflush_r+0x1a>
 800adce:	f000 f887 	bl	800aee0 <__sinit>
 800add2:	4b14      	ldr	r3, [pc, #80]	; (800ae24 <_fflush_r+0x6c>)
 800add4:	429c      	cmp	r4, r3
 800add6:	d11b      	bne.n	800ae10 <_fflush_r+0x58>
 800add8:	686c      	ldr	r4, [r5, #4]
 800adda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d0ef      	beq.n	800adc2 <_fflush_r+0xa>
 800ade2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ade4:	07d0      	lsls	r0, r2, #31
 800ade6:	d404      	bmi.n	800adf2 <_fflush_r+0x3a>
 800ade8:	0599      	lsls	r1, r3, #22
 800adea:	d402      	bmi.n	800adf2 <_fflush_r+0x3a>
 800adec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adee:	f000 f915 	bl	800b01c <__retarget_lock_acquire_recursive>
 800adf2:	4628      	mov	r0, r5
 800adf4:	4621      	mov	r1, r4
 800adf6:	f7ff ff59 	bl	800acac <__sflush_r>
 800adfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adfc:	07da      	lsls	r2, r3, #31
 800adfe:	4605      	mov	r5, r0
 800ae00:	d4e0      	bmi.n	800adc4 <_fflush_r+0xc>
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	059b      	lsls	r3, r3, #22
 800ae06:	d4dd      	bmi.n	800adc4 <_fflush_r+0xc>
 800ae08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae0a:	f000 f908 	bl	800b01e <__retarget_lock_release_recursive>
 800ae0e:	e7d9      	b.n	800adc4 <_fflush_r+0xc>
 800ae10:	4b05      	ldr	r3, [pc, #20]	; (800ae28 <_fflush_r+0x70>)
 800ae12:	429c      	cmp	r4, r3
 800ae14:	d101      	bne.n	800ae1a <_fflush_r+0x62>
 800ae16:	68ac      	ldr	r4, [r5, #8]
 800ae18:	e7df      	b.n	800adda <_fflush_r+0x22>
 800ae1a:	4b04      	ldr	r3, [pc, #16]	; (800ae2c <_fflush_r+0x74>)
 800ae1c:	429c      	cmp	r4, r3
 800ae1e:	bf08      	it	eq
 800ae20:	68ec      	ldreq	r4, [r5, #12]
 800ae22:	e7da      	b.n	800adda <_fflush_r+0x22>
 800ae24:	0801376c 	.word	0x0801376c
 800ae28:	0801378c 	.word	0x0801378c
 800ae2c:	0801374c 	.word	0x0801374c

0800ae30 <std>:
 800ae30:	2300      	movs	r3, #0
 800ae32:	b510      	push	{r4, lr}
 800ae34:	4604      	mov	r4, r0
 800ae36:	e9c0 3300 	strd	r3, r3, [r0]
 800ae3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae3e:	6083      	str	r3, [r0, #8]
 800ae40:	8181      	strh	r1, [r0, #12]
 800ae42:	6643      	str	r3, [r0, #100]	; 0x64
 800ae44:	81c2      	strh	r2, [r0, #14]
 800ae46:	6183      	str	r3, [r0, #24]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	2208      	movs	r2, #8
 800ae4c:	305c      	adds	r0, #92	; 0x5c
 800ae4e:	f7ff fce7 	bl	800a820 <memset>
 800ae52:	4b05      	ldr	r3, [pc, #20]	; (800ae68 <std+0x38>)
 800ae54:	6263      	str	r3, [r4, #36]	; 0x24
 800ae56:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <std+0x3c>)
 800ae58:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae5a:	4b05      	ldr	r3, [pc, #20]	; (800ae70 <std+0x40>)
 800ae5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae5e:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <std+0x44>)
 800ae60:	6224      	str	r4, [r4, #32]
 800ae62:	6323      	str	r3, [r4, #48]	; 0x30
 800ae64:	bd10      	pop	{r4, pc}
 800ae66:	bf00      	nop
 800ae68:	0800b6e1 	.word	0x0800b6e1
 800ae6c:	0800b703 	.word	0x0800b703
 800ae70:	0800b73b 	.word	0x0800b73b
 800ae74:	0800b75f 	.word	0x0800b75f

0800ae78 <_cleanup_r>:
 800ae78:	4901      	ldr	r1, [pc, #4]	; (800ae80 <_cleanup_r+0x8>)
 800ae7a:	f000 b8af 	b.w	800afdc <_fwalk_reent>
 800ae7e:	bf00      	nop
 800ae80:	0800adb9 	.word	0x0800adb9

0800ae84 <__sfmoreglue>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	2268      	movs	r2, #104	; 0x68
 800ae88:	1e4d      	subs	r5, r1, #1
 800ae8a:	4355      	muls	r5, r2
 800ae8c:	460e      	mov	r6, r1
 800ae8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae92:	f7ff fd39 	bl	800a908 <_malloc_r>
 800ae96:	4604      	mov	r4, r0
 800ae98:	b140      	cbz	r0, 800aeac <__sfmoreglue+0x28>
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	e9c0 1600 	strd	r1, r6, [r0]
 800aea0:	300c      	adds	r0, #12
 800aea2:	60a0      	str	r0, [r4, #8]
 800aea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aea8:	f7ff fcba 	bl	800a820 <memset>
 800aeac:	4620      	mov	r0, r4
 800aeae:	bd70      	pop	{r4, r5, r6, pc}

0800aeb0 <__sfp_lock_acquire>:
 800aeb0:	4801      	ldr	r0, [pc, #4]	; (800aeb8 <__sfp_lock_acquire+0x8>)
 800aeb2:	f000 b8b3 	b.w	800b01c <__retarget_lock_acquire_recursive>
 800aeb6:	bf00      	nop
 800aeb8:	20003b91 	.word	0x20003b91

0800aebc <__sfp_lock_release>:
 800aebc:	4801      	ldr	r0, [pc, #4]	; (800aec4 <__sfp_lock_release+0x8>)
 800aebe:	f000 b8ae 	b.w	800b01e <__retarget_lock_release_recursive>
 800aec2:	bf00      	nop
 800aec4:	20003b91 	.word	0x20003b91

0800aec8 <__sinit_lock_acquire>:
 800aec8:	4801      	ldr	r0, [pc, #4]	; (800aed0 <__sinit_lock_acquire+0x8>)
 800aeca:	f000 b8a7 	b.w	800b01c <__retarget_lock_acquire_recursive>
 800aece:	bf00      	nop
 800aed0:	20003b92 	.word	0x20003b92

0800aed4 <__sinit_lock_release>:
 800aed4:	4801      	ldr	r0, [pc, #4]	; (800aedc <__sinit_lock_release+0x8>)
 800aed6:	f000 b8a2 	b.w	800b01e <__retarget_lock_release_recursive>
 800aeda:	bf00      	nop
 800aedc:	20003b92 	.word	0x20003b92

0800aee0 <__sinit>:
 800aee0:	b510      	push	{r4, lr}
 800aee2:	4604      	mov	r4, r0
 800aee4:	f7ff fff0 	bl	800aec8 <__sinit_lock_acquire>
 800aee8:	69a3      	ldr	r3, [r4, #24]
 800aeea:	b11b      	cbz	r3, 800aef4 <__sinit+0x14>
 800aeec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef0:	f7ff bff0 	b.w	800aed4 <__sinit_lock_release>
 800aef4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aef8:	6523      	str	r3, [r4, #80]	; 0x50
 800aefa:	4b13      	ldr	r3, [pc, #76]	; (800af48 <__sinit+0x68>)
 800aefc:	4a13      	ldr	r2, [pc, #76]	; (800af4c <__sinit+0x6c>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	62a2      	str	r2, [r4, #40]	; 0x28
 800af02:	42a3      	cmp	r3, r4
 800af04:	bf04      	itt	eq
 800af06:	2301      	moveq	r3, #1
 800af08:	61a3      	streq	r3, [r4, #24]
 800af0a:	4620      	mov	r0, r4
 800af0c:	f000 f820 	bl	800af50 <__sfp>
 800af10:	6060      	str	r0, [r4, #4]
 800af12:	4620      	mov	r0, r4
 800af14:	f000 f81c 	bl	800af50 <__sfp>
 800af18:	60a0      	str	r0, [r4, #8]
 800af1a:	4620      	mov	r0, r4
 800af1c:	f000 f818 	bl	800af50 <__sfp>
 800af20:	2200      	movs	r2, #0
 800af22:	60e0      	str	r0, [r4, #12]
 800af24:	2104      	movs	r1, #4
 800af26:	6860      	ldr	r0, [r4, #4]
 800af28:	f7ff ff82 	bl	800ae30 <std>
 800af2c:	68a0      	ldr	r0, [r4, #8]
 800af2e:	2201      	movs	r2, #1
 800af30:	2109      	movs	r1, #9
 800af32:	f7ff ff7d 	bl	800ae30 <std>
 800af36:	68e0      	ldr	r0, [r4, #12]
 800af38:	2202      	movs	r2, #2
 800af3a:	2112      	movs	r1, #18
 800af3c:	f7ff ff78 	bl	800ae30 <std>
 800af40:	2301      	movs	r3, #1
 800af42:	61a3      	str	r3, [r4, #24]
 800af44:	e7d2      	b.n	800aeec <__sinit+0xc>
 800af46:	bf00      	nop
 800af48:	08013748 	.word	0x08013748
 800af4c:	0800ae79 	.word	0x0800ae79

0800af50 <__sfp>:
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af52:	4607      	mov	r7, r0
 800af54:	f7ff ffac 	bl	800aeb0 <__sfp_lock_acquire>
 800af58:	4b1e      	ldr	r3, [pc, #120]	; (800afd4 <__sfp+0x84>)
 800af5a:	681e      	ldr	r6, [r3, #0]
 800af5c:	69b3      	ldr	r3, [r6, #24]
 800af5e:	b913      	cbnz	r3, 800af66 <__sfp+0x16>
 800af60:	4630      	mov	r0, r6
 800af62:	f7ff ffbd 	bl	800aee0 <__sinit>
 800af66:	3648      	adds	r6, #72	; 0x48
 800af68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	d503      	bpl.n	800af78 <__sfp+0x28>
 800af70:	6833      	ldr	r3, [r6, #0]
 800af72:	b30b      	cbz	r3, 800afb8 <__sfp+0x68>
 800af74:	6836      	ldr	r6, [r6, #0]
 800af76:	e7f7      	b.n	800af68 <__sfp+0x18>
 800af78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af7c:	b9d5      	cbnz	r5, 800afb4 <__sfp+0x64>
 800af7e:	4b16      	ldr	r3, [pc, #88]	; (800afd8 <__sfp+0x88>)
 800af80:	60e3      	str	r3, [r4, #12]
 800af82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af86:	6665      	str	r5, [r4, #100]	; 0x64
 800af88:	f000 f847 	bl	800b01a <__retarget_lock_init_recursive>
 800af8c:	f7ff ff96 	bl	800aebc <__sfp_lock_release>
 800af90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af98:	6025      	str	r5, [r4, #0]
 800af9a:	61a5      	str	r5, [r4, #24]
 800af9c:	2208      	movs	r2, #8
 800af9e:	4629      	mov	r1, r5
 800afa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afa4:	f7ff fc3c 	bl	800a820 <memset>
 800afa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800afac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800afb0:	4620      	mov	r0, r4
 800afb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb4:	3468      	adds	r4, #104	; 0x68
 800afb6:	e7d9      	b.n	800af6c <__sfp+0x1c>
 800afb8:	2104      	movs	r1, #4
 800afba:	4638      	mov	r0, r7
 800afbc:	f7ff ff62 	bl	800ae84 <__sfmoreglue>
 800afc0:	4604      	mov	r4, r0
 800afc2:	6030      	str	r0, [r6, #0]
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d1d5      	bne.n	800af74 <__sfp+0x24>
 800afc8:	f7ff ff78 	bl	800aebc <__sfp_lock_release>
 800afcc:	230c      	movs	r3, #12
 800afce:	603b      	str	r3, [r7, #0]
 800afd0:	e7ee      	b.n	800afb0 <__sfp+0x60>
 800afd2:	bf00      	nop
 800afd4:	08013748 	.word	0x08013748
 800afd8:	ffff0001 	.word	0xffff0001

0800afdc <_fwalk_reent>:
 800afdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe0:	4606      	mov	r6, r0
 800afe2:	4688      	mov	r8, r1
 800afe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afe8:	2700      	movs	r7, #0
 800afea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afee:	f1b9 0901 	subs.w	r9, r9, #1
 800aff2:	d505      	bpl.n	800b000 <_fwalk_reent+0x24>
 800aff4:	6824      	ldr	r4, [r4, #0]
 800aff6:	2c00      	cmp	r4, #0
 800aff8:	d1f7      	bne.n	800afea <_fwalk_reent+0xe>
 800affa:	4638      	mov	r0, r7
 800affc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b000:	89ab      	ldrh	r3, [r5, #12]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d907      	bls.n	800b016 <_fwalk_reent+0x3a>
 800b006:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b00a:	3301      	adds	r3, #1
 800b00c:	d003      	beq.n	800b016 <_fwalk_reent+0x3a>
 800b00e:	4629      	mov	r1, r5
 800b010:	4630      	mov	r0, r6
 800b012:	47c0      	blx	r8
 800b014:	4307      	orrs	r7, r0
 800b016:	3568      	adds	r5, #104	; 0x68
 800b018:	e7e9      	b.n	800afee <_fwalk_reent+0x12>

0800b01a <__retarget_lock_init_recursive>:
 800b01a:	4770      	bx	lr

0800b01c <__retarget_lock_acquire_recursive>:
 800b01c:	4770      	bx	lr

0800b01e <__retarget_lock_release_recursive>:
 800b01e:	4770      	bx	lr

0800b020 <__swhatbuf_r>:
 800b020:	b570      	push	{r4, r5, r6, lr}
 800b022:	460e      	mov	r6, r1
 800b024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b028:	2900      	cmp	r1, #0
 800b02a:	b096      	sub	sp, #88	; 0x58
 800b02c:	4614      	mov	r4, r2
 800b02e:	461d      	mov	r5, r3
 800b030:	da08      	bge.n	800b044 <__swhatbuf_r+0x24>
 800b032:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	602a      	str	r2, [r5, #0]
 800b03a:	061a      	lsls	r2, r3, #24
 800b03c:	d410      	bmi.n	800b060 <__swhatbuf_r+0x40>
 800b03e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b042:	e00e      	b.n	800b062 <__swhatbuf_r+0x42>
 800b044:	466a      	mov	r2, sp
 800b046:	f000 fbb1 	bl	800b7ac <_fstat_r>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	dbf1      	blt.n	800b032 <__swhatbuf_r+0x12>
 800b04e:	9a01      	ldr	r2, [sp, #4]
 800b050:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b054:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b058:	425a      	negs	r2, r3
 800b05a:	415a      	adcs	r2, r3
 800b05c:	602a      	str	r2, [r5, #0]
 800b05e:	e7ee      	b.n	800b03e <__swhatbuf_r+0x1e>
 800b060:	2340      	movs	r3, #64	; 0x40
 800b062:	2000      	movs	r0, #0
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	b016      	add	sp, #88	; 0x58
 800b068:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b06c <__smakebuf_r>:
 800b06c:	898b      	ldrh	r3, [r1, #12]
 800b06e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b070:	079d      	lsls	r5, r3, #30
 800b072:	4606      	mov	r6, r0
 800b074:	460c      	mov	r4, r1
 800b076:	d507      	bpl.n	800b088 <__smakebuf_r+0x1c>
 800b078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b07c:	6023      	str	r3, [r4, #0]
 800b07e:	6123      	str	r3, [r4, #16]
 800b080:	2301      	movs	r3, #1
 800b082:	6163      	str	r3, [r4, #20]
 800b084:	b002      	add	sp, #8
 800b086:	bd70      	pop	{r4, r5, r6, pc}
 800b088:	ab01      	add	r3, sp, #4
 800b08a:	466a      	mov	r2, sp
 800b08c:	f7ff ffc8 	bl	800b020 <__swhatbuf_r>
 800b090:	9900      	ldr	r1, [sp, #0]
 800b092:	4605      	mov	r5, r0
 800b094:	4630      	mov	r0, r6
 800b096:	f7ff fc37 	bl	800a908 <_malloc_r>
 800b09a:	b948      	cbnz	r0, 800b0b0 <__smakebuf_r+0x44>
 800b09c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0a0:	059a      	lsls	r2, r3, #22
 800b0a2:	d4ef      	bmi.n	800b084 <__smakebuf_r+0x18>
 800b0a4:	f023 0303 	bic.w	r3, r3, #3
 800b0a8:	f043 0302 	orr.w	r3, r3, #2
 800b0ac:	81a3      	strh	r3, [r4, #12]
 800b0ae:	e7e3      	b.n	800b078 <__smakebuf_r+0xc>
 800b0b0:	4b0d      	ldr	r3, [pc, #52]	; (800b0e8 <__smakebuf_r+0x7c>)
 800b0b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0b4:	89a3      	ldrh	r3, [r4, #12]
 800b0b6:	6020      	str	r0, [r4, #0]
 800b0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0bc:	81a3      	strh	r3, [r4, #12]
 800b0be:	9b00      	ldr	r3, [sp, #0]
 800b0c0:	6163      	str	r3, [r4, #20]
 800b0c2:	9b01      	ldr	r3, [sp, #4]
 800b0c4:	6120      	str	r0, [r4, #16]
 800b0c6:	b15b      	cbz	r3, 800b0e0 <__smakebuf_r+0x74>
 800b0c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f000 fb7f 	bl	800b7d0 <_isatty_r>
 800b0d2:	b128      	cbz	r0, 800b0e0 <__smakebuf_r+0x74>
 800b0d4:	89a3      	ldrh	r3, [r4, #12]
 800b0d6:	f023 0303 	bic.w	r3, r3, #3
 800b0da:	f043 0301 	orr.w	r3, r3, #1
 800b0de:	81a3      	strh	r3, [r4, #12]
 800b0e0:	89a0      	ldrh	r0, [r4, #12]
 800b0e2:	4305      	orrs	r5, r0
 800b0e4:	81a5      	strh	r5, [r4, #12]
 800b0e6:	e7cd      	b.n	800b084 <__smakebuf_r+0x18>
 800b0e8:	0800ae79 	.word	0x0800ae79

0800b0ec <__malloc_lock>:
 800b0ec:	4801      	ldr	r0, [pc, #4]	; (800b0f4 <__malloc_lock+0x8>)
 800b0ee:	f7ff bf95 	b.w	800b01c <__retarget_lock_acquire_recursive>
 800b0f2:	bf00      	nop
 800b0f4:	20003b90 	.word	0x20003b90

0800b0f8 <__malloc_unlock>:
 800b0f8:	4801      	ldr	r0, [pc, #4]	; (800b100 <__malloc_unlock+0x8>)
 800b0fa:	f7ff bf90 	b.w	800b01e <__retarget_lock_release_recursive>
 800b0fe:	bf00      	nop
 800b100:	20003b90 	.word	0x20003b90

0800b104 <__sfputc_r>:
 800b104:	6893      	ldr	r3, [r2, #8]
 800b106:	3b01      	subs	r3, #1
 800b108:	2b00      	cmp	r3, #0
 800b10a:	b410      	push	{r4}
 800b10c:	6093      	str	r3, [r2, #8]
 800b10e:	da08      	bge.n	800b122 <__sfputc_r+0x1e>
 800b110:	6994      	ldr	r4, [r2, #24]
 800b112:	42a3      	cmp	r3, r4
 800b114:	db01      	blt.n	800b11a <__sfputc_r+0x16>
 800b116:	290a      	cmp	r1, #10
 800b118:	d103      	bne.n	800b122 <__sfputc_r+0x1e>
 800b11a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b11e:	f7ff bd05 	b.w	800ab2c <__swbuf_r>
 800b122:	6813      	ldr	r3, [r2, #0]
 800b124:	1c58      	adds	r0, r3, #1
 800b126:	6010      	str	r0, [r2, #0]
 800b128:	7019      	strb	r1, [r3, #0]
 800b12a:	4608      	mov	r0, r1
 800b12c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <__sfputs_r>:
 800b132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b134:	4606      	mov	r6, r0
 800b136:	460f      	mov	r7, r1
 800b138:	4614      	mov	r4, r2
 800b13a:	18d5      	adds	r5, r2, r3
 800b13c:	42ac      	cmp	r4, r5
 800b13e:	d101      	bne.n	800b144 <__sfputs_r+0x12>
 800b140:	2000      	movs	r0, #0
 800b142:	e007      	b.n	800b154 <__sfputs_r+0x22>
 800b144:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b148:	463a      	mov	r2, r7
 800b14a:	4630      	mov	r0, r6
 800b14c:	f7ff ffda 	bl	800b104 <__sfputc_r>
 800b150:	1c43      	adds	r3, r0, #1
 800b152:	d1f3      	bne.n	800b13c <__sfputs_r+0xa>
 800b154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b158 <_vfiprintf_r>:
 800b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15c:	460d      	mov	r5, r1
 800b15e:	b09d      	sub	sp, #116	; 0x74
 800b160:	4614      	mov	r4, r2
 800b162:	4698      	mov	r8, r3
 800b164:	4606      	mov	r6, r0
 800b166:	b118      	cbz	r0, 800b170 <_vfiprintf_r+0x18>
 800b168:	6983      	ldr	r3, [r0, #24]
 800b16a:	b90b      	cbnz	r3, 800b170 <_vfiprintf_r+0x18>
 800b16c:	f7ff feb8 	bl	800aee0 <__sinit>
 800b170:	4b89      	ldr	r3, [pc, #548]	; (800b398 <_vfiprintf_r+0x240>)
 800b172:	429d      	cmp	r5, r3
 800b174:	d11b      	bne.n	800b1ae <_vfiprintf_r+0x56>
 800b176:	6875      	ldr	r5, [r6, #4]
 800b178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b17a:	07d9      	lsls	r1, r3, #31
 800b17c:	d405      	bmi.n	800b18a <_vfiprintf_r+0x32>
 800b17e:	89ab      	ldrh	r3, [r5, #12]
 800b180:	059a      	lsls	r2, r3, #22
 800b182:	d402      	bmi.n	800b18a <_vfiprintf_r+0x32>
 800b184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b186:	f7ff ff49 	bl	800b01c <__retarget_lock_acquire_recursive>
 800b18a:	89ab      	ldrh	r3, [r5, #12]
 800b18c:	071b      	lsls	r3, r3, #28
 800b18e:	d501      	bpl.n	800b194 <_vfiprintf_r+0x3c>
 800b190:	692b      	ldr	r3, [r5, #16]
 800b192:	b9eb      	cbnz	r3, 800b1d0 <_vfiprintf_r+0x78>
 800b194:	4629      	mov	r1, r5
 800b196:	4630      	mov	r0, r6
 800b198:	f7ff fd1a 	bl	800abd0 <__swsetup_r>
 800b19c:	b1c0      	cbz	r0, 800b1d0 <_vfiprintf_r+0x78>
 800b19e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1a0:	07dc      	lsls	r4, r3, #31
 800b1a2:	d50e      	bpl.n	800b1c2 <_vfiprintf_r+0x6a>
 800b1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a8:	b01d      	add	sp, #116	; 0x74
 800b1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ae:	4b7b      	ldr	r3, [pc, #492]	; (800b39c <_vfiprintf_r+0x244>)
 800b1b0:	429d      	cmp	r5, r3
 800b1b2:	d101      	bne.n	800b1b8 <_vfiprintf_r+0x60>
 800b1b4:	68b5      	ldr	r5, [r6, #8]
 800b1b6:	e7df      	b.n	800b178 <_vfiprintf_r+0x20>
 800b1b8:	4b79      	ldr	r3, [pc, #484]	; (800b3a0 <_vfiprintf_r+0x248>)
 800b1ba:	429d      	cmp	r5, r3
 800b1bc:	bf08      	it	eq
 800b1be:	68f5      	ldreq	r5, [r6, #12]
 800b1c0:	e7da      	b.n	800b178 <_vfiprintf_r+0x20>
 800b1c2:	89ab      	ldrh	r3, [r5, #12]
 800b1c4:	0598      	lsls	r0, r3, #22
 800b1c6:	d4ed      	bmi.n	800b1a4 <_vfiprintf_r+0x4c>
 800b1c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1ca:	f7ff ff28 	bl	800b01e <__retarget_lock_release_recursive>
 800b1ce:	e7e9      	b.n	800b1a4 <_vfiprintf_r+0x4c>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1d4:	2320      	movs	r3, #32
 800b1d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1da:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1de:	2330      	movs	r3, #48	; 0x30
 800b1e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b3a4 <_vfiprintf_r+0x24c>
 800b1e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1e8:	f04f 0901 	mov.w	r9, #1
 800b1ec:	4623      	mov	r3, r4
 800b1ee:	469a      	mov	sl, r3
 800b1f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1f4:	b10a      	cbz	r2, 800b1fa <_vfiprintf_r+0xa2>
 800b1f6:	2a25      	cmp	r2, #37	; 0x25
 800b1f8:	d1f9      	bne.n	800b1ee <_vfiprintf_r+0x96>
 800b1fa:	ebba 0b04 	subs.w	fp, sl, r4
 800b1fe:	d00b      	beq.n	800b218 <_vfiprintf_r+0xc0>
 800b200:	465b      	mov	r3, fp
 800b202:	4622      	mov	r2, r4
 800b204:	4629      	mov	r1, r5
 800b206:	4630      	mov	r0, r6
 800b208:	f7ff ff93 	bl	800b132 <__sfputs_r>
 800b20c:	3001      	adds	r0, #1
 800b20e:	f000 80aa 	beq.w	800b366 <_vfiprintf_r+0x20e>
 800b212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b214:	445a      	add	r2, fp
 800b216:	9209      	str	r2, [sp, #36]	; 0x24
 800b218:	f89a 3000 	ldrb.w	r3, [sl]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 80a2 	beq.w	800b366 <_vfiprintf_r+0x20e>
 800b222:	2300      	movs	r3, #0
 800b224:	f04f 32ff 	mov.w	r2, #4294967295
 800b228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b22c:	f10a 0a01 	add.w	sl, sl, #1
 800b230:	9304      	str	r3, [sp, #16]
 800b232:	9307      	str	r3, [sp, #28]
 800b234:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b238:	931a      	str	r3, [sp, #104]	; 0x68
 800b23a:	4654      	mov	r4, sl
 800b23c:	2205      	movs	r2, #5
 800b23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b242:	4858      	ldr	r0, [pc, #352]	; (800b3a4 <_vfiprintf_r+0x24c>)
 800b244:	f7f4 ffc4 	bl	80001d0 <memchr>
 800b248:	9a04      	ldr	r2, [sp, #16]
 800b24a:	b9d8      	cbnz	r0, 800b284 <_vfiprintf_r+0x12c>
 800b24c:	06d1      	lsls	r1, r2, #27
 800b24e:	bf44      	itt	mi
 800b250:	2320      	movmi	r3, #32
 800b252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b256:	0713      	lsls	r3, r2, #28
 800b258:	bf44      	itt	mi
 800b25a:	232b      	movmi	r3, #43	; 0x2b
 800b25c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b260:	f89a 3000 	ldrb.w	r3, [sl]
 800b264:	2b2a      	cmp	r3, #42	; 0x2a
 800b266:	d015      	beq.n	800b294 <_vfiprintf_r+0x13c>
 800b268:	9a07      	ldr	r2, [sp, #28]
 800b26a:	4654      	mov	r4, sl
 800b26c:	2000      	movs	r0, #0
 800b26e:	f04f 0c0a 	mov.w	ip, #10
 800b272:	4621      	mov	r1, r4
 800b274:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b278:	3b30      	subs	r3, #48	; 0x30
 800b27a:	2b09      	cmp	r3, #9
 800b27c:	d94e      	bls.n	800b31c <_vfiprintf_r+0x1c4>
 800b27e:	b1b0      	cbz	r0, 800b2ae <_vfiprintf_r+0x156>
 800b280:	9207      	str	r2, [sp, #28]
 800b282:	e014      	b.n	800b2ae <_vfiprintf_r+0x156>
 800b284:	eba0 0308 	sub.w	r3, r0, r8
 800b288:	fa09 f303 	lsl.w	r3, r9, r3
 800b28c:	4313      	orrs	r3, r2
 800b28e:	9304      	str	r3, [sp, #16]
 800b290:	46a2      	mov	sl, r4
 800b292:	e7d2      	b.n	800b23a <_vfiprintf_r+0xe2>
 800b294:	9b03      	ldr	r3, [sp, #12]
 800b296:	1d19      	adds	r1, r3, #4
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	9103      	str	r1, [sp, #12]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	bfbb      	ittet	lt
 800b2a0:	425b      	neglt	r3, r3
 800b2a2:	f042 0202 	orrlt.w	r2, r2, #2
 800b2a6:	9307      	strge	r3, [sp, #28]
 800b2a8:	9307      	strlt	r3, [sp, #28]
 800b2aa:	bfb8      	it	lt
 800b2ac:	9204      	strlt	r2, [sp, #16]
 800b2ae:	7823      	ldrb	r3, [r4, #0]
 800b2b0:	2b2e      	cmp	r3, #46	; 0x2e
 800b2b2:	d10c      	bne.n	800b2ce <_vfiprintf_r+0x176>
 800b2b4:	7863      	ldrb	r3, [r4, #1]
 800b2b6:	2b2a      	cmp	r3, #42	; 0x2a
 800b2b8:	d135      	bne.n	800b326 <_vfiprintf_r+0x1ce>
 800b2ba:	9b03      	ldr	r3, [sp, #12]
 800b2bc:	1d1a      	adds	r2, r3, #4
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	9203      	str	r2, [sp, #12]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	bfb8      	it	lt
 800b2c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2ca:	3402      	adds	r4, #2
 800b2cc:	9305      	str	r3, [sp, #20]
 800b2ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b3b4 <_vfiprintf_r+0x25c>
 800b2d2:	7821      	ldrb	r1, [r4, #0]
 800b2d4:	2203      	movs	r2, #3
 800b2d6:	4650      	mov	r0, sl
 800b2d8:	f7f4 ff7a 	bl	80001d0 <memchr>
 800b2dc:	b140      	cbz	r0, 800b2f0 <_vfiprintf_r+0x198>
 800b2de:	2340      	movs	r3, #64	; 0x40
 800b2e0:	eba0 000a 	sub.w	r0, r0, sl
 800b2e4:	fa03 f000 	lsl.w	r0, r3, r0
 800b2e8:	9b04      	ldr	r3, [sp, #16]
 800b2ea:	4303      	orrs	r3, r0
 800b2ec:	3401      	adds	r4, #1
 800b2ee:	9304      	str	r3, [sp, #16]
 800b2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2f4:	482c      	ldr	r0, [pc, #176]	; (800b3a8 <_vfiprintf_r+0x250>)
 800b2f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2fa:	2206      	movs	r2, #6
 800b2fc:	f7f4 ff68 	bl	80001d0 <memchr>
 800b300:	2800      	cmp	r0, #0
 800b302:	d03f      	beq.n	800b384 <_vfiprintf_r+0x22c>
 800b304:	4b29      	ldr	r3, [pc, #164]	; (800b3ac <_vfiprintf_r+0x254>)
 800b306:	bb1b      	cbnz	r3, 800b350 <_vfiprintf_r+0x1f8>
 800b308:	9b03      	ldr	r3, [sp, #12]
 800b30a:	3307      	adds	r3, #7
 800b30c:	f023 0307 	bic.w	r3, r3, #7
 800b310:	3308      	adds	r3, #8
 800b312:	9303      	str	r3, [sp, #12]
 800b314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b316:	443b      	add	r3, r7
 800b318:	9309      	str	r3, [sp, #36]	; 0x24
 800b31a:	e767      	b.n	800b1ec <_vfiprintf_r+0x94>
 800b31c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b320:	460c      	mov	r4, r1
 800b322:	2001      	movs	r0, #1
 800b324:	e7a5      	b.n	800b272 <_vfiprintf_r+0x11a>
 800b326:	2300      	movs	r3, #0
 800b328:	3401      	adds	r4, #1
 800b32a:	9305      	str	r3, [sp, #20]
 800b32c:	4619      	mov	r1, r3
 800b32e:	f04f 0c0a 	mov.w	ip, #10
 800b332:	4620      	mov	r0, r4
 800b334:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b338:	3a30      	subs	r2, #48	; 0x30
 800b33a:	2a09      	cmp	r2, #9
 800b33c:	d903      	bls.n	800b346 <_vfiprintf_r+0x1ee>
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d0c5      	beq.n	800b2ce <_vfiprintf_r+0x176>
 800b342:	9105      	str	r1, [sp, #20]
 800b344:	e7c3      	b.n	800b2ce <_vfiprintf_r+0x176>
 800b346:	fb0c 2101 	mla	r1, ip, r1, r2
 800b34a:	4604      	mov	r4, r0
 800b34c:	2301      	movs	r3, #1
 800b34e:	e7f0      	b.n	800b332 <_vfiprintf_r+0x1da>
 800b350:	ab03      	add	r3, sp, #12
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	462a      	mov	r2, r5
 800b356:	4b16      	ldr	r3, [pc, #88]	; (800b3b0 <_vfiprintf_r+0x258>)
 800b358:	a904      	add	r1, sp, #16
 800b35a:	4630      	mov	r0, r6
 800b35c:	f3af 8000 	nop.w
 800b360:	4607      	mov	r7, r0
 800b362:	1c78      	adds	r0, r7, #1
 800b364:	d1d6      	bne.n	800b314 <_vfiprintf_r+0x1bc>
 800b366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b368:	07d9      	lsls	r1, r3, #31
 800b36a:	d405      	bmi.n	800b378 <_vfiprintf_r+0x220>
 800b36c:	89ab      	ldrh	r3, [r5, #12]
 800b36e:	059a      	lsls	r2, r3, #22
 800b370:	d402      	bmi.n	800b378 <_vfiprintf_r+0x220>
 800b372:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b374:	f7ff fe53 	bl	800b01e <__retarget_lock_release_recursive>
 800b378:	89ab      	ldrh	r3, [r5, #12]
 800b37a:	065b      	lsls	r3, r3, #25
 800b37c:	f53f af12 	bmi.w	800b1a4 <_vfiprintf_r+0x4c>
 800b380:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b382:	e711      	b.n	800b1a8 <_vfiprintf_r+0x50>
 800b384:	ab03      	add	r3, sp, #12
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	462a      	mov	r2, r5
 800b38a:	4b09      	ldr	r3, [pc, #36]	; (800b3b0 <_vfiprintf_r+0x258>)
 800b38c:	a904      	add	r1, sp, #16
 800b38e:	4630      	mov	r0, r6
 800b390:	f000 f880 	bl	800b494 <_printf_i>
 800b394:	e7e4      	b.n	800b360 <_vfiprintf_r+0x208>
 800b396:	bf00      	nop
 800b398:	0801376c 	.word	0x0801376c
 800b39c:	0801378c 	.word	0x0801378c
 800b3a0:	0801374c 	.word	0x0801374c
 800b3a4:	080137ac 	.word	0x080137ac
 800b3a8:	080137b6 	.word	0x080137b6
 800b3ac:	00000000 	.word	0x00000000
 800b3b0:	0800b133 	.word	0x0800b133
 800b3b4:	080137b2 	.word	0x080137b2

0800b3b8 <_printf_common>:
 800b3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3bc:	4616      	mov	r6, r2
 800b3be:	4699      	mov	r9, r3
 800b3c0:	688a      	ldr	r2, [r1, #8]
 800b3c2:	690b      	ldr	r3, [r1, #16]
 800b3c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	bfb8      	it	lt
 800b3cc:	4613      	movlt	r3, r2
 800b3ce:	6033      	str	r3, [r6, #0]
 800b3d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3d4:	4607      	mov	r7, r0
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	b10a      	cbz	r2, 800b3de <_printf_common+0x26>
 800b3da:	3301      	adds	r3, #1
 800b3dc:	6033      	str	r3, [r6, #0]
 800b3de:	6823      	ldr	r3, [r4, #0]
 800b3e0:	0699      	lsls	r1, r3, #26
 800b3e2:	bf42      	ittt	mi
 800b3e4:	6833      	ldrmi	r3, [r6, #0]
 800b3e6:	3302      	addmi	r3, #2
 800b3e8:	6033      	strmi	r3, [r6, #0]
 800b3ea:	6825      	ldr	r5, [r4, #0]
 800b3ec:	f015 0506 	ands.w	r5, r5, #6
 800b3f0:	d106      	bne.n	800b400 <_printf_common+0x48>
 800b3f2:	f104 0a19 	add.w	sl, r4, #25
 800b3f6:	68e3      	ldr	r3, [r4, #12]
 800b3f8:	6832      	ldr	r2, [r6, #0]
 800b3fa:	1a9b      	subs	r3, r3, r2
 800b3fc:	42ab      	cmp	r3, r5
 800b3fe:	dc26      	bgt.n	800b44e <_printf_common+0x96>
 800b400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b404:	1e13      	subs	r3, r2, #0
 800b406:	6822      	ldr	r2, [r4, #0]
 800b408:	bf18      	it	ne
 800b40a:	2301      	movne	r3, #1
 800b40c:	0692      	lsls	r2, r2, #26
 800b40e:	d42b      	bmi.n	800b468 <_printf_common+0xb0>
 800b410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b414:	4649      	mov	r1, r9
 800b416:	4638      	mov	r0, r7
 800b418:	47c0      	blx	r8
 800b41a:	3001      	adds	r0, #1
 800b41c:	d01e      	beq.n	800b45c <_printf_common+0xa4>
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	68e5      	ldr	r5, [r4, #12]
 800b422:	6832      	ldr	r2, [r6, #0]
 800b424:	f003 0306 	and.w	r3, r3, #6
 800b428:	2b04      	cmp	r3, #4
 800b42a:	bf08      	it	eq
 800b42c:	1aad      	subeq	r5, r5, r2
 800b42e:	68a3      	ldr	r3, [r4, #8]
 800b430:	6922      	ldr	r2, [r4, #16]
 800b432:	bf0c      	ite	eq
 800b434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b438:	2500      	movne	r5, #0
 800b43a:	4293      	cmp	r3, r2
 800b43c:	bfc4      	itt	gt
 800b43e:	1a9b      	subgt	r3, r3, r2
 800b440:	18ed      	addgt	r5, r5, r3
 800b442:	2600      	movs	r6, #0
 800b444:	341a      	adds	r4, #26
 800b446:	42b5      	cmp	r5, r6
 800b448:	d11a      	bne.n	800b480 <_printf_common+0xc8>
 800b44a:	2000      	movs	r0, #0
 800b44c:	e008      	b.n	800b460 <_printf_common+0xa8>
 800b44e:	2301      	movs	r3, #1
 800b450:	4652      	mov	r2, sl
 800b452:	4649      	mov	r1, r9
 800b454:	4638      	mov	r0, r7
 800b456:	47c0      	blx	r8
 800b458:	3001      	adds	r0, #1
 800b45a:	d103      	bne.n	800b464 <_printf_common+0xac>
 800b45c:	f04f 30ff 	mov.w	r0, #4294967295
 800b460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b464:	3501      	adds	r5, #1
 800b466:	e7c6      	b.n	800b3f6 <_printf_common+0x3e>
 800b468:	18e1      	adds	r1, r4, r3
 800b46a:	1c5a      	adds	r2, r3, #1
 800b46c:	2030      	movs	r0, #48	; 0x30
 800b46e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b472:	4422      	add	r2, r4
 800b474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b47c:	3302      	adds	r3, #2
 800b47e:	e7c7      	b.n	800b410 <_printf_common+0x58>
 800b480:	2301      	movs	r3, #1
 800b482:	4622      	mov	r2, r4
 800b484:	4649      	mov	r1, r9
 800b486:	4638      	mov	r0, r7
 800b488:	47c0      	blx	r8
 800b48a:	3001      	adds	r0, #1
 800b48c:	d0e6      	beq.n	800b45c <_printf_common+0xa4>
 800b48e:	3601      	adds	r6, #1
 800b490:	e7d9      	b.n	800b446 <_printf_common+0x8e>
	...

0800b494 <_printf_i>:
 800b494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b498:	7e0f      	ldrb	r7, [r1, #24]
 800b49a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b49c:	2f78      	cmp	r7, #120	; 0x78
 800b49e:	4691      	mov	r9, r2
 800b4a0:	4680      	mov	r8, r0
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	469a      	mov	sl, r3
 800b4a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4aa:	d807      	bhi.n	800b4bc <_printf_i+0x28>
 800b4ac:	2f62      	cmp	r7, #98	; 0x62
 800b4ae:	d80a      	bhi.n	800b4c6 <_printf_i+0x32>
 800b4b0:	2f00      	cmp	r7, #0
 800b4b2:	f000 80d8 	beq.w	800b666 <_printf_i+0x1d2>
 800b4b6:	2f58      	cmp	r7, #88	; 0x58
 800b4b8:	f000 80a3 	beq.w	800b602 <_printf_i+0x16e>
 800b4bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4c4:	e03a      	b.n	800b53c <_printf_i+0xa8>
 800b4c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4ca:	2b15      	cmp	r3, #21
 800b4cc:	d8f6      	bhi.n	800b4bc <_printf_i+0x28>
 800b4ce:	a101      	add	r1, pc, #4	; (adr r1, 800b4d4 <_printf_i+0x40>)
 800b4d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4d4:	0800b52d 	.word	0x0800b52d
 800b4d8:	0800b541 	.word	0x0800b541
 800b4dc:	0800b4bd 	.word	0x0800b4bd
 800b4e0:	0800b4bd 	.word	0x0800b4bd
 800b4e4:	0800b4bd 	.word	0x0800b4bd
 800b4e8:	0800b4bd 	.word	0x0800b4bd
 800b4ec:	0800b541 	.word	0x0800b541
 800b4f0:	0800b4bd 	.word	0x0800b4bd
 800b4f4:	0800b4bd 	.word	0x0800b4bd
 800b4f8:	0800b4bd 	.word	0x0800b4bd
 800b4fc:	0800b4bd 	.word	0x0800b4bd
 800b500:	0800b64d 	.word	0x0800b64d
 800b504:	0800b571 	.word	0x0800b571
 800b508:	0800b62f 	.word	0x0800b62f
 800b50c:	0800b4bd 	.word	0x0800b4bd
 800b510:	0800b4bd 	.word	0x0800b4bd
 800b514:	0800b66f 	.word	0x0800b66f
 800b518:	0800b4bd 	.word	0x0800b4bd
 800b51c:	0800b571 	.word	0x0800b571
 800b520:	0800b4bd 	.word	0x0800b4bd
 800b524:	0800b4bd 	.word	0x0800b4bd
 800b528:	0800b637 	.word	0x0800b637
 800b52c:	682b      	ldr	r3, [r5, #0]
 800b52e:	1d1a      	adds	r2, r3, #4
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	602a      	str	r2, [r5, #0]
 800b534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b53c:	2301      	movs	r3, #1
 800b53e:	e0a3      	b.n	800b688 <_printf_i+0x1f4>
 800b540:	6820      	ldr	r0, [r4, #0]
 800b542:	6829      	ldr	r1, [r5, #0]
 800b544:	0606      	lsls	r6, r0, #24
 800b546:	f101 0304 	add.w	r3, r1, #4
 800b54a:	d50a      	bpl.n	800b562 <_printf_i+0xce>
 800b54c:	680e      	ldr	r6, [r1, #0]
 800b54e:	602b      	str	r3, [r5, #0]
 800b550:	2e00      	cmp	r6, #0
 800b552:	da03      	bge.n	800b55c <_printf_i+0xc8>
 800b554:	232d      	movs	r3, #45	; 0x2d
 800b556:	4276      	negs	r6, r6
 800b558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b55c:	485e      	ldr	r0, [pc, #376]	; (800b6d8 <_printf_i+0x244>)
 800b55e:	230a      	movs	r3, #10
 800b560:	e019      	b.n	800b596 <_printf_i+0x102>
 800b562:	680e      	ldr	r6, [r1, #0]
 800b564:	602b      	str	r3, [r5, #0]
 800b566:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b56a:	bf18      	it	ne
 800b56c:	b236      	sxthne	r6, r6
 800b56e:	e7ef      	b.n	800b550 <_printf_i+0xbc>
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	6820      	ldr	r0, [r4, #0]
 800b574:	1d19      	adds	r1, r3, #4
 800b576:	6029      	str	r1, [r5, #0]
 800b578:	0601      	lsls	r1, r0, #24
 800b57a:	d501      	bpl.n	800b580 <_printf_i+0xec>
 800b57c:	681e      	ldr	r6, [r3, #0]
 800b57e:	e002      	b.n	800b586 <_printf_i+0xf2>
 800b580:	0646      	lsls	r6, r0, #25
 800b582:	d5fb      	bpl.n	800b57c <_printf_i+0xe8>
 800b584:	881e      	ldrh	r6, [r3, #0]
 800b586:	4854      	ldr	r0, [pc, #336]	; (800b6d8 <_printf_i+0x244>)
 800b588:	2f6f      	cmp	r7, #111	; 0x6f
 800b58a:	bf0c      	ite	eq
 800b58c:	2308      	moveq	r3, #8
 800b58e:	230a      	movne	r3, #10
 800b590:	2100      	movs	r1, #0
 800b592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b596:	6865      	ldr	r5, [r4, #4]
 800b598:	60a5      	str	r5, [r4, #8]
 800b59a:	2d00      	cmp	r5, #0
 800b59c:	bfa2      	ittt	ge
 800b59e:	6821      	ldrge	r1, [r4, #0]
 800b5a0:	f021 0104 	bicge.w	r1, r1, #4
 800b5a4:	6021      	strge	r1, [r4, #0]
 800b5a6:	b90e      	cbnz	r6, 800b5ac <_printf_i+0x118>
 800b5a8:	2d00      	cmp	r5, #0
 800b5aa:	d04d      	beq.n	800b648 <_printf_i+0x1b4>
 800b5ac:	4615      	mov	r5, r2
 800b5ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5b2:	fb03 6711 	mls	r7, r3, r1, r6
 800b5b6:	5dc7      	ldrb	r7, [r0, r7]
 800b5b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5bc:	4637      	mov	r7, r6
 800b5be:	42bb      	cmp	r3, r7
 800b5c0:	460e      	mov	r6, r1
 800b5c2:	d9f4      	bls.n	800b5ae <_printf_i+0x11a>
 800b5c4:	2b08      	cmp	r3, #8
 800b5c6:	d10b      	bne.n	800b5e0 <_printf_i+0x14c>
 800b5c8:	6823      	ldr	r3, [r4, #0]
 800b5ca:	07de      	lsls	r6, r3, #31
 800b5cc:	d508      	bpl.n	800b5e0 <_printf_i+0x14c>
 800b5ce:	6923      	ldr	r3, [r4, #16]
 800b5d0:	6861      	ldr	r1, [r4, #4]
 800b5d2:	4299      	cmp	r1, r3
 800b5d4:	bfde      	ittt	le
 800b5d6:	2330      	movle	r3, #48	; 0x30
 800b5d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b5e0:	1b52      	subs	r2, r2, r5
 800b5e2:	6122      	str	r2, [r4, #16]
 800b5e4:	f8cd a000 	str.w	sl, [sp]
 800b5e8:	464b      	mov	r3, r9
 800b5ea:	aa03      	add	r2, sp, #12
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	4640      	mov	r0, r8
 800b5f0:	f7ff fee2 	bl	800b3b8 <_printf_common>
 800b5f4:	3001      	adds	r0, #1
 800b5f6:	d14c      	bne.n	800b692 <_printf_i+0x1fe>
 800b5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5fc:	b004      	add	sp, #16
 800b5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b602:	4835      	ldr	r0, [pc, #212]	; (800b6d8 <_printf_i+0x244>)
 800b604:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b608:	6829      	ldr	r1, [r5, #0]
 800b60a:	6823      	ldr	r3, [r4, #0]
 800b60c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b610:	6029      	str	r1, [r5, #0]
 800b612:	061d      	lsls	r5, r3, #24
 800b614:	d514      	bpl.n	800b640 <_printf_i+0x1ac>
 800b616:	07df      	lsls	r7, r3, #31
 800b618:	bf44      	itt	mi
 800b61a:	f043 0320 	orrmi.w	r3, r3, #32
 800b61e:	6023      	strmi	r3, [r4, #0]
 800b620:	b91e      	cbnz	r6, 800b62a <_printf_i+0x196>
 800b622:	6823      	ldr	r3, [r4, #0]
 800b624:	f023 0320 	bic.w	r3, r3, #32
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	2310      	movs	r3, #16
 800b62c:	e7b0      	b.n	800b590 <_printf_i+0xfc>
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	f043 0320 	orr.w	r3, r3, #32
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	2378      	movs	r3, #120	; 0x78
 800b638:	4828      	ldr	r0, [pc, #160]	; (800b6dc <_printf_i+0x248>)
 800b63a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b63e:	e7e3      	b.n	800b608 <_printf_i+0x174>
 800b640:	0659      	lsls	r1, r3, #25
 800b642:	bf48      	it	mi
 800b644:	b2b6      	uxthmi	r6, r6
 800b646:	e7e6      	b.n	800b616 <_printf_i+0x182>
 800b648:	4615      	mov	r5, r2
 800b64a:	e7bb      	b.n	800b5c4 <_printf_i+0x130>
 800b64c:	682b      	ldr	r3, [r5, #0]
 800b64e:	6826      	ldr	r6, [r4, #0]
 800b650:	6961      	ldr	r1, [r4, #20]
 800b652:	1d18      	adds	r0, r3, #4
 800b654:	6028      	str	r0, [r5, #0]
 800b656:	0635      	lsls	r5, r6, #24
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	d501      	bpl.n	800b660 <_printf_i+0x1cc>
 800b65c:	6019      	str	r1, [r3, #0]
 800b65e:	e002      	b.n	800b666 <_printf_i+0x1d2>
 800b660:	0670      	lsls	r0, r6, #25
 800b662:	d5fb      	bpl.n	800b65c <_printf_i+0x1c8>
 800b664:	8019      	strh	r1, [r3, #0]
 800b666:	2300      	movs	r3, #0
 800b668:	6123      	str	r3, [r4, #16]
 800b66a:	4615      	mov	r5, r2
 800b66c:	e7ba      	b.n	800b5e4 <_printf_i+0x150>
 800b66e:	682b      	ldr	r3, [r5, #0]
 800b670:	1d1a      	adds	r2, r3, #4
 800b672:	602a      	str	r2, [r5, #0]
 800b674:	681d      	ldr	r5, [r3, #0]
 800b676:	6862      	ldr	r2, [r4, #4]
 800b678:	2100      	movs	r1, #0
 800b67a:	4628      	mov	r0, r5
 800b67c:	f7f4 fda8 	bl	80001d0 <memchr>
 800b680:	b108      	cbz	r0, 800b686 <_printf_i+0x1f2>
 800b682:	1b40      	subs	r0, r0, r5
 800b684:	6060      	str	r0, [r4, #4]
 800b686:	6863      	ldr	r3, [r4, #4]
 800b688:	6123      	str	r3, [r4, #16]
 800b68a:	2300      	movs	r3, #0
 800b68c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b690:	e7a8      	b.n	800b5e4 <_printf_i+0x150>
 800b692:	6923      	ldr	r3, [r4, #16]
 800b694:	462a      	mov	r2, r5
 800b696:	4649      	mov	r1, r9
 800b698:	4640      	mov	r0, r8
 800b69a:	47d0      	blx	sl
 800b69c:	3001      	adds	r0, #1
 800b69e:	d0ab      	beq.n	800b5f8 <_printf_i+0x164>
 800b6a0:	6823      	ldr	r3, [r4, #0]
 800b6a2:	079b      	lsls	r3, r3, #30
 800b6a4:	d413      	bmi.n	800b6ce <_printf_i+0x23a>
 800b6a6:	68e0      	ldr	r0, [r4, #12]
 800b6a8:	9b03      	ldr	r3, [sp, #12]
 800b6aa:	4298      	cmp	r0, r3
 800b6ac:	bfb8      	it	lt
 800b6ae:	4618      	movlt	r0, r3
 800b6b0:	e7a4      	b.n	800b5fc <_printf_i+0x168>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	4632      	mov	r2, r6
 800b6b6:	4649      	mov	r1, r9
 800b6b8:	4640      	mov	r0, r8
 800b6ba:	47d0      	blx	sl
 800b6bc:	3001      	adds	r0, #1
 800b6be:	d09b      	beq.n	800b5f8 <_printf_i+0x164>
 800b6c0:	3501      	adds	r5, #1
 800b6c2:	68e3      	ldr	r3, [r4, #12]
 800b6c4:	9903      	ldr	r1, [sp, #12]
 800b6c6:	1a5b      	subs	r3, r3, r1
 800b6c8:	42ab      	cmp	r3, r5
 800b6ca:	dcf2      	bgt.n	800b6b2 <_printf_i+0x21e>
 800b6cc:	e7eb      	b.n	800b6a6 <_printf_i+0x212>
 800b6ce:	2500      	movs	r5, #0
 800b6d0:	f104 0619 	add.w	r6, r4, #25
 800b6d4:	e7f5      	b.n	800b6c2 <_printf_i+0x22e>
 800b6d6:	bf00      	nop
 800b6d8:	080137bd 	.word	0x080137bd
 800b6dc:	080137ce 	.word	0x080137ce

0800b6e0 <__sread>:
 800b6e0:	b510      	push	{r4, lr}
 800b6e2:	460c      	mov	r4, r1
 800b6e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e8:	f000 f894 	bl	800b814 <_read_r>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	bfab      	itete	ge
 800b6f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6f2:	89a3      	ldrhlt	r3, [r4, #12]
 800b6f4:	181b      	addge	r3, r3, r0
 800b6f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6fa:	bfac      	ite	ge
 800b6fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6fe:	81a3      	strhlt	r3, [r4, #12]
 800b700:	bd10      	pop	{r4, pc}

0800b702 <__swrite>:
 800b702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b706:	461f      	mov	r7, r3
 800b708:	898b      	ldrh	r3, [r1, #12]
 800b70a:	05db      	lsls	r3, r3, #23
 800b70c:	4605      	mov	r5, r0
 800b70e:	460c      	mov	r4, r1
 800b710:	4616      	mov	r6, r2
 800b712:	d505      	bpl.n	800b720 <__swrite+0x1e>
 800b714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b718:	2302      	movs	r3, #2
 800b71a:	2200      	movs	r2, #0
 800b71c:	f000 f868 	bl	800b7f0 <_lseek_r>
 800b720:	89a3      	ldrh	r3, [r4, #12]
 800b722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b72a:	81a3      	strh	r3, [r4, #12]
 800b72c:	4632      	mov	r2, r6
 800b72e:	463b      	mov	r3, r7
 800b730:	4628      	mov	r0, r5
 800b732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b736:	f000 b817 	b.w	800b768 <_write_r>

0800b73a <__sseek>:
 800b73a:	b510      	push	{r4, lr}
 800b73c:	460c      	mov	r4, r1
 800b73e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b742:	f000 f855 	bl	800b7f0 <_lseek_r>
 800b746:	1c43      	adds	r3, r0, #1
 800b748:	89a3      	ldrh	r3, [r4, #12]
 800b74a:	bf15      	itete	ne
 800b74c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b74e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b756:	81a3      	strheq	r3, [r4, #12]
 800b758:	bf18      	it	ne
 800b75a:	81a3      	strhne	r3, [r4, #12]
 800b75c:	bd10      	pop	{r4, pc}

0800b75e <__sclose>:
 800b75e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b762:	f000 b813 	b.w	800b78c <_close_r>
	...

0800b768 <_write_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4d07      	ldr	r5, [pc, #28]	; (800b788 <_write_r+0x20>)
 800b76c:	4604      	mov	r4, r0
 800b76e:	4608      	mov	r0, r1
 800b770:	4611      	mov	r1, r2
 800b772:	2200      	movs	r2, #0
 800b774:	602a      	str	r2, [r5, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	f000 f9ba 	bl	800baf0 <_write>
 800b77c:	1c43      	adds	r3, r0, #1
 800b77e:	d102      	bne.n	800b786 <_write_r+0x1e>
 800b780:	682b      	ldr	r3, [r5, #0]
 800b782:	b103      	cbz	r3, 800b786 <_write_r+0x1e>
 800b784:	6023      	str	r3, [r4, #0]
 800b786:	bd38      	pop	{r3, r4, r5, pc}
 800b788:	20003b94 	.word	0x20003b94

0800b78c <_close_r>:
 800b78c:	b538      	push	{r3, r4, r5, lr}
 800b78e:	4d06      	ldr	r5, [pc, #24]	; (800b7a8 <_close_r+0x1c>)
 800b790:	2300      	movs	r3, #0
 800b792:	4604      	mov	r4, r0
 800b794:	4608      	mov	r0, r1
 800b796:	602b      	str	r3, [r5, #0]
 800b798:	f000 f982 	bl	800baa0 <_close>
 800b79c:	1c43      	adds	r3, r0, #1
 800b79e:	d102      	bne.n	800b7a6 <_close_r+0x1a>
 800b7a0:	682b      	ldr	r3, [r5, #0]
 800b7a2:	b103      	cbz	r3, 800b7a6 <_close_r+0x1a>
 800b7a4:	6023      	str	r3, [r4, #0]
 800b7a6:	bd38      	pop	{r3, r4, r5, pc}
 800b7a8:	20003b94 	.word	0x20003b94

0800b7ac <_fstat_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4d07      	ldr	r5, [pc, #28]	; (800b7cc <_fstat_r+0x20>)
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	4611      	mov	r1, r2
 800b7b8:	602b      	str	r3, [r5, #0]
 800b7ba:	f000 f979 	bl	800bab0 <_fstat>
 800b7be:	1c43      	adds	r3, r0, #1
 800b7c0:	d102      	bne.n	800b7c8 <_fstat_r+0x1c>
 800b7c2:	682b      	ldr	r3, [r5, #0]
 800b7c4:	b103      	cbz	r3, 800b7c8 <_fstat_r+0x1c>
 800b7c6:	6023      	str	r3, [r4, #0]
 800b7c8:	bd38      	pop	{r3, r4, r5, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20003b94 	.word	0x20003b94

0800b7d0 <_isatty_r>:
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	4d06      	ldr	r5, [pc, #24]	; (800b7ec <_isatty_r+0x1c>)
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	4608      	mov	r0, r1
 800b7da:	602b      	str	r3, [r5, #0]
 800b7dc:	f000 f970 	bl	800bac0 <_isatty>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_isatty_r+0x1a>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_isatty_r+0x1a>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	20003b94 	.word	0x20003b94

0800b7f0 <_lseek_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d07      	ldr	r5, [pc, #28]	; (800b810 <_lseek_r+0x20>)
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	4608      	mov	r0, r1
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	602a      	str	r2, [r5, #0]
 800b7fe:	461a      	mov	r2, r3
 800b800:	f000 f966 	bl	800bad0 <_lseek>
 800b804:	1c43      	adds	r3, r0, #1
 800b806:	d102      	bne.n	800b80e <_lseek_r+0x1e>
 800b808:	682b      	ldr	r3, [r5, #0]
 800b80a:	b103      	cbz	r3, 800b80e <_lseek_r+0x1e>
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
 800b810:	20003b94 	.word	0x20003b94

0800b814 <_read_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4d07      	ldr	r5, [pc, #28]	; (800b834 <_read_r+0x20>)
 800b818:	4604      	mov	r4, r0
 800b81a:	4608      	mov	r0, r1
 800b81c:	4611      	mov	r1, r2
 800b81e:	2200      	movs	r2, #0
 800b820:	602a      	str	r2, [r5, #0]
 800b822:	461a      	mov	r2, r3
 800b824:	f000 f95c 	bl	800bae0 <_read>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d102      	bne.n	800b832 <_read_r+0x1e>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	b103      	cbz	r3, 800b832 <_read_r+0x1e>
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	20003b94 	.word	0x20003b94

0800b838 <expf>:
 800b838:	b508      	push	{r3, lr}
 800b83a:	ed2d 8b02 	vpush	{d8}
 800b83e:	eef0 8a40 	vmov.f32	s17, s0
 800b842:	f000 f82f 	bl	800b8a4 <__ieee754_expf>
 800b846:	eeb0 8a40 	vmov.f32	s16, s0
 800b84a:	eeb0 0a68 	vmov.f32	s0, s17
 800b84e:	f000 f919 	bl	800ba84 <finitef>
 800b852:	b160      	cbz	r0, 800b86e <expf+0x36>
 800b854:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800b894 <expf+0x5c>
 800b858:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b860:	dd0a      	ble.n	800b878 <expf+0x40>
 800b862:	f7fe ffa5 	bl	800a7b0 <__errno>
 800b866:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800b898 <expf+0x60>
 800b86a:	2322      	movs	r3, #34	; 0x22
 800b86c:	6003      	str	r3, [r0, #0]
 800b86e:	eeb0 0a48 	vmov.f32	s0, s16
 800b872:	ecbd 8b02 	vpop	{d8}
 800b876:	bd08      	pop	{r3, pc}
 800b878:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b89c <expf+0x64>
 800b87c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b884:	d5f3      	bpl.n	800b86e <expf+0x36>
 800b886:	f7fe ff93 	bl	800a7b0 <__errno>
 800b88a:	2322      	movs	r3, #34	; 0x22
 800b88c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800b8a0 <expf+0x68>
 800b890:	6003      	str	r3, [r0, #0]
 800b892:	e7ec      	b.n	800b86e <expf+0x36>
 800b894:	42b17180 	.word	0x42b17180
 800b898:	7f800000 	.word	0x7f800000
 800b89c:	c2cff1b5 	.word	0xc2cff1b5
 800b8a0:	00000000 	.word	0x00000000

0800b8a4 <__ieee754_expf>:
 800b8a4:	ee10 2a10 	vmov	r2, s0
 800b8a8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b8ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b8b0:	d902      	bls.n	800b8b8 <__ieee754_expf+0x14>
 800b8b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b8b6:	4770      	bx	lr
 800b8b8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800b8bc:	d106      	bne.n	800b8cc <__ieee754_expf+0x28>
 800b8be:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800b9f8 <__ieee754_expf+0x154>
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	bf18      	it	ne
 800b8c6:	eeb0 0a67 	vmovne.f32	s0, s15
 800b8ca:	4770      	bx	lr
 800b8cc:	484b      	ldr	r0, [pc, #300]	; (800b9fc <__ieee754_expf+0x158>)
 800b8ce:	4282      	cmp	r2, r0
 800b8d0:	dd02      	ble.n	800b8d8 <__ieee754_expf+0x34>
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	f000 b8d0 	b.w	800ba78 <__math_oflowf>
 800b8d8:	2a00      	cmp	r2, #0
 800b8da:	da05      	bge.n	800b8e8 <__ieee754_expf+0x44>
 800b8dc:	4a48      	ldr	r2, [pc, #288]	; (800ba00 <__ieee754_expf+0x15c>)
 800b8de:	4291      	cmp	r1, r2
 800b8e0:	d902      	bls.n	800b8e8 <__ieee754_expf+0x44>
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	f000 b8c2 	b.w	800ba6c <__math_uflowf>
 800b8e8:	4a46      	ldr	r2, [pc, #280]	; (800ba04 <__ieee754_expf+0x160>)
 800b8ea:	4291      	cmp	r1, r2
 800b8ec:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b8f0:	d952      	bls.n	800b998 <__ieee754_expf+0xf4>
 800b8f2:	4a45      	ldr	r2, [pc, #276]	; (800ba08 <__ieee754_expf+0x164>)
 800b8f4:	4291      	cmp	r1, r2
 800b8f6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800b8fa:	d834      	bhi.n	800b966 <__ieee754_expf+0xc2>
 800b8fc:	4943      	ldr	r1, [pc, #268]	; (800ba0c <__ieee754_expf+0x168>)
 800b8fe:	4411      	add	r1, r2
 800b900:	ed91 7a00 	vldr	s14, [r1]
 800b904:	4942      	ldr	r1, [pc, #264]	; (800ba10 <__ieee754_expf+0x16c>)
 800b906:	440a      	add	r2, r1
 800b908:	edd2 7a00 	vldr	s15, [r2]
 800b90c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b910:	f1c3 0201 	rsb	r2, r3, #1
 800b914:	1ad2      	subs	r2, r2, r3
 800b916:	ee37 0a67 	vsub.f32	s0, s14, s15
 800b91a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800b91e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800ba14 <__ieee754_expf+0x170>
 800b922:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ba18 <__ieee754_expf+0x174>
 800b926:	eee6 6a05 	vfma.f32	s13, s12, s10
 800b92a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800ba1c <__ieee754_expf+0x178>
 800b92e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b932:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ba20 <__ieee754_expf+0x17c>
 800b936:	eee5 6a06 	vfma.f32	s13, s10, s12
 800b93a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800ba24 <__ieee754_expf+0x180>
 800b93e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b942:	eef0 6a40 	vmov.f32	s13, s0
 800b946:	eee5 6a46 	vfms.f32	s13, s10, s12
 800b94a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800b94e:	ee20 5a26 	vmul.f32	s10, s0, s13
 800b952:	bb92      	cbnz	r2, 800b9ba <__ieee754_expf+0x116>
 800b954:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800b958:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800b95c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b960:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800b964:	4770      	bx	lr
 800b966:	4b30      	ldr	r3, [pc, #192]	; (800ba28 <__ieee754_expf+0x184>)
 800b968:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800ba2c <__ieee754_expf+0x188>
 800b96c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800ba30 <__ieee754_expf+0x18c>
 800b970:	4413      	add	r3, r2
 800b972:	edd3 7a00 	vldr	s15, [r3]
 800b976:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b97a:	eeb0 7a40 	vmov.f32	s14, s0
 800b97e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b982:	ee17 2a90 	vmov	r2, s15
 800b986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b98a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b98e:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ba34 <__ieee754_expf+0x190>
 800b992:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b996:	e7be      	b.n	800b916 <__ieee754_expf+0x72>
 800b998:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800b99c:	d20b      	bcs.n	800b9b6 <__ieee754_expf+0x112>
 800b99e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ba38 <__ieee754_expf+0x194>
 800b9a2:	ee70 6a26 	vadd.f32	s13, s0, s13
 800b9a6:	eef4 6ae5 	vcmpe.f32	s13, s11
 800b9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ae:	dd02      	ble.n	800b9b6 <__ieee754_expf+0x112>
 800b9b0:	ee30 0a25 	vadd.f32	s0, s0, s11
 800b9b4:	4770      	bx	lr
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	e7af      	b.n	800b91a <__ieee754_expf+0x76>
 800b9ba:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b9be:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800b9c2:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800b9c6:	bfb8      	it	lt
 800b9c8:	3264      	addlt	r2, #100	; 0x64
 800b9ca:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b9ce:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b9d2:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800b9d6:	ee17 3a90 	vmov	r3, s15
 800b9da:	bfab      	itete	ge
 800b9dc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b9e0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b9e4:	ee00 3a10 	vmovge	s0, r3
 800b9e8:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800ba3c <__ieee754_expf+0x198>
 800b9ec:	bfbc      	itt	lt
 800b9ee:	ee00 3a10 	vmovlt	s0, r3
 800b9f2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b9f6:	4770      	bx	lr
 800b9f8:	00000000 	.word	0x00000000
 800b9fc:	42b17217 	.word	0x42b17217
 800ba00:	42cff1b5 	.word	0x42cff1b5
 800ba04:	3eb17218 	.word	0x3eb17218
 800ba08:	3f851591 	.word	0x3f851591
 800ba0c:	080137e8 	.word	0x080137e8
 800ba10:	080137f0 	.word	0x080137f0
 800ba14:	3331bb4c 	.word	0x3331bb4c
 800ba18:	b5ddea0e 	.word	0xb5ddea0e
 800ba1c:	388ab355 	.word	0x388ab355
 800ba20:	bb360b61 	.word	0xbb360b61
 800ba24:	3e2aaaab 	.word	0x3e2aaaab
 800ba28:	080137e0 	.word	0x080137e0
 800ba2c:	3fb8aa3b 	.word	0x3fb8aa3b
 800ba30:	3f317180 	.word	0x3f317180
 800ba34:	3717f7d1 	.word	0x3717f7d1
 800ba38:	7149f2ca 	.word	0x7149f2ca
 800ba3c:	0d800000 	.word	0x0d800000

0800ba40 <with_errnof>:
 800ba40:	b513      	push	{r0, r1, r4, lr}
 800ba42:	4604      	mov	r4, r0
 800ba44:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ba48:	f7fe feb2 	bl	800a7b0 <__errno>
 800ba4c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ba50:	6004      	str	r4, [r0, #0]
 800ba52:	b002      	add	sp, #8
 800ba54:	bd10      	pop	{r4, pc}

0800ba56 <xflowf>:
 800ba56:	b130      	cbz	r0, 800ba66 <xflowf+0x10>
 800ba58:	eef1 7a40 	vneg.f32	s15, s0
 800ba5c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ba60:	2022      	movs	r0, #34	; 0x22
 800ba62:	f7ff bfed 	b.w	800ba40 <with_errnof>
 800ba66:	eef0 7a40 	vmov.f32	s15, s0
 800ba6a:	e7f7      	b.n	800ba5c <xflowf+0x6>

0800ba6c <__math_uflowf>:
 800ba6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ba74 <__math_uflowf+0x8>
 800ba70:	f7ff bff1 	b.w	800ba56 <xflowf>
 800ba74:	10000000 	.word	0x10000000

0800ba78 <__math_oflowf>:
 800ba78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ba80 <__math_oflowf+0x8>
 800ba7c:	f7ff bfeb 	b.w	800ba56 <xflowf>
 800ba80:	70000000 	.word	0x70000000

0800ba84 <finitef>:
 800ba84:	b082      	sub	sp, #8
 800ba86:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ba8a:	9801      	ldr	r0, [sp, #4]
 800ba8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ba90:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ba94:	bfac      	ite	ge
 800ba96:	2000      	movge	r0, #0
 800ba98:	2001      	movlt	r0, #1
 800ba9a:	b002      	add	sp, #8
 800ba9c:	4770      	bx	lr
	...

0800baa0 <_close>:
 800baa0:	4b02      	ldr	r3, [pc, #8]	; (800baac <_close+0xc>)
 800baa2:	2258      	movs	r2, #88	; 0x58
 800baa4:	601a      	str	r2, [r3, #0]
 800baa6:	f04f 30ff 	mov.w	r0, #4294967295
 800baaa:	4770      	bx	lr
 800baac:	20003b94 	.word	0x20003b94

0800bab0 <_fstat>:
 800bab0:	4b02      	ldr	r3, [pc, #8]	; (800babc <_fstat+0xc>)
 800bab2:	2258      	movs	r2, #88	; 0x58
 800bab4:	601a      	str	r2, [r3, #0]
 800bab6:	f04f 30ff 	mov.w	r0, #4294967295
 800baba:	4770      	bx	lr
 800babc:	20003b94 	.word	0x20003b94

0800bac0 <_isatty>:
 800bac0:	4b02      	ldr	r3, [pc, #8]	; (800bacc <_isatty+0xc>)
 800bac2:	2258      	movs	r2, #88	; 0x58
 800bac4:	601a      	str	r2, [r3, #0]
 800bac6:	2000      	movs	r0, #0
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	20003b94 	.word	0x20003b94

0800bad0 <_lseek>:
 800bad0:	4b02      	ldr	r3, [pc, #8]	; (800badc <_lseek+0xc>)
 800bad2:	2258      	movs	r2, #88	; 0x58
 800bad4:	601a      	str	r2, [r3, #0]
 800bad6:	f04f 30ff 	mov.w	r0, #4294967295
 800bada:	4770      	bx	lr
 800badc:	20003b94 	.word	0x20003b94

0800bae0 <_read>:
 800bae0:	4b02      	ldr	r3, [pc, #8]	; (800baec <_read+0xc>)
 800bae2:	2258      	movs	r2, #88	; 0x58
 800bae4:	601a      	str	r2, [r3, #0]
 800bae6:	f04f 30ff 	mov.w	r0, #4294967295
 800baea:	4770      	bx	lr
 800baec:	20003b94 	.word	0x20003b94

0800baf0 <_write>:
 800baf0:	4b02      	ldr	r3, [pc, #8]	; (800bafc <_write+0xc>)
 800baf2:	2258      	movs	r2, #88	; 0x58
 800baf4:	601a      	str	r2, [r3, #0]
 800baf6:	f04f 30ff 	mov.w	r0, #4294967295
 800bafa:	4770      	bx	lr
 800bafc:	20003b94 	.word	0x20003b94

0800bb00 <_init>:
 800bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb02:	bf00      	nop
 800bb04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb06:	bc08      	pop	{r3}
 800bb08:	469e      	mov	lr, r3
 800bb0a:	4770      	bx	lr

0800bb0c <_fini>:
 800bb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb0e:	bf00      	nop
 800bb10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb12:	bc08      	pop	{r3}
 800bb14:	469e      	mov	lr, r3
 800bb16:	4770      	bx	lr
